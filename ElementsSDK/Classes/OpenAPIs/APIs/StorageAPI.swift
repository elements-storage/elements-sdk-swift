//
// StorageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

open class StorageAPI {
    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func applyWorkspaceAffinity( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        applyWorkspaceAffinityWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/apply-affinity
     - ### Required permissions    * User account permission: `projects:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Void> 
     */
    open class func applyWorkspaceAffinityWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/apply-affinity"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func bookmarkWorkspace( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        bookmarkWorkspaceWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/bookmark
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Void> 
     */
    open class func bookmarkWorkspaceWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter pathInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FileSizeEndpointResponse>
     */
    open class func calculateDirectorySize( pathInput: PathInput, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FileSizeEndpointResponse> {
        let deferred = Promise<FileSizeEndpointResponse>.pending()
        calculateDirectorySizeWithRequestBuilder(pathInput: pathInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/calculate-directory-size
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter pathInput: (body)  
     - returns: RequestBuilder<FileSizeEndpointResponse> 
     */
    open class func calculateDirectorySizeWithRequestBuilder(pathInput: PathInput) -> RequestBuilder<FileSizeEndpointResponse> {
        let path = "/api/2/filesystem/calculate-directory-size"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pathInput)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FileSizeEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspaceCheckIn: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func checkInIntoWorkspace( id: Int,  workspaceCheckIn: WorkspaceCheckIn, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        checkInIntoWorkspaceWithRequestBuilder(id: id, workspaceCheckIn: workspaceCheckIn).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/check-in
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspaceCheckIn: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func checkInIntoWorkspaceWithRequestBuilder(id: Int, workspaceCheckIn: WorkspaceCheckIn) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/check-in"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspaceCheckIn)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func checkOutOfWorkspace( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        checkOutOfWorkspaceWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/check-out
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Void> 
     */
    open class func checkOutOfWorkspaceWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/check-out"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter fileCopyEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func copyFiles( fileCopyEndpointRequest: FileCopyEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        copyFilesWithRequestBuilder(fileCopyEndpointRequest: fileCopyEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/copy
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter fileCopyEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func copyFilesWithRequestBuilder(fileCopyEndpointRequest: FileCopyEndpointRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/filesystem/copy"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileCopyEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter filesystemFile: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FilesystemFile>
     */
    open class func createFile( filesystemFile: FilesystemFile, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FilesystemFile> {
        let deferred = Promise<FilesystemFile>.pending()
        createFileWithRequestBuilder(filesystemFile: filesystemFile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/files
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter filesystemFile: (body)  
     - returns: RequestBuilder<FilesystemFile> 
     */
    open class func createFileWithRequestBuilder(filesystemFile: FilesystemFile) -> RequestBuilder<FilesystemFile> {
        let path = "/api/2/files"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filesystemFile)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FilesystemFile>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter createPathQuotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createPathQuota( id: Int,  relativePath: String,  createPathQuotaRequest: CreatePathQuotaRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createPathQuotaWithRequestBuilder(id: id, relativePath: relativePath, createPathQuotaRequest: createPathQuotaRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/volumes/{id}/quotas/path/{relative_path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter createPathQuotaRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func createPathQuotaWithRequestBuilder(id: Int, relativePath: String, createPathQuotaRequest: CreatePathQuotaRequest) -> RequestBuilder<Void> {
        var path = "/api/2/volumes/{id}/quotas/path/{relative_path}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let relativePathPreEscape = "\(APIHelper.mapValueToPathItem(relativePath))"
        let relativePathPostEscape = relativePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relative_path}", with: relativePathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPathQuotaRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter production: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Production>
     */
    open class func createProduction( production: Production, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Production> {
        let deferred = Promise<Production>.pending()
        createProductionWithRequestBuilder(production: production).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/productions
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter production: (body)  
     - returns: RequestBuilder<Production> 
     */
    open class func createProductionWithRequestBuilder(production: Production) -> RequestBuilder<Production> {
        let path = "/api/2/productions"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: production)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Production>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter share: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Share>
     */
    open class func createShare( share: Share, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Share> {
        let deferred = Promise<Share>.pending()
        createShareWithRequestBuilder(share: share).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/shares
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter share: (body)  
     - returns: RequestBuilder<Share> 
     */
    open class func createShareWithRequestBuilder(share: Share) -> RequestBuilder<Share> {
        let path = "/api/2/shares"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: share)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Share>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter snapshot: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Snapshot>
     */
    open class func createSnapshot( snapshot: Snapshot, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Snapshot> {
        let deferred = Promise<Snapshot>.pending()
        createSnapshotWithRequestBuilder(snapshot: snapshot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/snapshots
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter snapshot: (body)  
     - returns: RequestBuilder<Snapshot> 
     */
    open class func createSnapshotWithRequestBuilder(snapshot: Snapshot) -> RequestBuilder<Snapshot> {
        let path = "/api/2/snapshots"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: snapshot)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Snapshot>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter createTemplateFolderEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createTemplateFolder( createTemplateFolderEndpointRequest: CreateTemplateFolderEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createTemplateFolderWithRequestBuilder(createTemplateFolderEndpointRequest: createTemplateFolderEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/create-template-folder
     - ### Required permissions    * User account permission: `folder_templates:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter createTemplateFolderEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func createTemplateFolderWithRequestBuilder(createTemplateFolderEndpointRequest: CreateTemplateFolderEndpointRequest) -> RequestBuilder<Void> {
        let path = "/api/2/private/create-template-folder"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTemplateFolderEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter workspace: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Workspace>
     */
    open class func createWorkspace( workspace: Workspace, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Workspace> {
        let deferred = Promise<Workspace>.pending()
        createWorkspaceWithRequestBuilder(workspace: workspace).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter workspace: (body)  
     - returns: RequestBuilder<Workspace> 
     */
    open class func createWorkspaceWithRequestBuilder(workspace: Workspace) -> RequestBuilder<Workspace> {
        let path = "/api/2/workspaces"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspace)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Workspace>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter workspacePermission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WorkspacePermission>
     */
    open class func createWorkspacePermission( workspacePermission: WorkspacePermission, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<WorkspacePermission> {
        let deferred = Promise<WorkspacePermission>.pending()
        createWorkspacePermissionWithRequestBuilder(workspacePermission: workspacePermission).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspace-permissions
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter workspacePermission: (body)  
     - returns: RequestBuilder<WorkspacePermission> 
     */
    open class func createWorkspacePermissionWithRequestBuilder(workspacePermission: WorkspacePermission) -> RequestBuilder<WorkspacePermission> {
        let path = "/api/2/workspace-permissions"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspacePermission)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WorkspacePermission>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter path: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteFile( path: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteFileWithRequestBuilder(path: path).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/files/{path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter path: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFileWithRequestBuilder(path: String) -> RequestBuilder<Void> {
        var path = "/api/2/files/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter fileDeleteEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func deleteFiles( fileDeleteEndpointRequest: FileDeleteEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        deleteFilesWithRequestBuilder(fileDeleteEndpointRequest: fileDeleteEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/delete
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter fileDeleteEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func deleteFilesWithRequestBuilder(fileDeleteEndpointRequest: FileDeleteEndpointRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/filesystem/delete"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileDeleteEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deletePathQuota( id: Int,  relativePath: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deletePathQuotaWithRequestBuilder(id: id, relativePath: relativePath).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/volumes/{id}/quotas/path/{relative_path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deletePathQuotaWithRequestBuilder(id: Int, relativePath: String) -> RequestBuilder<Void> {
        var path = "/api/2/volumes/{id}/quotas/path/{relative_path}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let relativePathPreEscape = "\(APIHelper.mapValueToPathItem(relativePath))"
        let relativePathPostEscape = relativePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relative_path}", with: relativePathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this production. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteProduction( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteProductionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/productions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this production. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProductionWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/productions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this share. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteShare( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteShareWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/shares/{id}
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this share. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteShareWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/shares/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteSnapshot( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteSnapshotWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/snapshots/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this snapshot. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSnapshotWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/snapshots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteWorkspace( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteWorkspaceWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/workspaces/{id}
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkspaceWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteWorkspacePermission( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteWorkspacePermissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/workspace-permissions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkspacePermissionWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspace-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[DeletedWorkspace]>
     */
    open class func getAllDeletedWorkspaces( isTemplate: String? = nil,  production: String? = nil,  volume: String? = nil,  homeFor: String? = nil,  volumeType: String? = nil,  productionName: String? = nil,  productionActive: String? = nil,  name: String? = nil,  isExternal: String? = nil,  active: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[DeletedWorkspace]> {
        let deferred = Promise<[DeletedWorkspace]>.pending()
        getAllDeletedWorkspacesWithRequestBuilder(isTemplate: isTemplate, production: production, volume: volume, homeFor: homeFor, volumeType: volumeType, productionName: productionName, productionActive: productionActive, name: name, isExternal: isExternal, active: active, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspaces/deleted
     - ### Required permissions    * User account permission: `projects:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[DeletedWorkspace]> 
     */
    open class func getAllDeletedWorkspacesWithRequestBuilder(isTemplate: String? = nil, production: String? = nil, volume: String? = nil, homeFor: String? = nil, volumeType: String? = nil, productionName: String? = nil, productionActive: String? = nil, name: String? = nil, isExternal: String? = nil, active: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[DeletedWorkspace]> {
        let path = "/api/2/workspaces/deleted"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "is_template": isTemplate?.encodeToJSON(),
            "production": production?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "home_for": homeFor?.encodeToJSON(),
            "volume__type": volumeType?.encodeToJSON(),
            "production__name": productionName?.encodeToJSON(),
            "production__active": productionActive?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_external": isExternal?.encodeToJSON(),
            "active": active?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[DeletedWorkspace]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter copyTemplateContent: (query)  (optional)
     - parameter includeTotalSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Production]>
     */
    open class func getAllProductions( active: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  copyTemplateContent: Bool? = nil,  includeTotalSize: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Production]> {
        let deferred = Promise<[Production]>.pending()
        getAllProductionsWithRequestBuilder(active: active, name: name, ordering: ordering, limit: limit, offset: offset, copyTemplateContent: copyTemplateContent, includeTotalSize: includeTotalSize).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/productions
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter copyTemplateContent: (query)  (optional)
     - parameter includeTotalSize: (query)  (optional)
     - returns: RequestBuilder<[Production]> 
     */
    open class func getAllProductionsWithRequestBuilder(active: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, copyTemplateContent: Bool? = nil, includeTotalSize: Bool? = nil) -> RequestBuilder<[Production]> {
        let path = "/api/2/productions"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "active": active?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "copy_template_content": copyTemplateContent?.encodeToJSON(),
            "include_total_size": includeTotalSize?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Production]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Share]>
     */
    open class func getAllShares( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Share]> {
        let deferred = Promise<[Share]>.pending()
        getAllSharesWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/shares
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Share]> 
     */
    open class func getAllSharesWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Share]> {
        let path = "/api/2/shares"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Share]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter workspace: (query) Filter the returned list by &#x60;workspace&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Snapshot]>
     */
    open class func getAllSnapshots( workspace: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Snapshot]> {
        let deferred = Promise<[Snapshot]>.pending()
        getAllSnapshotsWithRequestBuilder(workspace: workspace, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/snapshots
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter workspace: (query) Filter the returned list by &#x60;workspace&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Snapshot]> 
     */
    open class func getAllSnapshotsWithRequestBuilder(workspace: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Snapshot]> {
        let path = "/api/2/snapshots"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "workspace": workspace?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Snapshot]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter isDefault: (query) Filter the returned list by &#x60;is_default&#x60;. (optional)
     - parameter type: (query) Filter the returned list by &#x60;type&#x60;. (optional)
     - parameter useForHomes: (query) Filter the returned list by &#x60;use_for_homes&#x60;. (optional)
     - parameter useForWorkspaces: (query) Filter the returned list by &#x60;use_for_workspaces&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter displayName: (query) Filter the returned list by &#x60;display_name&#x60;. (optional)
     - parameter visualTag: (query) Filter the returned list by &#x60;visual_tag&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeStatus: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Volume]>
     */
    open class func getAllVolumes( isDefault: String? = nil,  type: String? = nil,  useForHomes: String? = nil,  useForWorkspaces: String? = nil,  name: String? = nil,  displayName: String? = nil,  visualTag: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  includeStatus: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Volume]> {
        let deferred = Promise<[Volume]>.pending()
        getAllVolumesWithRequestBuilder(isDefault: isDefault, type: type, useForHomes: useForHomes, useForWorkspaces: useForWorkspaces, name: name, displayName: displayName, visualTag: visualTag, ordering: ordering, limit: limit, offset: offset, includeStatus: includeStatus).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes
     - ### Required permissions    * User account permission: `None` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter isDefault: (query) Filter the returned list by &#x60;is_default&#x60;. (optional)
     - parameter type: (query) Filter the returned list by &#x60;type&#x60;. (optional)
     - parameter useForHomes: (query) Filter the returned list by &#x60;use_for_homes&#x60;. (optional)
     - parameter useForWorkspaces: (query) Filter the returned list by &#x60;use_for_workspaces&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter displayName: (query) Filter the returned list by &#x60;display_name&#x60;. (optional)
     - parameter visualTag: (query) Filter the returned list by &#x60;visual_tag&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeStatus: (query)  (optional)
     - returns: RequestBuilder<[Volume]> 
     */
    open class func getAllVolumesWithRequestBuilder(isDefault: String? = nil, type: String? = nil, useForHomes: String? = nil, useForWorkspaces: String? = nil, name: String? = nil, displayName: String? = nil, visualTag: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, includeStatus: Bool? = nil) -> RequestBuilder<[Volume]> {
        let path = "/api/2/volumes"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "is_default": isDefault?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "use_for_homes": useForHomes?.encodeToJSON(),
            "use_for_workspaces": useForWorkspaces?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "display_name": displayName?.encodeToJSON(),
            "visual_tag": visualTag?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "include_status": includeStatus?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Volume]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter workspace: (query) Filter the returned list by &#x60;workspace&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter group: (query) Filter the returned list by &#x60;group&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[WorkspacePermission]>
     */
    open class func getAllWorkspacePermissions( workspace: String? = nil,  user: String? = nil,  group: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[WorkspacePermission]> {
        let deferred = Promise<[WorkspacePermission]>.pending()
        getAllWorkspacePermissionsWithRequestBuilder(workspace: workspace, user: user, group: group, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspace-permissions
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter workspace: (query) Filter the returned list by &#x60;workspace&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter group: (query) Filter the returned list by &#x60;group&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[WorkspacePermission]> 
     */
    open class func getAllWorkspacePermissionsWithRequestBuilder(workspace: String? = nil, user: String? = nil, group: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[WorkspacePermission]> {
        let path = "/api/2/workspace-permissions"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "workspace": workspace?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "group": group?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[WorkspacePermission]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter resolveAccessFor: (query)  (optional)
     - parameter includeEndpoints: (query)  (optional)
     - parameter includeQuotas: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Workspace]>
     */
    open class func getAllWorkspaces( isTemplate: String? = nil,  production: String? = nil,  volume: String? = nil,  homeFor: String? = nil,  volumeType: String? = nil,  productionName: String? = nil,  productionActive: String? = nil,  name: String? = nil,  isExternal: String? = nil,  active: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  resolveAccessFor: Int? = nil,  includeEndpoints: Bool? = nil,  includeQuotas: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Workspace]> {
        let deferred = Promise<[Workspace]>.pending()
        getAllWorkspacesWithRequestBuilder(isTemplate: isTemplate, production: production, volume: volume, homeFor: homeFor, volumeType: volumeType, productionName: productionName, productionActive: productionActive, name: name, isExternal: isExternal, active: active, ordering: ordering, limit: limit, offset: offset, resolveAccessFor: resolveAccessFor, includeEndpoints: includeEndpoints, includeQuotas: includeQuotas).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspaces
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter resolveAccessFor: (query)  (optional)
     - parameter includeEndpoints: (query)  (optional)
     - parameter includeQuotas: (query)  (optional)
     - returns: RequestBuilder<[Workspace]> 
     */
    open class func getAllWorkspacesWithRequestBuilder(isTemplate: String? = nil, production: String? = nil, volume: String? = nil, homeFor: String? = nil, volumeType: String? = nil, productionName: String? = nil, productionActive: String? = nil, name: String? = nil, isExternal: String? = nil, active: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, resolveAccessFor: Int? = nil, includeEndpoints: Bool? = nil, includeQuotas: Bool? = nil) -> RequestBuilder<[Workspace]> {
        let path = "/api/2/workspaces"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "is_template": isTemplate?.encodeToJSON(),
            "production": production?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "home_for": homeFor?.encodeToJSON(),
            "volume__type": volumeType?.encodeToJSON(),
            "production__name": productionName?.encodeToJSON(),
            "production__active": productionActive?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_external": isExternal?.encodeToJSON(),
            "active": active?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "resolve_access_for": resolveAccessFor?.encodeToJSON(),
            "include_endpoints": includeEndpoints?.encodeToJSON(),
            "include_quotas": includeQuotas?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Workspace]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter path: (path)  
     - parameter maxDepth: (query)  (optional)
     - parameter bundle: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FilesystemFile>
     */
    open class func getFile( path: String,  maxDepth: Int? = nil,  bundle: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FilesystemFile> {
        let deferred = Promise<FilesystemFile>.pending()
        getFileWithRequestBuilder(path: path, maxDepth: maxDepth, bundle: bundle).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/files/{path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter path: (path)  
     - parameter maxDepth: (query)  (optional)
     - parameter bundle: (query)  (optional)
     - returns: RequestBuilder<FilesystemFile> 
     */
    open class func getFileWithRequestBuilder(path: String, maxDepth: Int? = nil, bundle: Bool? = nil) -> RequestBuilder<FilesystemFile> {
        var path = "/api/2/files/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_depth": maxDepth?.encodeToJSON(),
            "bundle": bundle?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FilesystemFile>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Quota>
     */
    open class func getGroupQuota( groupId: String,  id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Quota> {
        let deferred = Promise<Quota>.pending()
        getGroupQuotaWithRequestBuilder(groupId: groupId, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/quotas/group/{group_id}
     - ### Required permissions    * User account permission: `users:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter groupId: (path)  
     - parameter id: (path) A unique integer value identifying this volume. 
     - returns: RequestBuilder<Quota> 
     */
    open class func getGroupQuotaWithRequestBuilder(groupId: String, id: Int) -> RequestBuilder<Quota> {
        var path = "/api/2/volumes/{id}/quotas/group/{group_id}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Quota>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Workspace]>
     */
    open class func getMyWorkspaces( isTemplate: String? = nil,  production: String? = nil,  volume: String? = nil,  homeFor: String? = nil,  volumeType: String? = nil,  productionName: String? = nil,  productionActive: String? = nil,  name: String? = nil,  isExternal: String? = nil,  active: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Workspace]> {
        let deferred = Promise<[Workspace]>.pending()
        getMyWorkspacesWithRequestBuilder(isTemplate: isTemplate, production: production, volume: volume, homeFor: homeFor, volumeType: volumeType, productionName: productionName, productionActive: productionActive, name: name, isExternal: isExternal, active: active, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspaces/mine
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter isTemplate: (query) Filter the returned list by &#x60;is_template&#x60;. (optional)
     - parameter production: (query) Filter the returned list by &#x60;production&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter homeFor: (query) Filter the returned list by &#x60;home_for&#x60;. (optional)
     - parameter volumeType: (query) Filter the returned list by &#x60;volume__type&#x60;. (optional)
     - parameter productionName: (query) Filter the returned list by &#x60;production__name&#x60;. (optional)
     - parameter productionActive: (query) Filter the returned list by &#x60;production__active&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isExternal: (query) Filter the returned list by &#x60;is_external&#x60;. (optional)
     - parameter active: (query) Filter the returned list by &#x60;active&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Workspace]> 
     */
    open class func getMyWorkspacesWithRequestBuilder(isTemplate: String? = nil, production: String? = nil, volume: String? = nil, homeFor: String? = nil, volumeType: String? = nil, productionName: String? = nil, productionActive: String? = nil, name: String? = nil, isExternal: String? = nil, active: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Workspace]> {
        let path = "/api/2/workspaces/mine"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "is_template": isTemplate?.encodeToJSON(),
            "production": production?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "home_for": homeFor?.encodeToJSON(),
            "volume__type": volumeType?.encodeToJSON(),
            "production__name": productionName?.encodeToJSON(),
            "production__active": productionActive?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_external": isExternal?.encodeToJSON(),
            "active": active?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Workspace]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Quota>
     */
    open class func getPathQuota( id: Int,  relativePath: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Quota> {
        let deferred = Promise<Quota>.pending()
        getPathQuotaWithRequestBuilder(id: id, relativePath: relativePath).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/quotas/path/{relative_path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - returns: RequestBuilder<Quota> 
     */
    open class func getPathQuotaWithRequestBuilder(id: Int, relativePath: String) -> RequestBuilder<Quota> {
        var path = "/api/2/volumes/{id}/quotas/path/{relative_path}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let relativePathPreEscape = "\(APIHelper.mapValueToPathItem(relativePath))"
        let relativePathPostEscape = relativePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relative_path}", with: relativePathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Quota>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this production. 
     - parameter copyTemplateContent: (query)  (optional)
     - parameter includeTotalSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Production>
     */
    open class func getProduction( id: Int,  copyTemplateContent: Bool? = nil,  includeTotalSize: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Production> {
        let deferred = Promise<Production>.pending()
        getProductionWithRequestBuilder(id: id, copyTemplateContent: copyTemplateContent, includeTotalSize: includeTotalSize).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/productions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this production. 
     - parameter copyTemplateContent: (query)  (optional)
     - parameter includeTotalSize: (query)  (optional)
     - returns: RequestBuilder<Production> 
     */
    open class func getProductionWithRequestBuilder(id: Int, copyTemplateContent: Bool? = nil, includeTotalSize: Bool? = nil) -> RequestBuilder<Production> {
        var path = "/api/2/productions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "copy_template_content": copyTemplateContent?.encodeToJSON(),
            "include_total_size": includeTotalSize?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Production>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getRootDirectory( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getRootDirectoryWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/files
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getRootDirectoryWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        let path = "/api/2/files"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getSambaDfreeString(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getSambaDfreeStringWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/dfree
     - ### Required permissions    * localhost only 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func getSambaDfreeStringWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/2/private/dfree"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this share. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Share>
     */
    open class func getShare( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Share> {
        let deferred = Promise<Share>.pending()
        getShareWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/shares/{id}
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this share. 
     - returns: RequestBuilder<Share> 
     */
    open class func getShareWithRequestBuilder(id: Int) -> RequestBuilder<Share> {
        var path = "/api/2/shares/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Share>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Snapshot>
     */
    open class func getSnapshot( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Snapshot> {
        let deferred = Promise<Snapshot>.pending()
        getSnapshotWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/snapshots/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this snapshot. 
     - returns: RequestBuilder<Snapshot> 
     */
    open class func getSnapshotWithRequestBuilder(id: Int) -> RequestBuilder<Snapshot> {
        var path = "/api/2/snapshots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Snapshot>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Quota>
     */
    open class func getUserQuota( id: Int,  userId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Quota> {
        let deferred = Promise<Quota>.pending()
        getUserQuotaWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/quotas/user/{user_id}
     - ### Required permissions    * User account permission: `users:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter userId: (path)  
     - returns: RequestBuilder<Quota> 
     */
    open class func getUserQuotaWithRequestBuilder(id: Int, userId: String) -> RequestBuilder<Quota> {
        var path = "/api/2/volumes/{id}/quotas/user/{user_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Quota>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter includeStatus: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Volume>
     */
    open class func getVolume( id: Int,  includeStatus: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Volume> {
        let deferred = Promise<Volume>.pending()
        getVolumeWithRequestBuilder(id: id, includeStatus: includeStatus).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter includeStatus: (query)  (optional)
     - returns: RequestBuilder<Volume> 
     */
    open class func getVolumeWithRequestBuilder(id: Int, includeStatus: Bool? = nil) -> RequestBuilder<Volume> {
        var path = "/api/2/volumes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_status": includeStatus?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Volume>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<StorNextConnections>
     */
    open class func getVolumeActiveConnections( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<StorNextConnections> {
        let deferred = Promise<StorNextConnections>.pending()
        getVolumeActiveConnectionsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/connections
     - ### Required permissions    * User account permission: `system:status:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - returns: RequestBuilder<StorNextConnections> 
     */
    open class func getVolumeActiveConnectionsWithRequestBuilder(id: Int) -> RequestBuilder<StorNextConnections> {
        var path = "/api/2/volumes/{id}/connections"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<StorNextConnections>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FileSizeDistribution>
     */
    open class func getVolumeFileSizeDistribution( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FileSizeDistribution> {
        let deferred = Promise<FileSizeDistribution>.pending()
        getVolumeFileSizeDistributionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/file-size-distribution
     - ### Required permissions    * User account permission: `system:status:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - returns: RequestBuilder<FileSizeDistribution> 
     */
    open class func getVolumeFileSizeDistributionWithRequestBuilder(id: Int) -> RequestBuilder<FileSizeDistribution> {
        var path = "/api/2/volumes/{id}/file-size-distribution"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FileSizeDistribution>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VolumeStats>
     */
    open class func getVolumeStats( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<VolumeStats> {
        let deferred = Promise<VolumeStats>.pending()
        getVolumeStatsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/volumes/{id}/stats
     - ### Required permissions    * User account permission: `system:status:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - returns: RequestBuilder<VolumeStats> 
     */
    open class func getVolumeStatsWithRequestBuilder(id: Int) -> RequestBuilder<VolumeStats> {
        var path = "/api/2/volumes/{id}/stats"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VolumeStats>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Workspace>
     */
    open class func getWorkspace( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Workspace> {
        let deferred = Promise<Workspace>.pending()
        getWorkspaceWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspaces/{id}
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Workspace> 
     */
    open class func getWorkspaceWithRequestBuilder(id: Int) -> RequestBuilder<Workspace> {
        var path = "/api/2/workspaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Workspace>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WorkspacePermission>
     */
    open class func getWorkspacePermission( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<WorkspacePermission> {
        let deferred = Promise<WorkspacePermission>.pending()
        getWorkspacePermissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/workspace-permissions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - returns: RequestBuilder<WorkspacePermission> 
     */
    open class func getWorkspacePermissionWithRequestBuilder(id: Int) -> RequestBuilder<WorkspacePermission> {
        var path = "/api/2/workspace-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WorkspacePermission>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter fileMoveEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func moveFiles( fileMoveEndpointRequest: FileMoveEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        moveFilesWithRequestBuilder(fileMoveEndpointRequest: fileMoveEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/move
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter fileMoveEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func moveFilesWithRequestBuilder(fileMoveEndpointRequest: FileMoveEndpointRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/filesystem/move"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileMoveEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter moveWorkspaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func moveWorkspace( id: Int,  moveWorkspaceRequest: MoveWorkspaceRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        moveWorkspaceWithRequestBuilder(id: id, moveWorkspaceRequest: moveWorkspaceRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/move
     - ### Required permissions    * User account permission: `projects:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter moveWorkspaceRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func moveWorkspaceWithRequestBuilder(id: Int, moveWorkspaceRequest: MoveWorkspaceRequest) -> RequestBuilder<TaskInfo> {
        var path = "/api/2/workspaces/{id}/move"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moveWorkspaceRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspaceMoveToRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func moveWorkspaceToProduction( id: Int,  workspaceMoveToRequest: WorkspaceMoveToRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        moveWorkspaceToProductionWithRequestBuilder(id: id, workspaceMoveToRequest: workspaceMoveToRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/move-to
     - ### Required permissions    * User account permission: `projects:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspaceMoveToRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func moveWorkspaceToProductionWithRequestBuilder(id: Int, workspaceMoveToRequest: WorkspaceMoveToRequest) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/move-to"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspaceMoveToRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter path: (path)  
     - parameter filePartialUpdate: (body)  
     - parameter maxDepth: (query)  (optional)
     - parameter bundle: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FilesystemFile>
     */
    open class func patchFile( path: String,  filePartialUpdate: FilePartialUpdate,  maxDepth: Int? = nil,  bundle: Bool? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FilesystemFile> {
        let deferred = Promise<FilesystemFile>.pending()
        patchFileWithRequestBuilder(path: path, filePartialUpdate: filePartialUpdate, maxDepth: maxDepth, bundle: bundle).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/files/{path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter path: (path)  
     - parameter filePartialUpdate: (body)  
     - parameter maxDepth: (query)  (optional)
     - parameter bundle: (query)  (optional)
     - returns: RequestBuilder<FilesystemFile> 
     */
    open class func patchFileWithRequestBuilder(path: String, filePartialUpdate: FilePartialUpdate, maxDepth: Int? = nil, bundle: Bool? = nil) -> RequestBuilder<FilesystemFile> {
        var path = "/api/2/files/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filePartialUpdate)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_depth": maxDepth?.encodeToJSON(),
            "bundle": bundle?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FilesystemFile>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this production. 
     - parameter productionPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Production>
     */
    open class func patchProduction( id: Int,  productionPartialUpdate: ProductionPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Production> {
        let deferred = Promise<Production>.pending()
        patchProductionWithRequestBuilder(id: id, productionPartialUpdate: productionPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/productions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this production. 
     - parameter productionPartialUpdate: (body)  
     - returns: RequestBuilder<Production> 
     */
    open class func patchProductionWithRequestBuilder(id: Int, productionPartialUpdate: ProductionPartialUpdate) -> RequestBuilder<Production> {
        var path = "/api/2/productions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productionPartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Production>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this share. 
     - parameter sharePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Share>
     */
    open class func patchShare( id: Int,  sharePartialUpdate: SharePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Share> {
        let deferred = Promise<Share>.pending()
        patchShareWithRequestBuilder(id: id, sharePartialUpdate: sharePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/shares/{id}
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this share. 
     - parameter sharePartialUpdate: (body)  
     - returns: RequestBuilder<Share> 
     */
    open class func patchShareWithRequestBuilder(id: Int, sharePartialUpdate: SharePartialUpdate) -> RequestBuilder<Share> {
        var path = "/api/2/shares/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharePartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Share>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter snapshotPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Snapshot>
     */
    open class func patchSnapshot( id: Int,  snapshotPartialUpdate: SnapshotPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Snapshot> {
        let deferred = Promise<Snapshot>.pending()
        patchSnapshotWithRequestBuilder(id: id, snapshotPartialUpdate: snapshotPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/snapshots/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter snapshotPartialUpdate: (body)  
     - returns: RequestBuilder<Snapshot> 
     */
    open class func patchSnapshotWithRequestBuilder(id: Int, snapshotPartialUpdate: SnapshotPartialUpdate) -> RequestBuilder<Snapshot> {
        var path = "/api/2/snapshots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: snapshotPartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Snapshot>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter volumePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Volume>
     */
    open class func patchVolume( id: Int,  volumePartialUpdate: VolumePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Volume> {
        let deferred = Promise<Volume>.pending()
        patchVolumeWithRequestBuilder(id: id, volumePartialUpdate: volumePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/volumes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter volumePartialUpdate: (body)  
     - returns: RequestBuilder<Volume> 
     */
    open class func patchVolumeWithRequestBuilder(id: Int, volumePartialUpdate: VolumePartialUpdate) -> RequestBuilder<Volume> {
        var path = "/api/2/volumes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: volumePartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Volume>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspacePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Workspace>
     */
    open class func patchWorkspace( id: Int,  workspacePartialUpdate: WorkspacePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Workspace> {
        let deferred = Promise<Workspace>.pending()
        patchWorkspaceWithRequestBuilder(id: id, workspacePartialUpdate: workspacePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/workspaces/{id}
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspacePartialUpdate: (body)  
     - returns: RequestBuilder<Workspace> 
     */
    open class func patchWorkspaceWithRequestBuilder(id: Int, workspacePartialUpdate: WorkspacePartialUpdate) -> RequestBuilder<Workspace> {
        var path = "/api/2/workspaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspacePartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Workspace>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter workspacePermissionPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WorkspacePermission>
     */
    open class func patchWorkspacePermission( id: Int,  workspacePermissionPartialUpdate: WorkspacePermissionPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<WorkspacePermission> {
        let deferred = Promise<WorkspacePermission>.pending()
        patchWorkspacePermissionWithRequestBuilder(id: id, workspacePermissionPartialUpdate: workspacePermissionPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/workspace-permissions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter workspacePermissionPartialUpdate: (body)  
     - returns: RequestBuilder<WorkspacePermission> 
     */
    open class func patchWorkspacePermissionWithRequestBuilder(id: Int, workspacePermissionPartialUpdate: WorkspacePermissionPartialUpdate) -> RequestBuilder<WorkspacePermission> {
        var path = "/api/2/workspace-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspacePermissionPartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WorkspacePermission>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter filesystemTraceEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<FilesystemTraceEndpointResponse>
     */
    open class func recordStorageTrace( filesystemTraceEndpointRequest: FilesystemTraceEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<FilesystemTraceEndpointResponse> {
        let deferred = Promise<FilesystemTraceEndpointResponse>.pending()
        recordStorageTraceWithRequestBuilder(filesystemTraceEndpointRequest: filesystemTraceEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/trace
     - ### Required permissions    * User account permission: `system:admin-access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter filesystemTraceEndpointRequest: (body)  
     - returns: RequestBuilder<FilesystemTraceEndpointResponse> 
     */
    open class func recordStorageTraceWithRequestBuilder(filesystemTraceEndpointRequest: FilesystemTraceEndpointRequest) -> RequestBuilder<FilesystemTraceEndpointResponse> {
        let path = "/api/2/filesystem/trace"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filesystemTraceEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FilesystemTraceEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func repairWorkspacePermissions( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        repairWorkspacePermissionsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/workspaces/{id}/repair-permissions
     - ### Required permissions    * User account permission: `projects:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func repairWorkspacePermissionsWithRequestBuilder(id: Int) -> RequestBuilder<TaskInfo> {
        var path = "/api/2/workspaces/{id}/repair-permissions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter shareToHomeWorkspaceEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func shareToHomeWorkspace( shareToHomeWorkspaceEndpointRequest: ShareToHomeWorkspaceEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        shareToHomeWorkspaceWithRequestBuilder(shareToHomeWorkspaceEndpointRequest: shareToHomeWorkspaceEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/share-to-home-workspace
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter shareToHomeWorkspaceEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func shareToHomeWorkspaceWithRequestBuilder(shareToHomeWorkspaceEndpointRequest: ShareToHomeWorkspaceEndpointRequest) -> RequestBuilder<Void> {
        let path = "/api/2/share-to-home-workspace"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shareToHomeWorkspaceEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func unbookmarkWorkspace( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        unbookmarkWorkspaceWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/workspaces/{id}/bookmark
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - returns: RequestBuilder<Void> 
     */
    open class func unbookmarkWorkspaceWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/workspaces/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter fileUnzipEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func unzipFile( fileUnzipEndpointRequest: FileUnzipEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        unzipFileWithRequestBuilder(fileUnzipEndpointRequest: fileUnzipEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/unzip
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter fileUnzipEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func unzipFileWithRequestBuilder(fileUnzipEndpointRequest: FileUnzipEndpointRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/filesystem/unzip"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileUnzipEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter updateQuotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateGroupQuota( groupId: String,  id: Int,  updateQuotaRequest: UpdateQuotaRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateGroupQuotaWithRequestBuilder(groupId: groupId, id: id, updateQuotaRequest: updateQuotaRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/volumes/{id}/quotas/group/{group_id}
     - ### Required permissions    * User account permission: `users:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter groupId: (path)  
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter updateQuotaRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateGroupQuotaWithRequestBuilder(groupId: String, id: Int, updateQuotaRequest: UpdateQuotaRequest) -> RequestBuilder<Void> {
        var path = "/api/2/volumes/{id}/quotas/group/{group_id}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateQuotaRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter updateQuotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updatePathQuota( id: Int,  relativePath: String,  updateQuotaRequest: UpdateQuotaRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updatePathQuotaWithRequestBuilder(id: id, relativePath: relativePath, updateQuotaRequest: updateQuotaRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/volumes/{id}/quotas/path/{relative_path}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter relativePath: (path)  
     - parameter updateQuotaRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updatePathQuotaWithRequestBuilder(id: Int, relativePath: String, updateQuotaRequest: UpdateQuotaRequest) -> RequestBuilder<Void> {
        var path = "/api/2/volumes/{id}/quotas/path/{relative_path}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let relativePathPreEscape = "\(APIHelper.mapValueToPathItem(relativePath))"
        let relativePathPostEscape = relativePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relative_path}", with: relativePathPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateQuotaRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this production. 
     - parameter production: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Production>
     */
    open class func updateProduction( id: Int,  production: Production, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Production> {
        let deferred = Promise<Production>.pending()
        updateProductionWithRequestBuilder(id: id, production: production).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/productions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this production. 
     - parameter production: (body)  
     - returns: RequestBuilder<Production> 
     */
    open class func updateProductionWithRequestBuilder(id: Int, production: Production) -> RequestBuilder<Production> {
        var path = "/api/2/productions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: production)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Production>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this share. 
     - parameter share: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Share>
     */
    open class func updateShare( id: Int,  share: Share, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Share> {
        let deferred = Promise<Share>.pending()
        updateShareWithRequestBuilder(id: id, share: share).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/shares/{id}
     - ### Required permissions    * User account permission: `shares:view` (read) / `shares:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this share. 
     - parameter share: (body)  
     - returns: RequestBuilder<Share> 
     */
    open class func updateShareWithRequestBuilder(id: Int, share: Share) -> RequestBuilder<Share> {
        var path = "/api/2/shares/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: share)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Share>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter snapshot: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Snapshot>
     */
    open class func updateSnapshot( id: Int,  snapshot: Snapshot, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Snapshot> {
        let deferred = Promise<Snapshot>.pending()
        updateSnapshotWithRequestBuilder(id: id, snapshot: snapshot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/snapshots/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this snapshot. 
     - parameter snapshot: (body)  
     - returns: RequestBuilder<Snapshot> 
     */
    open class func updateSnapshotWithRequestBuilder(id: Int, snapshot: Snapshot) -> RequestBuilder<Snapshot> {
        var path = "/api/2/snapshots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: snapshot)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Snapshot>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter userId: (path)  
     - parameter updateQuotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func updateUserQuota( id: Int,  userId: String,  updateQuotaRequest: UpdateQuotaRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        updateUserQuotaWithRequestBuilder(id: id, userId: userId, updateQuotaRequest: updateQuotaRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/volumes/{id}/quotas/user/{user_id}
     - ### Required permissions    * User account permission: `users:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter userId: (path)  
     - parameter updateQuotaRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateUserQuotaWithRequestBuilder(id: Int, userId: String, updateQuotaRequest: UpdateQuotaRequest) -> RequestBuilder<Void> {
        var path = "/api/2/volumes/{id}/quotas/user/{user_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateQuotaRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter volume: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Volume>
     */
    open class func updateVolume( id: Int,  volume: Volume, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Volume> {
        let deferred = Promise<Volume>.pending()
        updateVolumeWithRequestBuilder(id: id, volume: volume).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/volumes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this volume. 
     - parameter volume: (body)  
     - returns: RequestBuilder<Volume> 
     */
    open class func updateVolumeWithRequestBuilder(id: Int, volume: Volume) -> RequestBuilder<Volume> {
        var path = "/api/2/volumes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: volume)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Volume>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspace: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Workspace>
     */
    open class func updateWorkspace( id: Int,  workspace: Workspace, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Workspace> {
        let deferred = Promise<Workspace>.pending()
        updateWorkspaceWithRequestBuilder(id: id, workspace: workspace).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/workspaces/{id}
     - ### Required permissions    * User account permission: `None` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace. 
     - parameter workspace: (body)  
     - returns: RequestBuilder<Workspace> 
     */
    open class func updateWorkspaceWithRequestBuilder(id: Int, workspace: Workspace) -> RequestBuilder<Workspace> {
        var path = "/api/2/workspaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspace)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Workspace>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter workspacePermission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WorkspacePermission>
     */
    open class func updateWorkspacePermission( id: Int,  workspacePermission: WorkspacePermission, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<WorkspacePermission> {
        let deferred = Promise<WorkspacePermission>.pending()
        updateWorkspacePermissionWithRequestBuilder(id: id, workspacePermission: workspacePermission).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/workspace-permissions/{id}
     - ### Required permissions    * User account permission: `projects:view` (read) / `projects:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this workspace permission. 
     - parameter workspacePermission: (body)  
     - returns: RequestBuilder<WorkspacePermission> 
     */
    open class func updateWorkspacePermissionWithRequestBuilder(id: Int, workspacePermission: WorkspacePermission) -> RequestBuilder<WorkspacePermission> {
        var path = "/api/2/workspace-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workspacePermission)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WorkspacePermission>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter fileZipEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func zipFiles( fileZipEndpointRequest: FileZipEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        zipFilesWithRequestBuilder(fileZipEndpointRequest: fileZipEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/filesystem/zip
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter fileZipEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func zipFilesWithRequestBuilder(fileZipEndpointRequest: FileZipEndpointRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/filesystem/zip"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fileZipEndpointRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
