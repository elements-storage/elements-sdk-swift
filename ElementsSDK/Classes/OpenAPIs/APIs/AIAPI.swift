//
// AIAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AIAPI {

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func abortAIDatasetModelCreation( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        abortAIDatasetModelCreationWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models/{id}/abort
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - returns: RequestBuilder<Void> 
     */
    open class func abortAIDatasetModelCreationWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/models/{id}/abort"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func activateAIModel( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        activateAIModelWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models/{id}/activate
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - returns: RequestBuilder<Void> 
     */
    open class func activateAIModelWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/models/{id}/activate"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aIAnnotationCreateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIAnnotation]>
     */
    open class func createAIAnnotationTrack( aIAnnotationCreateRequest: AIAnnotationCreateRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIAnnotation]> {
        let deferred = Promise<[AIAnnotation]>.pending()
        createAIAnnotationTrackWithRequestBuilder(aIAnnotationCreateRequest: aIAnnotationCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/annotations/tracks/create
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aIAnnotationCreateRequest: (body)  
     - returns: RequestBuilder<[AIAnnotation]> 
     */
    open class func createAIAnnotationTrackWithRequestBuilder(aIAnnotationCreateRequest: AIAnnotationCreateRequest) -> RequestBuilder<[AIAnnotation]> {
        let localVariablePath = "/api/2/ai/annotations/tracks/create"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIAnnotationCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIAnnotation]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aICategoryDetailUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AICategoryDetail>
     */
    open class func createAICategory( aICategoryDetailUpdate: AICategoryDetailUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AICategoryDetail> {
        let deferred = Promise<AICategoryDetail>.pending()
        createAICategoryWithRequestBuilder(aICategoryDetailUpdate: aICategoryDetailUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/categories
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aICategoryDetailUpdate: (body)  
     - returns: RequestBuilder<AICategoryDetail> 
     */
    open class func createAICategoryWithRequestBuilder(aICategoryDetailUpdate: AICategoryDetailUpdate) -> RequestBuilder<AICategoryDetail> {
        let localVariablePath = "/api/2/ai/categories"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aICategoryDetailUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICategoryDetail>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aIDatasetWithPreviewUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIDatasetWithPreview>
     */
    open class func createAIDataset( aIDatasetWithPreviewUpdate: AIDatasetWithPreviewUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIDatasetWithPreview> {
        let deferred = Promise<AIDatasetWithPreview>.pending()
        createAIDatasetWithRequestBuilder(aIDatasetWithPreviewUpdate: aIDatasetWithPreviewUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/datasets
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aIDatasetWithPreviewUpdate: (body)  
     - returns: RequestBuilder<AIDatasetWithPreview> 
     */
    open class func createAIDatasetWithRequestBuilder(aIDatasetWithPreviewUpdate: AIDatasetWithPreviewUpdate) -> RequestBuilder<AIDatasetWithPreview> {
        let localVariablePath = "/api/2/ai/datasets"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIDatasetWithPreviewUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIDatasetWithPreview>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aIModelTrainingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModel>
     */
    open class func createAIDatasetModel( aIModelTrainingRequest: AIModelTrainingRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModel> {
        let deferred = Promise<AIModel>.pending()
        createAIDatasetModelWithRequestBuilder(aIModelTrainingRequest: aIModelTrainingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models/create
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aIModelTrainingRequest: (body)  
     - returns: RequestBuilder<AIModel> 
     */
    open class func createAIDatasetModelWithRequestBuilder(aIModelTrainingRequest: AIModelTrainingRequest) -> RequestBuilder<AIModel> {
        let localVariablePath = "/api/2/ai/models/create"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelTrainingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModel>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aIProcessingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func createAIMetadata( aIProcessingRequest: AIProcessingRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        createAIMetadataWithRequestBuilder(aIProcessingRequest: aIProcessingRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/metadata/create
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aIProcessingRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func createAIMetadataWithRequestBuilder(aIProcessingRequest: AIProcessingRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/ai/metadata/create"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIProcessingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter aIModelUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModel>
     */
    open class func createAIModel( aIModelUpdate: AIModelUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModel> {
        let deferred = Promise<AIModel>.pending()
        createAIModelWithRequestBuilder(aIModelUpdate: aIModelUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter aIModelUpdate: (body)  
     - returns: RequestBuilder<AIModel> 
     */
    open class func createAIModelWithRequestBuilder(aIModelUpdate: AIModelUpdate) -> RequestBuilder<AIModel> {
        let localVariablePath = "/api/2/ai/models"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModel>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAIAnnotation( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAIAnnotationWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/ai/annotations/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAIAnnotationWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/annotations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAIAnnotationTrack( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAIAnnotationTrackWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/ai/annotations/tracks/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAIAnnotationTrackWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/annotations/tracks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAICategory( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAICategoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/ai/categories/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Category. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAICategoryWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/categories/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAIDataset( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAIDatasetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/ai/datasets/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAIDatasetWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/datasets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAIModel( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAIModelWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/ai/models/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAIModelWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/models/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetExportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIDatasetExportResponse>
     */
    open class func exportAIDataset( id: UUID,  aIDatasetExportRequest: AIDatasetExportRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIDatasetExportResponse> {
        let deferred = Promise<AIDatasetExportResponse>.pending()
        exportAIDatasetWithRequestBuilder(id: id, aIDatasetExportRequest: aIDatasetExportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/datasets/{id}/export
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetExportRequest: (body)  
     - returns: RequestBuilder<AIDatasetExportResponse> 
     */
    open class func exportAIDatasetWithRequestBuilder(id: UUID, aIDatasetExportRequest: AIDatasetExportRequest) -> RequestBuilder<AIDatasetExportResponse> {
        var localVariablePath = "/api/2/ai/datasets/{id}/export"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIDatasetExportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIDatasetExportResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelExportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModelExportResponse>
     */
    open class func exportAIModel( id: UUID,  aIModelExportRequest: AIModelExportRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModelExportResponse> {
        let deferred = Promise<AIModelExportResponse>.pending()
        exportAIModelWithRequestBuilder(id: id, aIModelExportRequest: aIModelExportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models/{id}/export
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelExportRequest: (body)  
     - returns: RequestBuilder<AIModelExportResponse> 
     */
    open class func exportAIModelWithRequestBuilder(id: UUID, aIModelExportRequest: AIModelExportRequest) -> RequestBuilder<AIModelExportResponse> {
        var localVariablePath = "/api/2/ai/models/{id}/export"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelExportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModelExportResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter includeTransformsForAsset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIAnnotation>
     */
    open class func getAIAnnotation( id: UUID,  includeTransformsForAsset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIAnnotation> {
        let deferred = Promise<AIAnnotation>.pending()
        getAIAnnotationWithRequestBuilder(id: id, includeTransformsForAsset: includeTransformsForAsset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/annotations/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter includeTransformsForAsset: (query)  (optional)
     - returns: RequestBuilder<AIAnnotation> 
     */
    open class func getAIAnnotationWithRequestBuilder(id: UUID, includeTransformsForAsset: Int? = nil) -> RequestBuilder<AIAnnotation> {
        var localVariablePath = "/api/2/ai/annotations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_transforms_for_asset": includeTransformsForAsset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIAnnotation>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getAIAnnotationImage( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getAIAnnotationImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/annotations/{id}/image
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - returns: RequestBuilder<Void> 
     */
    open class func getAIAnnotationImageWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/annotations/{id}/image"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AICategoryDetail>
     */
    open class func getAICategory( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AICategoryDetail> {
        let deferred = Promise<AICategoryDetail>.pending()
        getAICategoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/categories/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Category. 
     - returns: RequestBuilder<AICategoryDetail> 
     */
    open class func getAICategoryWithRequestBuilder(id: UUID) -> RequestBuilder<AICategoryDetail> {
        var localVariablePath = "/api/2/ai/categories/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICategoryDetail>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this AI Connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIConnection>
     */
    open class func getAIConnection( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIConnection> {
        let deferred = Promise<AIConnection>.pending()
        getAIConnectionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/connections/{id}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this AI Connection. 
     - returns: RequestBuilder<AIConnection> 
     */
    open class func getAIConnectionWithRequestBuilder(id: Int) -> RequestBuilder<AIConnection> {
        var localVariablePath = "/api/2/ai/connections/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIConnection>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIDatasetWithPreview>
     */
    open class func getAIDataset( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIDatasetWithPreview> {
        let deferred = Promise<AIDatasetWithPreview>.pending()
        getAIDatasetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/datasets/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - returns: RequestBuilder<AIDatasetWithPreview> 
     */
    open class func getAIDatasetWithRequestBuilder(id: UUID) -> RequestBuilder<AIDatasetWithPreview> {
        var localVariablePath = "/api/2/ai/datasets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIDatasetWithPreview>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Image. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIImage>
     */
    open class func getAIImage( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIImage> {
        let deferred = Promise<AIImage>.pending()
        getAIImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/images/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Image. 
     - returns: RequestBuilder<AIImage> 
     */
    open class func getAIImageWithRequestBuilder(id: UUID) -> RequestBuilder<AIImage> {
        var localVariablePath = "/api/2/ai/images/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIImage>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Image. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getAIImageContent( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getAIImageContentWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/images/{id}/content
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Image. 
     - returns: RequestBuilder<Void> 
     */
    open class func getAIImageContentWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/ai/images/{id}/content"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this AI Metadata. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIMetadata>
     */
    open class func getAIMetadata( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIMetadata> {
        let deferred = Promise<AIMetadata>.pending()
        getAIMetadataWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/metadata/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this AI Metadata. 
     - returns: RequestBuilder<AIMetadata> 
     */
    open class func getAIMetadataWithRequestBuilder(id: Int) -> RequestBuilder<AIMetadata> {
        var localVariablePath = "/api/2/ai/metadata/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIMetadata>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModel>
     */
    open class func getAIModel( id: UUID, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModel> {
        let deferred = Promise<AIModel>.pending()
        getAIModelWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/models/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - returns: RequestBuilder<AIModel> 
     */
    open class func getAIModelWithRequestBuilder(id: UUID) -> RequestBuilder<AIModel> {
        var localVariablePath = "/api/2/ai/models/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModel>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter category: (query) Filter the returned list by &#x60;category&#x60;. (optional)
     - parameter imageDataset: (query) Filter the returned list by &#x60;image__dataset&#x60;. (optional)
     - parameter track: (query) Filter the returned list by &#x60;track&#x60;. (optional)
     - parameter image: (query) Filter the returned list by &#x60;image&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIAnnotation]>
     */
    open class func getAllAIAnnotationTracks( category: String? = nil,  imageDataset: String? = nil,  track: String? = nil,  image: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIAnnotation]> {
        let deferred = Promise<[AIAnnotation]>.pending()
        getAllAIAnnotationTracksWithRequestBuilder(category: category, imageDataset: imageDataset, track: track, image: image, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/annotations/tracks
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter category: (query) Filter the returned list by &#x60;category&#x60;. (optional)
     - parameter imageDataset: (query) Filter the returned list by &#x60;image__dataset&#x60;. (optional)
     - parameter track: (query) Filter the returned list by &#x60;track&#x60;. (optional)
     - parameter image: (query) Filter the returned list by &#x60;image&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIAnnotation]> 
     */
    open class func getAllAIAnnotationTracksWithRequestBuilder(category: String? = nil, imageDataset: String? = nil, track: String? = nil, image: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIAnnotation]> {
        let localVariablePath = "/api/2/ai/annotations/tracks"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category": category?.encodeToJSON(),
            "image__dataset": imageDataset?.encodeToJSON(),
            "track": track?.encodeToJSON(),
            "image": image?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIAnnotation]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter category: (query) Filter the returned list by &#x60;category&#x60;. (optional)
     - parameter imageDataset: (query) Filter the returned list by &#x60;image__dataset&#x60;. (optional)
     - parameter imageAsset: (query) Filter the returned list by &#x60;image__asset&#x60;. (optional)
     - parameter track: (query) Filter the returned list by &#x60;track&#x60;. (optional)
     - parameter image: (query) Filter the returned list by &#x60;image&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeTransformsForAsset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIAnnotation]>
     */
    open class func getAllAIAnnotations( category: String? = nil,  imageDataset: String? = nil,  imageAsset: Double? = nil,  track: String? = nil,  image: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  includeTransformsForAsset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIAnnotation]> {
        let deferred = Promise<[AIAnnotation]>.pending()
        getAllAIAnnotationsWithRequestBuilder(category: category, imageDataset: imageDataset, imageAsset: imageAsset, track: track, image: image, ordering: ordering, limit: limit, offset: offset, includeTransformsForAsset: includeTransformsForAsset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/annotations
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter category: (query) Filter the returned list by &#x60;category&#x60;. (optional)
     - parameter imageDataset: (query) Filter the returned list by &#x60;image__dataset&#x60;. (optional)
     - parameter imageAsset: (query) Filter the returned list by &#x60;image__asset&#x60;. (optional)
     - parameter track: (query) Filter the returned list by &#x60;track&#x60;. (optional)
     - parameter image: (query) Filter the returned list by &#x60;image&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeTransformsForAsset: (query)  (optional)
     - returns: RequestBuilder<[AIAnnotation]> 
     */
    open class func getAllAIAnnotationsWithRequestBuilder(category: String? = nil, imageDataset: String? = nil, imageAsset: Double? = nil, track: String? = nil, image: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, includeTransformsForAsset: Int? = nil) -> RequestBuilder<[AIAnnotation]> {
        let localVariablePath = "/api/2/ai/annotations"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "category": category?.encodeToJSON(),
            "image__dataset": imageDataset?.encodeToJSON(),
            "image__asset": imageAsset?.encodeToJSON(),
            "track": track?.encodeToJSON(),
            "image": image?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "include_transforms_for_asset": includeTransformsForAsset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIAnnotation]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AICategory]>
     */
    open class func getAllAICategories( dataset: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AICategory]> {
        let deferred = Promise<[AICategory]>.pending()
        getAllAICategoriesWithRequestBuilder(dataset: dataset, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/categories
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AICategory]> 
     */
    open class func getAllAICategoriesWithRequestBuilder(dataset: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AICategory]> {
        let localVariablePath = "/api/2/ai/categories"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dataset": dataset?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AICategory]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIConnection]>
     */
    open class func getAllAIConnections( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIConnection]> {
        let deferred = Promise<[AIConnection]>.pending()
        getAllAIConnectionsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/connections
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIConnection]> 
     */
    open class func getAllAIConnectionsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIConnection]> {
        let localVariablePath = "/api/2/ai/connections"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIConnection]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connection: (query) Filter the returned list by &#x60;connection&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIDatasetWithPreview]>
     */
    open class func getAllAIDatasets( connection: Double? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIDatasetWithPreview]> {
        let deferred = Promise<[AIDatasetWithPreview]>.pending()
        getAllAIDatasetsWithRequestBuilder(connection: connection, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/datasets
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connection: (query) Filter the returned list by &#x60;connection&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIDatasetWithPreview]> 
     */
    open class func getAllAIDatasetsWithRequestBuilder(connection: Double? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIDatasetWithPreview]> {
        let localVariablePath = "/api/2/ai/datasets"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "connection": connection?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIDatasetWithPreview]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIImage]>
     */
    open class func getAllAIImages( dataset: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIImage]> {
        let deferred = Promise<[AIImage]>.pending()
        getAllAIImagesWithRequestBuilder(dataset: dataset, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/images
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIImage]> 
     */
    open class func getAllAIImagesWithRequestBuilder(dataset: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIImage]> {
        let localVariablePath = "/api/2/ai/images"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dataset": dataset?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIImage]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIMetadata]>
     */
    open class func getAllAIMetadata( asset: Double? = nil,  id: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIMetadata]> {
        let deferred = Promise<[AIMetadata]>.pending()
        getAllAIMetadataWithRequestBuilder(asset: asset, id: id, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/metadata
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIMetadata]> 
     */
    open class func getAllAIMetadataWithRequestBuilder(asset: Double? = nil, id: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIMetadata]> {
        let localVariablePath = "/api/2/ai/metadata"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIMetadata]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AIModel]>
     */
    open class func getAllAIModels( dataset: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[AIModel]> {
        let deferred = Promise<[AIModel]>.pending()
        getAllAIModelsWithRequestBuilder(dataset: dataset, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/ai/models
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter dataset: (query) Filter the returned list by &#x60;dataset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AIModel]> 
     */
    open class func getAllAIModelsWithRequestBuilder(dataset: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AIModel]> {
        let localVariablePath = "/api/2/ai/models"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dataset": dataset?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AIModel]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter importAIDatasetRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ImportAIDatasetResponse>
     */
    open class func importAIDatasets( importAIDatasetRequest: ImportAIDatasetRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ImportAIDatasetResponse> {
        let deferred = Promise<ImportAIDatasetResponse>.pending()
        importAIDatasetsWithRequestBuilder(importAIDatasetRequest: importAIDatasetRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/datasets/import
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter importAIDatasetRequest: (body)  
     - returns: RequestBuilder<ImportAIDatasetResponse> 
     */
    open class func importAIDatasetsWithRequestBuilder(importAIDatasetRequest: ImportAIDatasetRequest) -> RequestBuilder<ImportAIDatasetResponse> {
        let localVariablePath = "/api/2/ai/datasets/import"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importAIDatasetRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportAIDatasetResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter importAIModelRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ImportAIModelResponse>
     */
    open class func importAIModels( id: UUID,  importAIModelRequest: ImportAIModelRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ImportAIModelResponse> {
        let deferred = Promise<ImportAIModelResponse>.pending()
        importAIModelsWithRequestBuilder(id: id, importAIModelRequest: importAIModelRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/datasets/{id}/import-models
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter importAIModelRequest: (body)  
     - returns: RequestBuilder<ImportAIModelResponse> 
     */
    open class func importAIModelsWithRequestBuilder(id: UUID, importAIModelRequest: ImportAIModelRequest) -> RequestBuilder<ImportAIModelResponse> {
        var localVariablePath = "/api/2/ai/datasets/{id}/import-models"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: importAIModelRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImportAIModelResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter aIAnnotationPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIAnnotation>
     */
    open class func patchAIAnnotation( id: UUID,  aIAnnotationPartialUpdate: AIAnnotationPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIAnnotation> {
        let deferred = Promise<AIAnnotation>.pending()
        patchAIAnnotationWithRequestBuilder(id: id, aIAnnotationPartialUpdate: aIAnnotationPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/ai/annotations/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter aIAnnotationPartialUpdate: (body)  
     - returns: RequestBuilder<AIAnnotation> 
     */
    open class func patchAIAnnotationWithRequestBuilder(id: UUID, aIAnnotationPartialUpdate: AIAnnotationPartialUpdate) -> RequestBuilder<AIAnnotation> {
        var localVariablePath = "/api/2/ai/annotations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIAnnotationPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIAnnotation>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter aICategoryDetailPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AICategoryDetail>
     */
    open class func patchAICategory( id: UUID,  aICategoryDetailPartialUpdate: AICategoryDetailPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AICategoryDetail> {
        let deferred = Promise<AICategoryDetail>.pending()
        patchAICategoryWithRequestBuilder(id: id, aICategoryDetailPartialUpdate: aICategoryDetailPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/ai/categories/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter aICategoryDetailPartialUpdate: (body)  
     - returns: RequestBuilder<AICategoryDetail> 
     */
    open class func patchAICategoryWithRequestBuilder(id: UUID, aICategoryDetailPartialUpdate: AICategoryDetailPartialUpdate) -> RequestBuilder<AICategoryDetail> {
        var localVariablePath = "/api/2/ai/categories/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aICategoryDetailPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICategoryDetail>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetWithPreviewPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIDatasetWithPreview>
     */
    open class func patchAIDataset( id: UUID,  aIDatasetWithPreviewPartialUpdate: AIDatasetWithPreviewPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIDatasetWithPreview> {
        let deferred = Promise<AIDatasetWithPreview>.pending()
        patchAIDatasetWithRequestBuilder(id: id, aIDatasetWithPreviewPartialUpdate: aIDatasetWithPreviewPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/ai/datasets/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetWithPreviewPartialUpdate: (body)  
     - returns: RequestBuilder<AIDatasetWithPreview> 
     */
    open class func patchAIDatasetWithRequestBuilder(id: UUID, aIDatasetWithPreviewPartialUpdate: AIDatasetWithPreviewPartialUpdate) -> RequestBuilder<AIDatasetWithPreview> {
        var localVariablePath = "/api/2/ai/datasets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIDatasetWithPreviewPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIDatasetWithPreview>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModel>
     */
    open class func patchAIModel( id: UUID,  aIModelPartialUpdate: AIModelPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModel> {
        let deferred = Promise<AIModel>.pending()
        patchAIModelWithRequestBuilder(id: id, aIModelPartialUpdate: aIModelPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/ai/models/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelPartialUpdate: (body)  
     - returns: RequestBuilder<AIModel> 
     */
    open class func patchAIModelWithRequestBuilder(id: UUID, aIModelPartialUpdate: AIModelPartialUpdate) -> RequestBuilder<AIModel> {
        var localVariablePath = "/api/2/ai/models/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModel>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelInferenceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModelInferenceResponse>
     */
    open class func runAIModelInference( id: UUID,  aIModelInferenceRequest: AIModelInferenceRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModelInferenceResponse> {
        let deferred = Promise<AIModelInferenceResponse>.pending()
        runAIModelInferenceWithRequestBuilder(id: id, aIModelInferenceRequest: aIModelInferenceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/models/{id}/inference
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelInferenceRequest: (body)  
     - returns: RequestBuilder<AIModelInferenceResponse> 
     */
    open class func runAIModelInferenceWithRequestBuilder(id: UUID, aIModelInferenceRequest: AIModelInferenceRequest) -> RequestBuilder<AIModelInferenceResponse> {
        var localVariablePath = "/api/2/ai/models/{id}/inference"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelInferenceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModelInferenceResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter aIAnnotationUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIAnnotation>
     */
    open class func updateAIAnnotation( id: UUID,  aIAnnotationUpdate: AIAnnotationUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIAnnotation> {
        let deferred = Promise<AIAnnotation>.pending()
        updateAIAnnotationWithRequestBuilder(id: id, aIAnnotationUpdate: aIAnnotationUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/ai/annotations/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Annotation. 
     - parameter aIAnnotationUpdate: (body)  
     - returns: RequestBuilder<AIAnnotation> 
     */
    open class func updateAIAnnotationWithRequestBuilder(id: UUID, aIAnnotationUpdate: AIAnnotationUpdate) -> RequestBuilder<AIAnnotation> {
        var localVariablePath = "/api/2/ai/annotations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIAnnotationUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIAnnotation>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter aICategoryDetailUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AICategoryDetail>
     */
    open class func updateAICategory( id: UUID,  aICategoryDetailUpdate: AICategoryDetailUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AICategoryDetail> {
        let deferred = Promise<AICategoryDetail>.pending()
        updateAICategoryWithRequestBuilder(id: id, aICategoryDetailUpdate: aICategoryDetailUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/ai/categories/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Category. 
     - parameter aICategoryDetailUpdate: (body)  
     - returns: RequestBuilder<AICategoryDetail> 
     */
    open class func updateAICategoryWithRequestBuilder(id: UUID, aICategoryDetailUpdate: AICategoryDetailUpdate) -> RequestBuilder<AICategoryDetail> {
        var localVariablePath = "/api/2/ai/categories/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aICategoryDetailUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AICategoryDetail>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetWithPreviewUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIDatasetWithPreview>
     */
    open class func updateAIDataset( id: UUID,  aIDatasetWithPreviewUpdate: AIDatasetWithPreviewUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIDatasetWithPreview> {
        let deferred = Promise<AIDatasetWithPreview>.pending()
        updateAIDatasetWithRequestBuilder(id: id, aIDatasetWithPreviewUpdate: aIDatasetWithPreviewUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/ai/datasets/{id}
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Dataset. 
     - parameter aIDatasetWithPreviewUpdate: (body)  
     - returns: RequestBuilder<AIDatasetWithPreview> 
     */
    open class func updateAIDatasetWithRequestBuilder(id: UUID, aIDatasetWithPreviewUpdate: AIDatasetWithPreviewUpdate) -> RequestBuilder<AIDatasetWithPreview> {
        var localVariablePath = "/api/2/ai/datasets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIDatasetWithPreviewUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIDatasetWithPreview>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIModel>
     */
    open class func updateAIModel( id: UUID,  aIModelUpdate: AIModelUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIModel> {
        let deferred = Promise<AIModel>.pending()
        updateAIModelWithRequestBuilder(id: id, aIModelUpdate: aIModelUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/ai/models/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A UUID string identifying this AI Model. 
     - parameter aIModelUpdate: (body)  
     - returns: RequestBuilder<AIModel> 
     */
    open class func updateAIModelWithRequestBuilder(id: UUID, aIModelUpdate: AIModelUpdate) -> RequestBuilder<AIModel> {
        var localVariablePath = "/api/2/ai/models/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aIModelUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIModel>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uploadAIImageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AIImage>
     */
    open class func uploadAIImage( uploadAIImageRequest: UploadAIImageRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<AIImage> {
        let deferred = Promise<AIImage>.pending()
        uploadAIImageWithRequestBuilder(uploadAIImageRequest: uploadAIImageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/ai/images/upload
     - ### Required permissions    * User account permission: `None` (read) / `media:roots:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter uploadAIImageRequest: (body)  
     - returns: RequestBuilder<AIImage> 
     */
    open class func uploadAIImageWithRequestBuilder(uploadAIImageRequest: UploadAIImageRequest) -> RequestBuilder<AIImage> {
        let localVariablePath = "/api/2/ai/images/upload"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadAIImageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AIImage>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
