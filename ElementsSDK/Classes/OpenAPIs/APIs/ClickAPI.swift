//
// ClickAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClickAPI {

    /**

     - parameter uploadId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func abortClickUpload( uploadId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        abortClickUploadWithRequestBuilder(uploadId: uploadId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/click/uploads/{upload_id}
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter uploadId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func abortClickUploadWithRequestBuilder(uploadId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/click/uploads/{upload_id}"
        let uploadIdPreEscape = "\(APIHelper.mapValueToPathItem(uploadId))"
        let uploadIdPostEscape = uploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{upload_id}", with: uploadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter id: (path)  
     - parameter addAssetsToClickGallery: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClickGallery>
     */
    open class func addAssetsToClickGallery( connectionId: String,  id: String,  addAssetsToClickGallery: AddAssetsToClickGallery, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClickGallery> {
        let deferred = Promise<ClickGallery>.pending()
        addAssetsToClickGalleryWithRequestBuilder(connectionId: connectionId, id: id, addAssetsToClickGallery: addAssetsToClickGallery).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/connections/{connection_id}/galleries/{id}/add-assets
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter id: (path)  
     - parameter addAssetsToClickGallery: (body)  
     - returns: RequestBuilder<ClickGallery> 
     */
    open class func addAssetsToClickGalleryWithRequestBuilder(connectionId: String, id: String, addAssetsToClickGallery: AddAssetsToClickGallery) -> RequestBuilder<ClickGallery> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/galleries/{id}/add-assets"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addAssetsToClickGallery)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClickGallery>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uploadId: (path)  
     - parameter clickBackgroundUploadEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func continueClickUploadInBackground( uploadId: String,  clickBackgroundUploadEndpointRequest: ClickBackgroundUploadEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        continueClickUploadInBackgroundWithRequestBuilder(uploadId: uploadId, clickBackgroundUploadEndpointRequest: clickBackgroundUploadEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/uploads/{upload_id}/background
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter uploadId: (path)  
     - parameter clickBackgroundUploadEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func continueClickUploadInBackgroundWithRequestBuilder(uploadId: String, clickBackgroundUploadEndpointRequest: ClickBackgroundUploadEndpointRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/click/uploads/{upload_id}/background"
        let uploadIdPreEscape = "\(APIHelper.mapValueToPathItem(uploadId))"
        let uploadIdPostEscape = uploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{upload_id}", with: uploadIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clickBackgroundUploadEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter clickGalleryUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClickGallery>
     */
    open class func createClickGallery( connectionId: String,  clickGalleryUpdate: ClickGalleryUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClickGallery> {
        let deferred = Promise<ClickGallery>.pending()
        createClickGalleryWithRequestBuilder(connectionId: connectionId, clickGalleryUpdate: clickGalleryUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/connections/{connection_id}/galleries
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter clickGalleryUpdate: (body)  
     - returns: RequestBuilder<ClickGallery> 
     */
    open class func createClickGalleryWithRequestBuilder(connectionId: String, clickGalleryUpdate: ClickGalleryUpdate) -> RequestBuilder<ClickGallery> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/galleries"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clickGalleryUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClickGallery>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter clickGalleryLink: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClickGalleryLink>
     */
    open class func createClickGalleryLink( connectionId: String,  clickGalleryLink: ClickGalleryLink, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClickGalleryLink> {
        let deferred = Promise<ClickGalleryLink>.pending()
        createClickGalleryLinkWithRequestBuilder(connectionId: connectionId, clickGalleryLink: clickGalleryLink).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/connections/{connection_id}/gallery-links
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter clickGalleryLink: (body)  
     - returns: RequestBuilder<ClickGalleryLink> 
     */
    open class func createClickGalleryLinkWithRequestBuilder(connectionId: String, clickGalleryLink: ClickGalleryLink) -> RequestBuilder<ClickGalleryLink> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/gallery-links"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clickGalleryLink)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClickGalleryLink>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteClickGalleryLink( connectionId: String,  id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteClickGalleryLinkWithRequestBuilder(connectionId: connectionId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/click/connections/{connection_id}/gallery-links/{id}
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteClickGalleryLinkWithRequestBuilder(connectionId: String, id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/gallery-links/{id}"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ClickGallery]>
     */
    open class func getAllClickGalleries( connectionId: String,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[ClickGallery]> {
        let deferred = Promise<[ClickGallery]>.pending()
        getAllClickGalleriesWithRequestBuilder(connectionId: connectionId, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/click/connections/{connection_id}/galleries
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[ClickGallery]> 
     */
    open class func getAllClickGalleriesWithRequestBuilder(connectionId: String, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[ClickGallery]> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/galleries"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ClickGallery]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InlineResponse200>
     */
    open class func getAllClickGalleryLinks( connectionId: String,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<InlineResponse200> {
        let deferred = Promise<InlineResponse200>.pending()
        getAllClickGalleryLinksWithRequestBuilder(connectionId: connectionId, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/click/connections/{connection_id}/gallery-links
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getAllClickGalleryLinksWithRequestBuilder(connectionId: String, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<InlineResponse200> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/gallery-links"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse200>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClickGallery>
     */
    open class func getClickGallery( connectionId: String,  id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClickGallery> {
        let deferred = Promise<ClickGallery>.pending()
        getClickGalleryWithRequestBuilder(connectionId: connectionId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/click/connections/{connection_id}/galleries/{id}
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ClickGallery> 
     */
    open class func getClickGalleryWithRequestBuilder(connectionId: String, id: String) -> RequestBuilder<ClickGallery> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/galleries/{id}"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClickGallery>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClickGalleryLink>
     */
    open class func getClickGalleryLink( connectionId: String,  id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClickGalleryLink> {
        let deferred = Promise<ClickGalleryLink>.pending()
        getClickGalleryLinkWithRequestBuilder(connectionId: connectionId, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/click/connections/{connection_id}/gallery-links/{id}
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ClickGalleryLink> 
     */
    open class func getClickGalleryLinkWithRequestBuilder(connectionId: String, id: String) -> RequestBuilder<ClickGalleryLink> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/gallery-links/{id}"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClickGalleryLink>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter connectionId: (path)  
     - parameter linkId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func sendClickGalleryLinkEmail( connectionId: String,  linkId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        sendClickGalleryLinkEmailWithRequestBuilder(connectionId: connectionId, linkId: linkId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/connections/{connection_id}/gallery-links/{link_id}/send
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter connectionId: (path)  
     - parameter linkId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func sendClickGalleryLinkEmailWithRequestBuilder(connectionId: String, linkId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/click/connections/{connection_id}/gallery-links/{link_id}/send"
        let connectionIdPreEscape = "\(APIHelper.mapValueToPathItem(connectionId))"
        let connectionIdPostEscape = connectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{connection_id}", with: connectionIdPostEscape, options: .literal, range: nil)
        let linkIdPreEscape = "\(APIHelper.mapValueToPathItem(linkId))"
        let linkIdPostEscape = linkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{link_id}", with: linkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clickStartUploadEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func startClickUpload( clickStartUploadEndpointRequest: ClickStartUploadEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        startClickUploadWithRequestBuilder(clickStartUploadEndpointRequest: clickStartUploadEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/click/uploads
     - ### Required permissions    * User account permission: `cloud:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter clickStartUploadEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func startClickUploadWithRequestBuilder(clickStartUploadEndpointRequest: ClickStartUploadEndpointRequest) -> RequestBuilder<TaskInfo> {
        let localVariablePath = "/api/2/click/uploads"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clickStartUploadEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
