//
// SharedstorageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SharedstorageAPI {

    /**

     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<StorageResponse>
     */
    open class func getSharedStorageValue( name: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<StorageResponse> {
        let deferred = Promise<StorageResponse>.pending()
        getSharedStorageValueWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/shared-storage/{name}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - returns: RequestBuilder<StorageResponse> 
     */
    open class func getSharedStorageValueWithRequestBuilder(name: String) -> RequestBuilder<StorageResponse> {
        var localVariablePath = "/api/2/private/shared-storage/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StorageResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<StorageResponse>
     */
    open class func getUserStorageValue( name: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<StorageResponse> {
        let deferred = Promise<StorageResponse>.pending()
        getUserStorageValueWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/user-storage/{name}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - returns: RequestBuilder<StorageResponse> 
     */
    open class func getUserStorageValueWithRequestBuilder(name: String) -> RequestBuilder<StorageResponse> {
        var localVariablePath = "/api/2/private/user-storage/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StorageResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path)  
     - parameter storageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<StorageResponse>
     */
    open class func setSharedStorageValue( name: String,  storageRequest: StorageRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<StorageResponse> {
        let deferred = Promise<StorageResponse>.pending()
        setSharedStorageValueWithRequestBuilder(name: name, storageRequest: storageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/shared-storage/{name}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - parameter storageRequest: (body)  
     - returns: RequestBuilder<StorageResponse> 
     */
    open class func setSharedStorageValueWithRequestBuilder(name: String, storageRequest: StorageRequest) -> RequestBuilder<StorageResponse> {
        var localVariablePath = "/api/2/private/shared-storage/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: storageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StorageResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path)  
     - parameter storageRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<StorageResponse>
     */
    open class func setUserStorageValue( name: String,  storageRequest: StorageRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<StorageResponse> {
        let deferred = Promise<StorageResponse>.pending()
        setUserStorageValueWithRequestBuilder(name: name, storageRequest: storageRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/user-storage/{name}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - parameter storageRequest: (body)  
     - returns: RequestBuilder<StorageResponse> 
     */
    open class func setUserStorageValueWithRequestBuilder(name: String, storageRequest: StorageRequest) -> RequestBuilder<StorageResponse> {
        var localVariablePath = "/api/2/private/user-storage/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: storageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StorageResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
