//
// TapeArchiveAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TapeArchiveAPI {

    /**

     - parameter archiveEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TapeJob]>
     */
    open class func archiveToTape( archiveEndpointRequest: ArchiveEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TapeJob]> {
        let deferred = Promise<[TapeJob]>.pending()
        archiveToTapeWithRequestBuilder(archiveEndpointRequest: archiveEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/archive
     - ### Required permissions    * User account permission: `ltfs:backup`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter archiveEndpointRequest: (body)  
     - returns: RequestBuilder<[TapeJob]> 
     */
    open class func archiveToTapeWithRequestBuilder(archiveEndpointRequest: ArchiveEndpointRequest) -> RequestBuilder<[TapeJob]> {
        let localVariablePath = "/api/2/archive/tape/archive"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: archiveEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TapeJob]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func cancelAllTapeArchiveJobs(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        cancelAllTapeArchiveJobsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/jobs/cancel-all
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func cancelAllTapeArchiveJobsWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/jobs/cancel-all"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryFsckEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func checkTape( tapeLibraryFsckEndpointRequest: TapeLibraryFsckEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        checkTapeWithRequestBuilder(tapeLibraryFsckEndpointRequest: tapeLibraryFsckEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/check
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryFsckEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func checkTapeWithRequestBuilder(tapeLibraryFsckEndpointRequest: TapeLibraryFsckEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/check"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryFsckEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Tape>
     */
    open class func createTape( tapeUpdate: TapeUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Tape> {
        let deferred = Promise<Tape>.pending()
        createTapeWithRequestBuilder(tapeUpdate: tapeUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/tapes
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeUpdate: (body)  
     - returns: RequestBuilder<Tape> 
     */
    open class func createTapeWithRequestBuilder(tapeUpdate: TapeUpdate) -> RequestBuilder<Tape> {
        let localVariablePath = "/api/2/archive/tape/tapes"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tape>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeGroupUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeGroup>
     */
    open class func createTapeGroup( tapeGroupUpdate: TapeGroupUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeGroup> {
        let deferred = Promise<TapeGroup>.pending()
        createTapeGroupWithRequestBuilder(tapeGroupUpdate: tapeGroupUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/groups
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeGroupUpdate: (body)  
     - returns: RequestBuilder<TapeGroup> 
     */
    open class func createTapeGroupWithRequestBuilder(tapeGroupUpdate: TapeGroupUpdate) -> RequestBuilder<TapeGroup> {
        let localVariablePath = "/api/2/archive/tape/groups"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeGroupUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeGroup>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteTape( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTapeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/archive/tape/tapes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTapeWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/tapes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteTapeArchiveJob( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTapeArchiveJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/archive/tape/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTapeArchiveJobWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteTapeGroup( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTapeGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/archive/tape/groups/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape group. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTapeGroupWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryFormatEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func formatTape( tapeLibraryFormatEndpointRequest: TapeLibraryFormatEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        formatTapeWithRequestBuilder(tapeLibraryFormatEndpointRequest: tapeLibraryFormatEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/format
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryFormatEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func formatTapeWithRequestBuilder(tapeLibraryFormatEndpointRequest: TapeLibraryFormatEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/format"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryFormatEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter fullpath: (query) Filter the returned list by &#x60;fullpath&#x60;. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TapeFile]>
     */
    open class func getAllArchivedFileEntries( id: Double? = nil,  isDir: String? = nil,  name: String? = nil,  fullpath: String? = nil,  parent: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TapeFile]> {
        let deferred = Promise<[TapeFile]>.pending()
        getAllArchivedFileEntriesWithRequestBuilder(id: id, isDir: isDir, name: name, fullpath: fullpath, parent: parent, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/files
     - ### Required permissions    * User account permission: `ltfs:search` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter fullpath: (query) Filter the returned list by &#x60;fullpath&#x60;. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TapeFile]> 
     */
    open class func getAllArchivedFileEntriesWithRequestBuilder(id: Double? = nil, isDir: String? = nil, name: String? = nil, fullpath: String? = nil, parent: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TapeFile]> {
        let localVariablePath = "/api/2/archive/tape/files"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "is_dir": isDir?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "fullpath": fullpath?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TapeFile]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TapeJob]>
     */
    open class func getAllTapeArchiveJobs( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TapeJob]> {
        let deferred = Promise<[TapeJob]>.pending()
        getAllTapeArchiveJobsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/jobs
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TapeJob]> 
     */
    open class func getAllTapeArchiveJobsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TapeJob]> {
        let localVariablePath = "/api/2/archive/tape/jobs"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TapeJob]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TapeGroup]>
     */
    open class func getAllTapeGroups( id: Double? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TapeGroup]> {
        let deferred = Promise<[TapeGroup]>.pending()
        getAllTapeGroupsWithRequestBuilder(id: id, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/groups
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TapeGroup]> 
     */
    open class func getAllTapeGroupsWithRequestBuilder(id: Double? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TapeGroup]> {
        let localVariablePath = "/api/2/archive/tape/groups"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TapeGroup]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter group: (query) Filter the returned list by &#x60;group&#x60;. (optional)
     - parameter groupIsnull: (query) Filter the returned list by &#x60;group__isnull&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Tape]>
     */
    open class func getAllTapes( id: Double? = nil,  name: String? = nil,  group: Double? = nil,  groupIsnull: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Tape]> {
        let deferred = Promise<[Tape]>.pending()
        getAllTapesWithRequestBuilder(id: id, name: name, group: group, groupIsnull: groupIsnull, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/tapes
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter group: (query) Filter the returned list by &#x60;group&#x60;. (optional)
     - parameter groupIsnull: (query) Filter the returned list by &#x60;group__isnull&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Tape]> 
     */
    open class func getAllTapesWithRequestBuilder(id: Double? = nil, name: String? = nil, group: Double? = nil, groupIsnull: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Tape]> {
        let localVariablePath = "/api/2/archive/tape/tapes"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "group": group?.encodeToJSON(),
            "group__isnull": groupIsnull?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Tape]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Archived file entry. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeFile>
     */
    open class func getArchivedFileEntry( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeFile> {
        let deferred = Promise<TapeFile>.pending()
        getArchivedFileEntryWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/files/{id}
     - ### Required permissions    * User account permission: `ltfs:search` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Archived file entry. 
     - returns: RequestBuilder<TapeFile> 
     */
    open class func getArchivedFileEntryWithRequestBuilder(id: Int) -> RequestBuilder<TapeFile> {
        var localVariablePath = "/api/2/archive/tape/files/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeFile>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Tape>
     */
    open class func getTape( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Tape> {
        let deferred = Promise<Tape>.pending()
        getTapeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/tapes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape. 
     - returns: RequestBuilder<Tape> 
     */
    open class func getTapeWithRequestBuilder(id: Int) -> RequestBuilder<Tape> {
        var localVariablePath = "/api/2/archive/tape/tapes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tape>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeJob>
     */
    open class func getTapeArchiveJob( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeJob> {
        let deferred = Promise<TapeJob>.pending()
        getTapeArchiveJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<TapeJob> 
     */
    open class func getTapeArchiveJobWithRequestBuilder(id: String) -> RequestBuilder<TapeJob> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeJob>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TapeJobSource]>
     */
    open class func getTapeArchiveJobSources( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TapeJobSource]> {
        let deferred = Promise<[TapeJobSource]>.pending()
        getTapeArchiveJobSourcesWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/jobs/{id}/sources
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<[TapeJobSource]> 
     */
    open class func getTapeArchiveJobSourcesWithRequestBuilder(id: String) -> RequestBuilder<[TapeJobSource]> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}/sources"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TapeJobSource]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeGroup>
     */
    open class func getTapeGroup( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeGroup> {
        let deferred = Promise<TapeGroup>.pending()
        getTapeGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/groups/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape group. 
     - returns: RequestBuilder<TapeGroup> 
     */
    open class func getTapeGroupWithRequestBuilder(id: Int) -> RequestBuilder<TapeGroup> {
        var localVariablePath = "/api/2/archive/tape/groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeGroup>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeLibraryEndpointResponse>
     */
    open class func getTapeLibraryState(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeLibraryEndpointResponse> {
        let deferred = Promise<TapeLibraryEndpointResponse>.pending()
        getTapeLibraryStateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/archive/tape/library
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<TapeLibraryEndpointResponse> 
     */
    open class func getTapeLibraryStateWithRequestBuilder() -> RequestBuilder<TapeLibraryEndpointResponse> {
        let localVariablePath = "/api/2/archive/tape/library"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeLibraryEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryLoadEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func loadTape( tapeLibraryLoadEndpointRequest: TapeLibraryLoadEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        loadTapeWithRequestBuilder(tapeLibraryLoadEndpointRequest: tapeLibraryLoadEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/load
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryLoadEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loadTapeWithRequestBuilder(tapeLibraryLoadEndpointRequest: TapeLibraryLoadEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/load"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryLoadEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryMoveEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func moveTape( tapeLibraryMoveEndpointRequest: TapeLibraryMoveEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        moveTapeWithRequestBuilder(tapeLibraryMoveEndpointRequest: tapeLibraryMoveEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/move
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryMoveEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func moveTapeWithRequestBuilder(tapeLibraryMoveEndpointRequest: TapeLibraryMoveEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/move"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryMoveEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter tapePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Tape>
     */
    open class func patchTape( id: Int,  tapePartialUpdate: TapePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Tape> {
        let deferred = Promise<Tape>.pending()
        patchTapeWithRequestBuilder(id: id, tapePartialUpdate: tapePartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/archive/tape/tapes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter tapePartialUpdate: (body)  
     - returns: RequestBuilder<Tape> 
     */
    open class func patchTapeWithRequestBuilder(id: Int, tapePartialUpdate: TapePartialUpdate) -> RequestBuilder<Tape> {
        var localVariablePath = "/api/2/archive/tape/tapes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapePartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tape>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter tapeGroupPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeGroup>
     */
    open class func patchTapeGroup( id: Int,  tapeGroupPartialUpdate: TapeGroupPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeGroup> {
        let deferred = Promise<TapeGroup>.pending()
        patchTapeGroupWithRequestBuilder(id: id, tapeGroupPartialUpdate: tapeGroupPartialUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/archive/tape/groups/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter tapeGroupPartialUpdate: (body)  
     - returns: RequestBuilder<TapeGroup> 
     */
    open class func patchTapeGroupWithRequestBuilder(id: Int, tapeGroupPartialUpdate: TapeGroupPartialUpdate) -> RequestBuilder<TapeGroup> {
        var localVariablePath = "/api/2/archive/tape/groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeGroupPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeGroup>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func pauseTapeArchiveJob( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        pauseTapeArchiveJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/jobs/{id}/pause
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func pauseTapeArchiveJobWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}/pause"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func refreshTapeLibraryState(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        refreshTapeLibraryStateWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/refresh
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func refreshTapeLibraryStateWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/refresh"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryReindexEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func reindexTape( tapeLibraryReindexEndpointRequest: TapeLibraryReindexEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        reindexTapeWithRequestBuilder(tapeLibraryReindexEndpointRequest: tapeLibraryReindexEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/reindex
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryReindexEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func reindexTapeWithRequestBuilder(tapeLibraryReindexEndpointRequest: TapeLibraryReindexEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/reindex"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryReindexEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func removeFinishedTapeArchiveJobs(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        removeFinishedTapeArchiveJobsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/jobs/remove-finished
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func removeFinishedTapeArchiveJobsWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/jobs/remove-finished"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func restartTapeArchiveJob( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        restartTapeArchiveJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/jobs/{id}/restart
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func restartTapeArchiveJobWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}/restart"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter restoreEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeJob>
     */
    open class func restoreFromTape( restoreEndpointRequest: RestoreEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeJob> {
        let deferred = Promise<TapeJob>.pending()
        restoreFromTapeWithRequestBuilder(restoreEndpointRequest: restoreEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/restore
     - ### Required permissions    * User account permission: `ltfs:restore`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter restoreEndpointRequest: (body)  
     - returns: RequestBuilder<TapeJob> 
     */
    open class func restoreFromTapeWithRequestBuilder(restoreEndpointRequest: RestoreEndpointRequest) -> RequestBuilder<TapeJob> {
        let localVariablePath = "/api/2/archive/tape/restore"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: restoreEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeJob>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func resumeTapeArchiveJob( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        resumeTapeArchiveJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/jobs/{id}/resume
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func resumeTapeArchiveJobWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/archive/tape/jobs/{id}/resume"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter searchEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SearchEndpointResponse>
     */
    open class func searchTapeArchive( searchEndpointRequest: SearchEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<SearchEndpointResponse> {
        let deferred = Promise<SearchEndpointResponse>.pending()
        searchTapeArchiveWithRequestBuilder(searchEndpointRequest: searchEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/search
     - ### Required permissions    * User account permission: `ltfs:search`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter searchEndpointRequest: (body)  
     - returns: RequestBuilder<SearchEndpointResponse> 
     */
    open class func searchTapeArchiveWithRequestBuilder(searchEndpointRequest: SearchEndpointRequest) -> RequestBuilder<SearchEndpointResponse> {
        let localVariablePath = "/api/2/archive/tape/search"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter tapeLibraryUnloadEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func unloadTape( tapeLibraryUnloadEndpointRequest: TapeLibraryUnloadEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        unloadTapeWithRequestBuilder(tapeLibraryUnloadEndpointRequest: tapeLibraryUnloadEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/archive/tape/library/unload
     - ### Required permissions    * User account permission: `ltfs:manage`   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter tapeLibraryUnloadEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func unloadTapeWithRequestBuilder(tapeLibraryUnloadEndpointRequest: TapeLibraryUnloadEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/archive/tape/library/unload"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeLibraryUnloadEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter tapeUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Tape>
     */
    open class func updateTape( id: Int,  tapeUpdate: TapeUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Tape> {
        let deferred = Promise<Tape>.pending()
        updateTapeWithRequestBuilder(id: id, tapeUpdate: tapeUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/archive/tape/tapes/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape. 
     - parameter tapeUpdate: (body)  
     - returns: RequestBuilder<Tape> 
     */
    open class func updateTapeWithRequestBuilder(id: Int, tapeUpdate: TapeUpdate) -> RequestBuilder<Tape> {
        var localVariablePath = "/api/2/archive/tape/tapes/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tape>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter tapeGroupUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TapeGroup>
     */
    open class func updateTapeGroup( id: Int,  tapeGroupUpdate: TapeGroupUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TapeGroup> {
        let deferred = Promise<TapeGroup>.pending()
        updateTapeGroupWithRequestBuilder(id: id, tapeGroupUpdate: tapeGroupUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/archive/tape/groups/{id}
     - ### Required permissions    * User account permission: `None` (read) / `ltfs:tapegroups:manage` (write)   * License component: ltfs 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this tape group. 
     - parameter tapeGroupUpdate: (body)  
     - returns: RequestBuilder<TapeGroup> 
     */
    open class func updateTapeGroupWithRequestBuilder(id: Int, tapeGroupUpdate: TapeGroupUpdate) -> RequestBuilder<TapeGroup> {
        var localVariablePath = "/api/2/archive/tape/groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tapeGroupUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TapeGroup>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
