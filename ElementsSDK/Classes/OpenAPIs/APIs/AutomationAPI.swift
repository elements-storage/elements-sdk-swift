//
// AutomationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit

open class AutomationAPI {
    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func abortTask( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        abortTaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/tasks/{id}/abort
     - ### Required permissions    * User account permission: `tasks:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<Void> 
     */
    open class func abortTaskWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/2/tasks/{id}/abort"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter job: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Job>
     */
    open class func createJob( job: Job, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Job> {
        let deferred = Promise<Job>.pending()
        createJobWithRequestBuilder(job: job).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/jobs
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter job: (body)  
     - returns: RequestBuilder<Job> 
     */
    open class func createJobWithRequestBuilder(job: Job) -> RequestBuilder<Job> {
        let path = "/api/2/jobs"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: job)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Job>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter schedule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Schedule>
     */
    open class func createSchedule( schedule: Schedule, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Schedule> {
        let deferred = Promise<Schedule>.pending()
        createScheduleWithRequestBuilder(schedule: schedule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/schedules
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter schedule: (body)  
     - returns: RequestBuilder<Schedule> 
     */
    open class func createScheduleWithRequestBuilder(schedule: Schedule) -> RequestBuilder<Schedule> {
        let path = "/api/2/schedules"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: schedule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Schedule>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter subtask: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subtask>
     */
    open class func createSubtask( subtask: Subtask, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Subtask> {
        let deferred = Promise<Subtask>.pending()
        createSubtaskWithRequestBuilder(subtask: subtask).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/subtasks
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter subtask: (body)  
     - returns: RequestBuilder<Subtask> 
     */
    open class func createSubtaskWithRequestBuilder(subtask: Subtask) -> RequestBuilder<Subtask> {
        let path = "/api/2/subtasks"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtask)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subtask>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteFinishedTasks(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteFinishedTasksWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/tasks/finished
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFinishedTasksWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/2/tasks/finished"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this job. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteJob( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this job. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteJobWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteSchedule( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteScheduleWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/schedules/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this schedule. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteScheduleWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/schedules/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteSubtask( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteSubtaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/subtasks/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subtask. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubtaskWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var path = "/api/2/subtasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteTask( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteTaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/tasks/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/2/tasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func downloadAllTaskLogs( jobInstance: String? = nil,  jobInstanceIn: String? = nil,  subtask: String? = nil,  state: String? = nil,  stateIn: Double? = nil,  id: String? = nil,  idIn: String? = nil,  name: String? = nil,  taskName: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        downloadAllTaskLogsWithRequestBuilder(jobInstance: jobInstance, jobInstanceIn: jobInstanceIn, subtask: subtask, state: state, stateIn: stateIn, id: id, idIn: idIn, name: name, taskName: taskName, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/logs/download
     - ### Required permissions    * User account permission: `tasks:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func downloadAllTaskLogsWithRequestBuilder(jobInstance: String? = nil, jobInstanceIn: String? = nil, subtask: String? = nil, state: String? = nil, stateIn: Double? = nil, id: String? = nil, idIn: String? = nil, name: String? = nil, taskName: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        let path = "/api/2/tasks/logs/download"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job_instance": jobInstance?.encodeToJSON(),
            "job_instance__in": jobInstanceIn?.encodeToJSON(),
            "subtask": subtask?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "id__in": idIn?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "task_name": taskName?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func downloadTaskLog( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        downloadTaskLogWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/{id}/log/download
     - ### Required permissions    * User account permission: `tasks:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadTaskLogWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/2/tasks/{id}/log/download"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InlineResponse2002>
     */
    open class func getAllEvents( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<InlineResponse2002> {
        let deferred = Promise<InlineResponse2002>.pending()
        getAllEventsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/events
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getAllEventsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/api/2/events"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter specialType: (query) Filter the returned list by &#x60;special_type&#x60;. (optional)
     - parameter specialTypeIsnull: (query) Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)
     - parameter hook: (query) Filter the returned list by &#x60;hook&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Job]>
     */
    open class func getAllJobs( specialType: String? = nil,  specialTypeIsnull: String? = nil,  hook: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Job]> {
        let deferred = Promise<[Job]>.pending()
        getAllJobsWithRequestBuilder(specialType: specialType, specialTypeIsnull: specialTypeIsnull, hook: hook, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/jobs
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter specialType: (query) Filter the returned list by &#x60;special_type&#x60;. (optional)
     - parameter specialTypeIsnull: (query) Filter the returned list by &#x60;special_type__isnull&#x60;. (optional)
     - parameter hook: (query) Filter the returned list by &#x60;hook&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Job]> 
     */
    open class func getAllJobsWithRequestBuilder(specialType: String? = nil, specialTypeIsnull: String? = nil, hook: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Job]> {
        let path = "/api/2/jobs"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "special_type": specialType?.encodeToJSON(),
            "special_type__isnull": specialTypeIsnull?.encodeToJSON(),
            "hook": hook?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Job]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter job: (query) Filter the returned list by &#x60;job&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Schedule]>
     */
    open class func getAllSchedules( job: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Schedule]> {
        let deferred = Promise<[Schedule]>.pending()
        getAllSchedulesWithRequestBuilder(job: job, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/schedules
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter job: (query) Filter the returned list by &#x60;job&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Schedule]> 
     */
    open class func getAllSchedulesWithRequestBuilder(job: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Schedule]> {
        let path = "/api/2/schedules"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job": job?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Schedule]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Subtask]>
     */
    open class func getAllSubtasks( parent: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[Subtask]> {
        let deferred = Promise<[Subtask]>.pending()
        getAllSubtasksWithRequestBuilder(parent: parent, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/subtasks
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Subtask]> 
     */
    open class func getAllSubtasksWithRequestBuilder(parent: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Subtask]> {
        let path = "/api/2/subtasks"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "parent": parent?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Subtask]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InlineResponse2003>
     */
    open class func getAllTaskQueues( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<InlineResponse2003> {
        let deferred = Promise<InlineResponse2003>.pending()
        getAllTaskQueuesWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/queues
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func getAllTaskQueuesWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<InlineResponse2003> {
        let path = "/api/2/tasks/queues"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<InlineResponse2004>
     */
    open class func getAllTaskTypes( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<InlineResponse2004> {
        let deferred = Promise<InlineResponse2004>.pending()
        getAllTaskTypesWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/types
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func getAllTaskTypesWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/api/2/tasks/types"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func getAllTasks( jobInstance: String? = nil,  jobInstanceIn: String? = nil,  subtask: String? = nil,  state: String? = nil,  stateIn: Double? = nil,  id: String? = nil,  idIn: String? = nil,  name: String? = nil,  taskName: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        getAllTasksWithRequestBuilder(jobInstance: jobInstance, jobInstanceIn: jobInstanceIn, subtask: subtask, state: state, stateIn: stateIn, id: id, idIn: idIn, name: name, taskName: taskName, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func getAllTasksWithRequestBuilder(jobInstance: String? = nil, jobInstanceIn: String? = nil, subtask: String? = nil, state: String? = nil, stateIn: Double? = nil, id: String? = nil, idIn: String? = nil, name: String? = nil, taskName: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TaskInfo]> {
        let path = "/api/2/tasks"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job_instance": jobInstance?.encodeToJSON(),
            "job_instance__in": jobInstanceIn?.encodeToJSON(),
            "subtask": subtask?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "id__in": idIn?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "task_name": taskName?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Event>
     */
    open class func getEvent( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Event> {
        let deferred = Promise<Event>.pending()
        getEventWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/events/{id}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<Event> 
     */
    open class func getEventWithRequestBuilder(id: String) -> RequestBuilder<Event> {
        var path = "/api/2/events/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Event>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func getFinishedTasks( jobInstance: String? = nil,  jobInstanceIn: String? = nil,  subtask: String? = nil,  state: String? = nil,  stateIn: Double? = nil,  id: String? = nil,  idIn: String? = nil,  name: String? = nil,  taskName: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        getFinishedTasksWithRequestBuilder(jobInstance: jobInstance, jobInstanceIn: jobInstanceIn, subtask: subtask, state: state, stateIn: stateIn, id: id, idIn: idIn, name: name, taskName: taskName, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/finished
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func getFinishedTasksWithRequestBuilder(jobInstance: String? = nil, jobInstanceIn: String? = nil, subtask: String? = nil, state: String? = nil, stateIn: Double? = nil, id: String? = nil, idIn: String? = nil, name: String? = nil, taskName: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TaskInfo]> {
        let path = "/api/2/tasks/finished"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job_instance": jobInstance?.encodeToJSON(),
            "job_instance__in": jobInstanceIn?.encodeToJSON(),
            "subtask": subtask?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "id__in": idIn?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "task_name": taskName?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this job. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Job>
     */
    open class func getJob( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Job> {
        let deferred = Promise<Job>.pending()
        getJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this job. 
     - returns: RequestBuilder<Job> 
     */
    open class func getJobWithRequestBuilder(id: Int) -> RequestBuilder<Job> {
        var path = "/api/2/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Job>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func getPendingTasks( jobInstance: String? = nil,  jobInstanceIn: String? = nil,  subtask: String? = nil,  state: String? = nil,  stateIn: Double? = nil,  id: String? = nil,  idIn: String? = nil,  name: String? = nil,  taskName: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        getPendingTasksWithRequestBuilder(jobInstance: jobInstance, jobInstanceIn: jobInstanceIn, subtask: subtask, state: state, stateIn: stateIn, id: id, idIn: idIn, name: name, taskName: taskName, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/pending
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func getPendingTasksWithRequestBuilder(jobInstance: String? = nil, jobInstanceIn: String? = nil, subtask: String? = nil, state: String? = nil, stateIn: Double? = nil, id: String? = nil, idIn: String? = nil, name: String? = nil, taskName: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TaskInfo]> {
        let path = "/api/2/tasks/pending"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job_instance": jobInstance?.encodeToJSON(),
            "job_instance__in": jobInstanceIn?.encodeToJSON(),
            "subtask": subtask?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "id__in": idIn?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "task_name": taskName?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[PythonEnvironment]>
     */
    open class func getPythonEnvironments(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[PythonEnvironment]> {
        let deferred = Promise<[PythonEnvironment]>.pending()
        getPythonEnvironmentsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/python/environments
     - ### Required permissions    * User account permission: `tasks:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<[PythonEnvironment]> 
     */
    open class func getPythonEnvironmentsWithRequestBuilder() -> RequestBuilder<[PythonEnvironment]> {
        let path = "/api/2/python/environments"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[PythonEnvironment]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Schedule>
     */
    open class func getSchedule( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Schedule> {
        let deferred = Promise<Schedule>.pending()
        getScheduleWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/schedules/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this schedule. 
     - returns: RequestBuilder<Schedule> 
     */
    open class func getScheduleWithRequestBuilder(id: Int) -> RequestBuilder<Schedule> {
        var path = "/api/2/schedules/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Schedule>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subtask>
     */
    open class func getSubtask( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Subtask> {
        let deferred = Promise<Subtask>.pending()
        getSubtaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/subtasks/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subtask. 
     - returns: RequestBuilder<Subtask> 
     */
    open class func getSubtaskWithRequestBuilder(id: Int) -> RequestBuilder<Subtask> {
        var path = "/api/2/subtasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subtask>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func getTask( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        getTaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func getTaskWithRequestBuilder(id: String) -> RequestBuilder<TaskInfo> {
        var path = "/api/2/tasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskLog>
     */
    open class func getTaskLog( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskLog> {
        let deferred = Promise<TaskLog>.pending()
        getTaskLogWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/{id}/log
     - ### Required permissions    * User account permission: `tasks:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<TaskLog> 
     */
    open class func getTaskLogWithRequestBuilder(id: String) -> RequestBuilder<TaskLog> {
        var path = "/api/2/tasks/{id}/log"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskLog>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter type: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskType>
     */
    open class func getTaskType( type: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskType> {
        let deferred = Promise<TaskType>.pending()
        getTaskTypeWithRequestBuilder(type: type).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/types/{type}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter type: (path)  
     - returns: RequestBuilder<TaskType> 
     */
    open class func getTaskTypeWithRequestBuilder(type: String) -> RequestBuilder<TaskType> {
        var path = "/api/2/tasks/types/{type}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskType>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TasksSummary>
     */
    open class func getTasksSummary( jobInstance: String? = nil,  jobInstanceIn: String? = nil,  subtask: String? = nil,  state: String? = nil,  stateIn: Double? = nil,  id: String? = nil,  idIn: String? = nil,  name: String? = nil,  taskName: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TasksSummary> {
        let deferred = Promise<TasksSummary>.pending()
        getTasksSummaryWithRequestBuilder(jobInstance: jobInstance, jobInstanceIn: jobInstanceIn, subtask: subtask, state: state, stateIn: stateIn, id: id, idIn: idIn, name: name, taskName: taskName, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/tasks/summary
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter jobInstance: (query) Filter the returned list by &#x60;job_instance&#x60;. (optional)
     - parameter jobInstanceIn: (query) Multiple values may be separated by commas. (optional)
     - parameter subtask: (query) Filter the returned list by &#x60;subtask&#x60;. (optional)
     - parameter state: (query) Filter the returned list by &#x60;state&#x60;. (optional)
     - parameter stateIn: (query) Multiple values may be separated by commas. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter idIn: (query) Multiple values may be separated by commas. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter taskName: (query) Filter the returned list by &#x60;task_name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<TasksSummary> 
     */
    open class func getTasksSummaryWithRequestBuilder(jobInstance: String? = nil, jobInstanceIn: String? = nil, subtask: String? = nil, state: String? = nil, stateIn: Double? = nil, id: String? = nil, idIn: String? = nil, name: String? = nil, taskName: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<TasksSummary> {
        let path = "/api/2/tasks/summary"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "job_instance": jobInstance?.encodeToJSON(),
            "job_instance__in": jobInstanceIn?.encodeToJSON(),
            "subtask": subtask?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "id__in": idIn?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "task_name": taskName?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TasksSummary>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func killAllPendingTasks(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        killAllPendingTasksWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/tasks/pending
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func killAllPendingTasksWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/2/tasks/pending"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func killTask( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        killTaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/tasks/{id}/kill
     - ### Required permissions    * User account permission: `tasks:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<Void> 
     */
    open class func killTaskWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/2/tasks/{id}/kill"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this job. 
     - parameter jobPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Job>
     */
    open class func patchJob( id: Int,  jobPartialUpdate: JobPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Job> {
        let deferred = Promise<Job>.pending()
        patchJobWithRequestBuilder(id: id, jobPartialUpdate: jobPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this job. 
     - parameter jobPartialUpdate: (body)  
     - returns: RequestBuilder<Job> 
     */
    open class func patchJobWithRequestBuilder(id: Int, jobPartialUpdate: JobPartialUpdate) -> RequestBuilder<Job> {
        var path = "/api/2/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobPartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Job>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter schedulePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Schedule>
     */
    open class func patchSchedule( id: Int,  schedulePartialUpdate: SchedulePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Schedule> {
        let deferred = Promise<Schedule>.pending()
        patchScheduleWithRequestBuilder(id: id, schedulePartialUpdate: schedulePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/schedules/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter schedulePartialUpdate: (body)  
     - returns: RequestBuilder<Schedule> 
     */
    open class func patchScheduleWithRequestBuilder(id: Int, schedulePartialUpdate: SchedulePartialUpdate) -> RequestBuilder<Schedule> {
        var path = "/api/2/schedules/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: schedulePartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Schedule>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter subtaskPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subtask>
     */
    open class func patchSubtask( id: Int,  subtaskPartialUpdate: SubtaskPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Subtask> {
        let deferred = Promise<Subtask>.pending()
        patchSubtaskWithRequestBuilder(id: id, subtaskPartialUpdate: subtaskPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/subtasks/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter subtaskPartialUpdate: (body)  
     - returns: RequestBuilder<Subtask> 
     */
    open class func patchSubtaskWithRequestBuilder(id: Int, subtaskPartialUpdate: SubtaskPartialUpdate) -> RequestBuilder<Subtask> {
        var path = "/api/2/subtasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtaskPartialUpdate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subtask>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this task info. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func restartTask( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        restartTaskWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/tasks/{id}/restart
     - ### Required permissions    * User account permission: `tasks:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique value identifying this task info. 
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func restartTaskWithRequestBuilder(id: String) -> RequestBuilder<TaskInfo> {
        var path = "/api/2/tasks/{id}/restart"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this job. 
     - parameter startJobRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func startJob( id: Int,  startJobRequest: StartJobRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        startJobWithRequestBuilder(id: id, startJobRequest: startJobRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/jobs/{id}/start
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this job. 
     - parameter startJobRequest: (body)  
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func startJobWithRequestBuilder(id: Int, startJobRequest: StartJobRequest) -> RequestBuilder<[TaskInfo]> {
        var path = "/api/2/jobs/{id}/start"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: startJobRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter startTaskRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func startTask( startTaskRequest: StartTaskRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        startTaskWithRequestBuilder(startTaskRequest: startTaskRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/tasks/start
     - ### Required permissions    * User account permission: `tasks:manage` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter startTaskRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func startTaskWithRequestBuilder(startTaskRequest: StartTaskRequest) -> RequestBuilder<TaskInfo> {
        let path = "/api/2/tasks/start"
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: startTaskRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this job. 
     - parameter job: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Job>
     */
    open class func updateJob( id: Int,  job: Job, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Job> {
        let deferred = Promise<Job>.pending()
        updateJobWithRequestBuilder(id: id, job: job).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/jobs/{id}
     - ### Required permissions    * User account permission: `None` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this job. 
     - parameter job: (body)  
     - returns: RequestBuilder<Job> 
     */
    open class func updateJobWithRequestBuilder(id: Int, job: Job) -> RequestBuilder<Job> {
        var path = "/api/2/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: job)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Job>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter schedule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Schedule>
     */
    open class func updateSchedule( id: Int,  schedule: Schedule, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Schedule> {
        let deferred = Promise<Schedule>.pending()
        updateScheduleWithRequestBuilder(id: id, schedule: schedule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/schedules/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this schedule. 
     - parameter schedule: (body)  
     - returns: RequestBuilder<Schedule> 
     */
    open class func updateScheduleWithRequestBuilder(id: Int, schedule: Schedule) -> RequestBuilder<Schedule> {
        var path = "/api/2/schedules/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: schedule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Schedule>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter subtask: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subtask>
     */
    open class func updateSubtask( id: Int,  subtask: Subtask, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Subtask> {
        let deferred = Promise<Subtask>.pending()
        updateSubtaskWithRequestBuilder(id: id, subtask: subtask).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/subtasks/{id}
     - ### Required permissions    * User account permission: `tasks:view` (read) / `tasks:manage` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subtask. 
     - parameter subtask: (body)  
     - returns: RequestBuilder<Subtask> 
     */
    open class func updateSubtaskWithRequestBuilder(id: Int, subtask: Subtask) -> RequestBuilder<Subtask> {
        var path = "/api/2/subtasks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = ElementsSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subtask)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Subtask>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
