//
// PrivateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PrivateAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<BootstrapData>
     */
    open class func callGet(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<BootstrapData> {
        let deferred = Promise<BootstrapData>.pending()
        callGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/bootstrap
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<BootstrapData> 
     */
    open class func callGetWithRequestBuilder() -> RequestBuilder<BootstrapData> {
        let localVariablePath = "/api/2/private/bootstrap"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BootstrapData>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteStoredImage( name: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteStoredImageWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/image/{name}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteStoredImageWithRequestBuilder(name: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/image/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter tdoId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteVeritoneTDO( id: Int,  tdoId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteVeritoneTDOWithRequestBuilder(id: id, tdoId: tdoId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/veritone/connections/{id}/tdo/{tdo_id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter tdoId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteVeritoneTDOWithRequestBuilder(id: Int, tdoId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/veritone/connections/{id}/tdo/{tdo_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let tdoIdPreEscape = "\(APIHelper.mapValueToPathItem(tdoId))"
        let tdoIdPostEscape = tdoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tdo_id}", with: tdoIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter rootId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func exportNonProxiedAssets( rootId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        exportNonProxiedAssetsWithRequestBuilder(rootId: rootId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/export/non-proxied/{root_id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter rootId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func exportNonProxiedAssetsWithRequestBuilder(rootId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/private/export/non-proxied/{root_id}"
        let rootIdPreEscape = "\(APIHelper.mapValueToPathItem(rootId))"
        let rootIdPostEscape = rootIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{root_id}", with: rootIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter path: (path)  
     - parameter rootId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func exportNonProxiedAssetsForPath( path: String,  rootId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        exportNonProxiedAssetsForPathWithRequestBuilder(path: path, rootId: rootId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/export/non-proxied/{root_id}/{path}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter path: (path)  
     - parameter rootId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func exportNonProxiedAssetsForPathWithRequestBuilder(path: String, rootId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/private/export/non-proxied/{root_id}/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let rootIdPreEscape = "\(APIHelper.mapValueToPathItem(rootId))"
        let rootIdPostEscape = rootIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{root_id}", with: rootIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter rootId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func exportUpdates( rootId: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        exportUpdatesWithRequestBuilder(rootId: rootId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/export/updates/{root_id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter rootId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func exportUpdatesWithRequestBuilder(rootId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/private/export/updates/{root_id}"
        let rootIdPreEscape = "\(APIHelper.mapValueToPathItem(rootId))"
        let rootIdPostEscape = rootIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{root_id}", with: rootIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[VeritoneConnection]>
     */
    open class func getAllVeritoneConnections( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[VeritoneConnection]> {
        let deferred = Promise<[VeritoneConnection]>.pending()
        getAllVeritoneConnectionsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/connections
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[VeritoneConnection]> 
     */
    open class func getAllVeritoneConnectionsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[VeritoneConnection]> {
        let localVariablePath = "/api/2/veritone/connections"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VeritoneConnection]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter isParsed: (query) Filter the returned list by &#x60;is_parsed&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[VeritoneMetadata]>
     */
    open class func getAllVeritoneMetadata( asset: Double? = nil,  isParsed: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[VeritoneMetadata]> {
        let deferred = Promise<[VeritoneMetadata]>.pending()
        getAllVeritoneMetadataWithRequestBuilder(asset: asset, isParsed: isParsed, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/metadata
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter isParsed: (query) Filter the returned list by &#x60;is_parsed&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[VeritoneMetadata]> 
     */
    open class func getAllVeritoneMetadataWithRequestBuilder(asset: Double? = nil, isParsed: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[VeritoneMetadata]> {
        let localVariablePath = "/api/2/veritone/metadata"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "is_parsed": isParsed?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VeritoneMetadata]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientSidePathEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ClientSidePathEndpointResponse>
     */
    open class func getClientSideURL( clientSidePathEndpointRequest: ClientSidePathEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ClientSidePathEndpointResponse> {
        let deferred = Promise<ClientSidePathEndpointResponse>.pending()
        getClientSideURLWithRequestBuilder(clientSidePathEndpointRequest: clientSidePathEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/client-side-url
     - ### Required permissions    * User account permission: `client:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter clientSidePathEndpointRequest: (body)  
     - returns: RequestBuilder<ClientSidePathEndpointResponse> 
     */
    open class func getClientSideURLWithRequestBuilder(clientSidePathEndpointRequest: ClientSidePathEndpointRequest) -> RequestBuilder<ClientSidePathEndpointResponse> {
        let localVariablePath = "/api/2/private/client-side-url"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clientSidePathEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientSidePathEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<HelpEndpointResponse>
     */
    open class func getHelpPage( id: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<HelpEndpointResponse> {
        let deferred = Promise<HelpEndpointResponse>.pending()
        getHelpPageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/help/{id}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<HelpEndpointResponse> 
     */
    open class func getHelpPageWithRequestBuilder(id: String) -> RequestBuilder<HelpEndpointResponse> {
        var localVariablePath = "/api/2/help/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HelpEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter lang: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<LocaleEndpointResponse>
     */
    open class func getLocale( lang: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<LocaleEndpointResponse> {
        let deferred = Promise<LocaleEndpointResponse>.pending()
        getLocaleWithRequestBuilder(lang: lang).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/locale/{lang}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter lang: (path)  
     - returns: RequestBuilder<LocaleEndpointResponse> 
     */
    open class func getLocaleWithRequestBuilder(lang: String) -> RequestBuilder<LocaleEndpointResponse> {
        var localVariablePath = "/api/2/private/locale/{lang}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocaleEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyFSSizeEndpointResponse>
     */
    open class func getProxyFSSize(apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<ProxyFSSizeEndpointResponse> {
        let deferred = Promise<ProxyFSSizeEndpointResponse>.pending()
        getProxyFSSizeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/private/media/proxyfs-size
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<ProxyFSSizeEndpointResponse> 
     */
    open class func getProxyFSSizeWithRequestBuilder() -> RequestBuilder<ProxyFSSizeEndpointResponse> {
        let localVariablePath = "/api/2/private/media/proxyfs-size"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyFSSizeEndpointResponse>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getStoredImage( name: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getStoredImageWithRequestBuilder(name: name).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/image/{name}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getStoredImageWithRequestBuilder(name: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/image/{name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VeritoneConnection>
     */
    open class func getVeritoneConnection( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<VeritoneConnection> {
        let deferred = Promise<VeritoneConnection>.pending()
        getVeritoneConnectionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/connections/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - returns: RequestBuilder<VeritoneConnection> 
     */
    open class func getVeritoneConnectionWithRequestBuilder(id: Int) -> RequestBuilder<VeritoneConnection> {
        var localVariablePath = "/api/2/veritone/connections/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VeritoneConnection>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VeritoneEngineList>
     */
    open class func getVeritoneEngines( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<VeritoneEngineList> {
        let deferred = Promise<VeritoneEngineList>.pending()
        getVeritoneEnginesWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/connections/{id}/engines
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - returns: RequestBuilder<VeritoneEngineList> 
     */
    open class func getVeritoneEnginesWithRequestBuilder(id: Int) -> RequestBuilder<VeritoneEngineList> {
        var localVariablePath = "/api/2/veritone/connections/{id}/engines"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VeritoneEngineList>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VeritoneJobList>
     */
    open class func getVeritoneJobs( id: Int,  offset: Int? = nil,  limit: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<VeritoneJobList> {
        let deferred = Promise<VeritoneJobList>.pending()
        getVeritoneJobsWithRequestBuilder(id: id, offset: offset, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/connections/{id}/jobs
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<VeritoneJobList> 
     */
    open class func getVeritoneJobsWithRequestBuilder(id: Int, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<VeritoneJobList> {
        var localVariablePath = "/api/2/veritone/connections/{id}/jobs"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VeritoneJobList>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone metadata. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VeritoneMetadata>
     */
    open class func getVeritoneMetadata( id: Int, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<VeritoneMetadata> {
        let deferred = Promise<VeritoneMetadata>.pending()
        getVeritoneMetadataWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/veritone/metadata/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone metadata. 
     - returns: RequestBuilder<VeritoneMetadata> 
     */
    open class func getVeritoneMetadataWithRequestBuilder(id: Int) -> RequestBuilder<VeritoneMetadata> {
        var localVariablePath = "/api/2/veritone/metadata/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VeritoneMetadata>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter installLicenseEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func installLicense( installLicenseEndpointRequest: InstallLicenseEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        installLicenseWithRequestBuilder(installLicenseEndpointRequest: installLicenseEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/license/install
     - ### Required permissions    * User account permission: `system:admin-access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter installLicenseEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func installLicenseWithRequestBuilder(installLicenseEndpointRequest: InstallLicenseEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/license/install"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: installLicenseEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter language: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[String: AnyCodable]>
     */
    open class func languageServerRequest( language: String, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[String: AnyCodable]> {
        let deferred = Promise<[String: AnyCodable]>.pending()
        languageServerRequestWithRequestBuilder(language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/language-server/{language}
     - ### Required permissions    * User account permission: `system:admin-access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter language: (path)  
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func languageServerRequestWithRequestBuilder(language: String) -> RequestBuilder<[String: AnyCodable]> {
        var localVariablePath = "/api/2/language-server/{language}"
        let languagePreEscape = "\(APIHelper.mapValueToPathItem(language))"
        let languagePostEscape = languagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{language}", with: languagePostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter locateEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<LocateResult>
     */
    open class func locateFile( locateEndpointRequest: LocateEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<LocateResult> {
        let deferred = Promise<LocateResult>.pending()
        locateFileWithRequestBuilder(locateEndpointRequest: locateEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/locate
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter locateEndpointRequest: (body)  
     - returns: RequestBuilder<LocateResult> 
     */
    open class func locateFileWithRequestBuilder(locateEndpointRequest: LocateEndpointRequest) -> RequestBuilder<LocateResult> {
        let localVariablePath = "/api/2/private/locate"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: locateEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LocateResult>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter locateProxiesEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[LocateProxiesEndpointResponse]>
     */
    open class func locateProxies( locateProxiesEndpointRequest: LocateProxiesEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<[LocateProxiesEndpointResponse]> {
        let deferred = Promise<[LocateProxiesEndpointResponse]>.pending()
        locateProxiesWithRequestBuilder(locateProxiesEndpointRequest: locateProxiesEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/panel/locate-proxies
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter locateProxiesEndpointRequest: (body)  
     - returns: RequestBuilder<[LocateProxiesEndpointResponse]> 
     */
    open class func locateProxiesWithRequestBuilder(locateProxiesEndpointRequest: LocateProxiesEndpointRequest) -> RequestBuilder<[LocateProxiesEndpointResponse]> {
        let localVariablePath = "/api/2/panel/locate-proxies"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: locateProxiesEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LocateProxiesEndpointResponse]>.Type = ElementsSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uploadImageEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func uploadStoredImage( uploadImageEndpointRequest: UploadImageEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        uploadStoredImageWithRequestBuilder(uploadImageEndpointRequest: uploadImageEndpointRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/private/images/upload
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter uploadImageEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func uploadStoredImageWithRequestBuilder(uploadImageEndpointRequest: UploadImageEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/private/images/upload"
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadImageEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter veritoneUploadRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func uploadToVeritone( id: Int,  veritoneUploadRequest: VeritoneUploadRequest, apiResponseQueue: DispatchQueue = ElementsSDKAPI.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        uploadToVeritoneWithRequestBuilder(id: id, veritoneUploadRequest: veritoneUploadRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/veritone/connections/{id}/upload
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Veritone connection. 
     - parameter veritoneUploadRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func uploadToVeritoneWithRequestBuilder(id: Int, veritoneUploadRequest: VeritoneUploadRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/veritone/connections/{id}/upload"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: veritoneUploadRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
