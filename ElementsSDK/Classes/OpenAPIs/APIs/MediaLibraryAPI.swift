//
// MediaLibraryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MediaLibraryAPI {

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func bookmarkMediaDirectory( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        bookmarkMediaDirectoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/{id}/bookmark
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func bookmarkMediaDirectoryWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func clearSubclipClipboard(apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        clearSubclipClipboardWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/subclips/clipboard/clear
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func clearSubclipClipboardWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/media/subclips/clipboard/clear"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter multipleAssetsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func combineAssetsIntoSet( multipleAssetsRequest: MultipleAssetsRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        combineAssetsIntoSetWithRequestBuilder(multipleAssetsRequest: multipleAssetsRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/assets/combine
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter multipleAssetsRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func combineAssetsIntoSetWithRequestBuilder(multipleAssetsRequest: MultipleAssetsRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/media/assets/combine"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: multipleAssetsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Asset>
     */
    open class func createAsset( asset: Asset, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Asset> {
        let deferred = Promise<Asset>.pending()
        createAssetWithRequestBuilder(asset: asset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/assets
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (body)  
     - returns: RequestBuilder<Asset> 
     */
    open class func createAssetWithRequestBuilder(asset: Asset) -> RequestBuilder<Asset> {
        let localVariablePath = "/api/2/media/assets"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: asset)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Asset>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetRating: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AssetRating>
     */
    open class func createAssetRating( assetRating: AssetRating, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<AssetRating> {
        let deferred = Promise<AssetRating>.pending()
        createAssetRatingWithRequestBuilder(assetRating: assetRating).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/ratings
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter assetRating: (body)  
     - returns: RequestBuilder<AssetRating> 
     */
    open class func createAssetRatingWithRequestBuilder(assetRating: AssetRating) -> RequestBuilder<AssetRating> {
        let localVariablePath = "/api/2/media/ratings"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetRating)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetRating>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter comment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func createComment( comment: Comment, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        createCommentWithRequestBuilder(comment: comment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/comments
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter comment: (body)  
     - returns: RequestBuilder<Comment> 
     */
    open class func createCommentWithRequestBuilder(comment: Comment) -> RequestBuilder<Comment> {
        let localVariablePath = "/api/2/media/comments"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: comment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter customField: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<CustomField>
     */
    open class func createCustomField( customField: CustomField, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<CustomField> {
        let deferred = Promise<CustomField>.pending()
        createCustomFieldWithRequestBuilder(customField: customField).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/custom-fields
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter customField: (body)  
     - returns: RequestBuilder<CustomField> 
     */
    open class func createCustomFieldWithRequestBuilder(customField: CustomField) -> RequestBuilder<CustomField> {
        let localVariablePath = "/api/2/media/custom-fields"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customField)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomField>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter editorProject: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<EditorProject>
     */
    open class func createEditorProject( editorProject: EditorProject, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<EditorProject> {
        let deferred = Promise<EditorProject>.pending()
        createEditorProjectWithRequestBuilder(editorProject: editorProject).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/editor
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter editorProject: (body)  
     - returns: RequestBuilder<EditorProject> 
     */
    open class func createEditorProjectWithRequestBuilder(editorProject: EditorProject) -> RequestBuilder<EditorProject> {
        let localVariablePath = "/api/2/media/editor"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editorProject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EditorProject>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter externalTranscoder: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ExternalTranscoder>
     */
    open class func createExternalTranscoder( externalTranscoder: ExternalTranscoder, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ExternalTranscoder> {
        let deferred = Promise<ExternalTranscoder>.pending()
        createExternalTranscoderWithRequestBuilder(externalTranscoder: externalTranscoder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/external-transcoders
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter externalTranscoder: (body)  
     - returns: RequestBuilder<ExternalTranscoder> 
     */
    open class func createExternalTranscoderWithRequestBuilder(externalTranscoder: ExternalTranscoder) -> RequestBuilder<ExternalTranscoder> {
        let localVariablePath = "/api/2/media/external-transcoders"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: externalTranscoder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalTranscoder>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter marker: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Marker>
     */
    open class func createMarker( marker: Marker, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Marker> {
        let deferred = Promise<Marker>.pending()
        createMarkerWithRequestBuilder(marker: marker).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/markers
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter marker: (body)  
     - returns: RequestBuilder<Marker> 
     */
    open class func createMarkerWithRequestBuilder(marker: Marker) -> RequestBuilder<Marker> {
        let localVariablePath = "/api/2/media/markers"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: marker)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Marker>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter mediaFileTemplate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileTemplate>
     */
    open class func createMediaFileTemplate( mediaFileTemplate: MediaFileTemplate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileTemplate> {
        let deferred = Promise<MediaFileTemplate>.pending()
        createMediaFileTemplateWithRequestBuilder(mediaFileTemplate: mediaFileTemplate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/templates
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter mediaFileTemplate: (body)  
     - returns: RequestBuilder<MediaFileTemplate> 
     */
    open class func createMediaFileTemplateWithRequestBuilder(mediaFileTemplate: MediaFileTemplate) -> RequestBuilder<MediaFileTemplate> {
        let localVariablePath = "/api/2/media/files/templates"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaFileTemplate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileTemplate>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter mediaRoot: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRoot>
     */
    open class func createMediaRoot( mediaRoot: MediaRoot, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRoot> {
        let deferred = Promise<MediaRoot>.pending()
        createMediaRootWithRequestBuilder(mediaRoot: mediaRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/roots
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter mediaRoot: (body)  
     - returns: RequestBuilder<MediaRoot> 
     */
    open class func createMediaRootWithRequestBuilder(mediaRoot: MediaRoot) -> RequestBuilder<MediaRoot> {
        let localVariablePath = "/api/2/media/roots"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRoot)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRoot>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter mediaRootPermission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRootPermission>
     */
    open class func createMediaRootPermission( mediaRootPermission: MediaRootPermission, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRootPermission> {
        let deferred = Promise<MediaRootPermission>.pending()
        createMediaRootPermissionWithRequestBuilder(mediaRootPermission: mediaRootPermission).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/root-permissions
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter mediaRootPermission: (body)  
     - returns: RequestBuilder<MediaRootPermission> 
     */
    open class func createMediaRootPermissionWithRequestBuilder(mediaRootPermission: MediaRootPermission) -> RequestBuilder<MediaRootPermission> {
        let localVariablePath = "/api/2/media/root-permissions"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRootPermission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRootPermission>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter unfilteredTag: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<UnfilteredTag>
     */
    open class func createMediaTag( unfilteredTag: UnfilteredTag, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<UnfilteredTag> {
        let deferred = Promise<UnfilteredTag>.pending()
        createMediaTagWithRequestBuilder(unfilteredTag: unfilteredTag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/tags
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter unfilteredTag: (body)  
     - returns: RequestBuilder<UnfilteredTag> 
     */
    open class func createMediaTagWithRequestBuilder(unfilteredTag: UnfilteredTag) -> RequestBuilder<UnfilteredTag> {
        let localVariablePath = "/api/2/media/tags"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unfilteredTag)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnfilteredTag>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter proxyProfile: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyProfile>
     */
    open class func createProxyProfile( proxyProfile: ProxyProfile, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyProfile> {
        let deferred = Promise<ProxyProfile>.pending()
        createProxyProfileWithRequestBuilder(proxyProfile: proxyProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/proxy-profiles
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter proxyProfile: (body)  
     - returns: RequestBuilder<ProxyProfile> 
     */
    open class func createProxyProfileWithRequestBuilder(proxyProfile: ProxyProfile) -> RequestBuilder<ProxyProfile> {
        let localVariablePath = "/api/2/media/proxy-profiles"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProfile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProfile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter subclip: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subclip>
     */
    open class func createSubclip( subclip: Subclip, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Subclip> {
        let deferred = Promise<Subclip>.pending()
        createSubclipWithRequestBuilder(subclip: subclip).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/subclips
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter subclip: (body)  
     - returns: RequestBuilder<Subclip> 
     */
    open class func createSubclipWithRequestBuilder(subclip: Subclip) -> RequestBuilder<Subclip> {
        let localVariablePath = "/api/2/media/subclips"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subclip)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subclip>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter subclipClipboardEntry: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<SubclipClipboardEntry>
     */
    open class func createSubclipClipboardEntry( subclipClipboardEntry: SubclipClipboardEntry, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<SubclipClipboardEntry> {
        let deferred = Promise<SubclipClipboardEntry>.pending()
        createSubclipClipboardEntryWithRequestBuilder(subclipClipboardEntry: subclipClipboardEntry).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/subclips/clipboard
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter subclipClipboardEntry: (body)  
     - returns: RequestBuilder<SubclipClipboardEntry> 
     */
    open class func createSubclipClipboardEntryWithRequestBuilder(subclipClipboardEntry: SubclipClipboardEntry) -> RequestBuilder<SubclipClipboardEntry> {
        let localVariablePath = "/api/2/media/subclips/clipboard"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subclipClipboardEntry)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SubclipClipboardEntry>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAsset( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAssetWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/assets/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Asset. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAssetWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/assets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAssetRating( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAssetRatingWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/ratings/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Rating. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAssetRatingWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/ratings/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteComment( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteCommentWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/comments/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCommentWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/comments/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteCustomField( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteCustomFieldWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/custom-fields/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Custom field. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCustomFieldWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/custom-fields/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Bundle. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteEasySharingTokenForBundle( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteEasySharingTokenForBundleWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/bundles/{id}/easy-sharing-token
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Bundle. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEasySharingTokenForBundleWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/bundles/{id}/easy-sharing-token"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteEasySharingTokenForDirectory( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteEasySharingTokenForDirectoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/files/{id}/easy-sharing-token
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEasySharingTokenForDirectoryWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/easy-sharing-token"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteExternalTranscoder( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteExternalTranscoderWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/external-transcoders/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalTranscoderWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/external-transcoders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMarker( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMarkerWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/markers/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this marker. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMarkerWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/markers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMediaFileTemplate( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMediaFileTemplateWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/files/templates/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Template. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMediaFileTemplateWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/templates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter mediaLibraryDeleteRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func deleteMediaLibraryObjects( mediaLibraryDeleteRequest: MediaLibraryDeleteRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        deleteMediaLibraryObjectsWithRequestBuilder(mediaLibraryDeleteRequest: mediaLibraryDeleteRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/delete
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter mediaLibraryDeleteRequest: (body)  
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func deleteMediaLibraryObjectsWithRequestBuilder(mediaLibraryDeleteRequest: MediaLibraryDeleteRequest) -> RequestBuilder<[TaskInfo]> {
        let localVariablePath = "/api/2/media/delete"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaLibraryDeleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMediaRoot( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMediaRootWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/roots/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this media root. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMediaRootWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/roots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMediaRootPermission( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMediaRootPermissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/root-permissions/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMediaRootPermissionWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/root-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMediaTag( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMediaTagWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/tags/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Tag. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMediaTagWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/tags/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteMediaUpdate( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteMediaUpdateWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/updates/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:updates:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Update. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMediaUpdateWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/updates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteProxy( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteProxyWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/proxies/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProxyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/proxies/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteProxyProfile( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteProxyProfileWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/proxy-profiles/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProxyProfileWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/proxy-profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteSubclip( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteSubclipWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/subclips/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubclipWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/subclips/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip clipboard entry. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteSubclipClipboardEntry( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteSubclipClipboardEntryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/subclips/clipboard/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip clipboard entry. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubclipClipboardEntryWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/subclips/clipboard/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter scannerDiscoverEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFile>
     */
    open class func discoverMedia( scannerDiscoverEndpointRequest: ScannerDiscoverEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFile> {
        let deferred = Promise<MediaFile>.pending()
        discoverMediaWithRequestBuilder(scannerDiscoverEndpointRequest: scannerDiscoverEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/scanner/discover
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter scannerDiscoverEndpointRequest: (body)  
     - returns: RequestBuilder<MediaFile> 
     */
    open class func discoverMediaWithRequestBuilder(scannerDiscoverEndpointRequest: ScannerDiscoverEndpointRequest) -> RequestBuilder<MediaFile> {
        let localVariablePath = "/api/2/scanner/discover"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scannerDiscoverEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter filename: (path)  
     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func downloadAssetProxyFile( filename: String,  id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        downloadAssetProxyFileWithRequestBuilder(filename: filename, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets/{id}/proxy-files/{filename}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter filename: (path)  
     - parameter id: (path) A unique integer value identifying this Asset. 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadAssetProxyFileWithRequestBuilder(filename: String, id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/assets/{id}/proxy-files/{filename}"
        let filenamePreEscape = "\(APIHelper.mapValueToPathItem(filename))"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filename}", with: filenamePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func downloadMediaFile( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        downloadMediaFileWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/{id}/download
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadMediaFileWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/download"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func downloadProxy( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        downloadProxyWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxies/{id}/download
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy. 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadProxyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/proxies/{id}/download"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIds: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func editorExportXMLForAssset( assetIds: String,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        editorExportXMLForAsssetWithRequestBuilder(assetIds: assetIds, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/asset/{asset_ids}/xml-export
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter assetIds: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func editorExportXMLForAsssetWithRequestBuilder(assetIds: String, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/editor/asset/{asset_ids}/xml-export"
        let assetIdsPreEscape = "\(APIHelper.mapValueToPathItem(assetIds))"
        let assetIdsPostEscape = assetIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_ids}", with: assetIdsPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter bundleIds: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func editorExportXMLForBundle( bundleIds: String,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        editorExportXMLForBundleWithRequestBuilder(bundleIds: bundleIds, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/bundle/{bundle_ids}/xml-export
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter bundleIds: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func editorExportXMLForBundleWithRequestBuilder(bundleIds: String, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/editor/bundle/{bundle_ids}/xml-export"
        let bundleIdsPreEscape = "\(APIHelper.mapValueToPathItem(bundleIds))"
        let bundleIdsPostEscape = bundleIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{bundle_ids}", with: bundleIdsPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func editorExportXMLForProject( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        editorExportXMLForProjectWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/{id}/xml-export
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func editorExportXMLForProjectWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/editor/{id}/xml-export"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetId: (path)  
     - parameter exportFormat: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func exportCommentsForAvid( assetId: String,  exportFormat: String,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        exportCommentsForAvidWithRequestBuilder(assetId: assetId, exportFormat: exportFormat, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/asset/{asset_id}/{export_format}-export/avid-comments
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter assetId: (path)  
     - parameter exportFormat: (path)  
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func exportCommentsForAvidWithRequestBuilder(assetId: String, exportFormat: String, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/editor/asset/{asset_id}/{export_format}-export/avid-comments"
        let assetIdPreEscape = "\(APIHelper.mapValueToPathItem(assetId))"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_id}", with: assetIdPostEscape, options: .literal, range: nil)
        let exportFormatPreEscape = "\(APIHelper.mapValueToPathItem(exportFormat))"
        let exportFormatPostEscape = exportFormatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{export_format}", with: exportFormatPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter timelineExportRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func exportEditorTimeline( timelineExportRequest: TimelineExportRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        exportEditorTimelineWithRequestBuilder(timelineExportRequest: timelineExportRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/editor/timeline-export
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter timelineExportRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func exportEditorTimelineWithRequestBuilder(timelineExportRequest: TimelineExportRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/media/editor/timeline-export"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: timelineExportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func forgetDeletedMediaFiles( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        forgetDeletedMediaFilesWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/{id}/forget-deleted
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func forgetDeletedMediaFilesWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/forget-deleted"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter generateProxiesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TaskInfo]>
     */
    open class func generateProxies( generateProxiesRequest: GenerateProxiesRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[TaskInfo]> {
        let deferred = Promise<[TaskInfo]>.pending()
        generateProxiesWithRequestBuilder(generateProxiesRequest: generateProxiesRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/proxies
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter generateProxiesRequest: (body)  
     - returns: RequestBuilder<[TaskInfo]> 
     */
    open class func generateProxiesWithRequestBuilder(generateProxiesRequest: GenerateProxiesRequest) -> RequestBuilder<[TaskInfo]> {
        let localVariablePath = "/api/2/media/proxies"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateProxiesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TaskInfo]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter project: (query) Filter the returned list by &#x60;project&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AssetProjectLink]>
     */
    open class func getAllAssetProjectLinks( asset: String? = nil,  project: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[AssetProjectLink]> {
        let deferred = Promise<[AssetProjectLink]>.pending()
        getAllAssetProjectLinksWithRequestBuilder(asset: asset, project: project, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets/project-links
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter project: (query) Filter the returned list by &#x60;project&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AssetProjectLink]> 
     */
    open class func getAllAssetProjectLinksWithRequestBuilder(asset: String? = nil, project: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AssetProjectLink]> {
        let localVariablePath = "/api/2/media/assets/project-links"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "project": project?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetProjectLink]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AssetRating]>
     */
    open class func getAllAssetRatings( user: String? = nil,  asset: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[AssetRating]> {
        let deferred = Promise<[AssetRating]>.pending()
        getAllAssetRatingsWithRequestBuilder(user: user, asset: asset, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/ratings
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AssetRating]> 
     */
    open class func getAllAssetRatingsWithRequestBuilder(user: String? = nil, asset: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AssetRating]> {
        let localVariablePath = "/api/2/media/ratings"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user": user?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetRating]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AssetBackup]>
     */
    open class func getAllAssetTapeBackups( asset: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  includeAsset: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[AssetBackup]> {
        let deferred = Promise<[AssetBackup]>.pending()
        getAllAssetTapeBackupsWithRequestBuilder(asset: asset, ordering: ordering, limit: limit, offset: offset, includeAsset: includeAsset, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/backups
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<[AssetBackup]> 
     */
    open class func getAllAssetTapeBackupsWithRequestBuilder(asset: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, includeAsset: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<[AssetBackup]> {
        let localVariablePath = "/api/2/media/backups"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "include_asset": includeAsset?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetBackup]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter syncId: (query) Filter the returned list by &#x60;sync_id&#x60;. (optional)
     - parameter displayName: (query) Filter the returned list by &#x60;display_name&#x60;. (optional)
     - parameter _set: (query) Filter the returned list by &#x60;set&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter resolveAssetPermission: (query)  (optional)
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Asset]>
     */
    open class func getAllAssets( syncId: String? = nil,  displayName: String? = nil,  _set: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  includeProxies: Bool? = nil,  includeModifiedBy: Bool? = nil,  resolveAssetPermission: Bool? = nil,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[Asset]> {
        let deferred = Promise<[Asset]>.pending()
        getAllAssetsWithRequestBuilder(syncId: syncId, displayName: displayName, _set: _set, ordering: ordering, limit: limit, offset: offset, includeProxies: includeProxies, includeModifiedBy: includeModifiedBy, resolveAssetPermission: resolveAssetPermission, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter syncId: (query) Filter the returned list by &#x60;sync_id&#x60;. (optional)
     - parameter displayName: (query) Filter the returned list by &#x60;display_name&#x60;. (optional)
     - parameter _set: (query) Filter the returned list by &#x60;set&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter resolveAssetPermission: (query)  (optional)
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<[Asset]> 
     */
    open class func getAllAssetsWithRequestBuilder(syncId: String? = nil, displayName: String? = nil, _set: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, includeProxies: Bool? = nil, includeModifiedBy: Bool? = nil, resolveAssetPermission: Bool? = nil, forRoot: Int? = nil) -> RequestBuilder<[Asset]> {
        let localVariablePath = "/api/2/media/assets"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sync_id": syncId?.encodeToJSON(),
            "display_name": displayName?.encodeToJSON(),
            "set": _set?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "include_proxies": includeProxies?.encodeToJSON(),
            "include_modified_by": includeModifiedBy?.encodeToJSON(),
            "resolve_asset_permission": resolveAssetPermission?.encodeToJSON(),
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Asset]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter root: (path)  
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter location: (query) Filter the returned list by &#x60;location&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFileBundle]>
     */
    open class func getAllBundlesForMediaRoot( root: String,  asset: String? = nil,  location: String? = nil,  sharedViaTokens: String? = nil,  sharedViaTokensToken: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFileBundle]> {
        let deferred = Promise<[MediaFileBundle]>.pending()
        getAllBundlesForMediaRootWithRequestBuilder(root: root, asset: asset, location: location, sharedViaTokens: sharedViaTokens, sharedViaTokensToken: sharedViaTokensToken, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/bundles/flat/{root}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter root: (path)  
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter location: (query) Filter the returned list by &#x60;location&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaFileBundle]> 
     */
    open class func getAllBundlesForMediaRootWithRequestBuilder(root: String, asset: String? = nil, location: String? = nil, sharedViaTokens: String? = nil, sharedViaTokensToken: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaFileBundle]> {
        var localVariablePath = "/api/2/media/bundles/flat/{root}"
        let rootPreEscape = "\(APIHelper.mapValueToPathItem(root))"
        let rootPostEscape = rootPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{root}", with: rootPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "location": location?.encodeToJSON(),
            "shared_via_tokens": sharedViaTokens?.encodeToJSON(),
            "shared_via_tokens__token": sharedViaTokensToken?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFileBundle]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter connection: (query) Filter the returned list by &#x60;connection&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[AssetCloudLink]>
     */
    open class func getAllClickLinks( asset: String? = nil,  connection: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[AssetCloudLink]> {
        let deferred = Promise<[AssetCloudLink]>.pending()
        getAllClickLinksWithRequestBuilder(asset: asset, connection: connection, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets/click-links
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter connection: (query) Filter the returned list by &#x60;connection&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[AssetCloudLink]> 
     */
    open class func getAllClickLinksWithRequestBuilder(asset: String? = nil, connection: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AssetCloudLink]> {
        let localVariablePath = "/api/2/media/assets/click-links"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "connection": connection?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AssetCloudLink]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - parameter tasksForUser: (query)  (optional)
     - parameter includeFullAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Comment]>
     */
    open class func getAllComments( asset: String? = nil,  root: String? = nil,  user: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  forRoot: Int? = nil,  tasksForUser: Int? = nil,  includeFullAsset: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[Comment]> {
        let deferred = Promise<[Comment]>.pending()
        getAllCommentsWithRequestBuilder(asset: asset, root: root, user: user, ordering: ordering, limit: limit, offset: offset, forRoot: forRoot, tasksForUser: tasksForUser, includeFullAsset: includeFullAsset, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/comments
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - parameter tasksForUser: (query)  (optional)
     - parameter includeFullAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<[Comment]> 
     */
    open class func getAllCommentsWithRequestBuilder(asset: String? = nil, root: String? = nil, user: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, forRoot: Int? = nil, tasksForUser: Int? = nil, includeFullAsset: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<[Comment]> {
        let localVariablePath = "/api/2/media/comments"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "root": root?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "for_root": forRoot?.encodeToJSON(),
            "tasks_for_user": tasksForUser?.encodeToJSON(),
            "include_full_asset": includeFullAsset?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Comment]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[CustomField]>
     */
    open class func getAllCustomFields( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[CustomField]> {
        let deferred = Promise<[CustomField]>.pending()
        getAllCustomFieldsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/custom-fields
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[CustomField]> 
     */
    open class func getAllCustomFieldsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[CustomField]> {
        let localVariablePath = "/api/2/media/custom-fields"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CustomField]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ExternalTranscoder]>
     */
    open class func getAllExternalTranscoders( name: String? = nil,  id: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[ExternalTranscoder]> {
        let deferred = Promise<[ExternalTranscoder]>.pending()
        getAllExternalTranscodersWithRequestBuilder(name: name, id: id, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/external-transcoders
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[ExternalTranscoder]> 
     */
    open class func getAllExternalTranscodersWithRequestBuilder(name: String? = nil, id: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[ExternalTranscoder]> {
        let localVariablePath = "/api/2/media/external-transcoders"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExternalTranscoder]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Marker]>
     */
    open class func getAllMarkers( asset: String? = nil,  user: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[Marker]> {
        let deferred = Promise<[Marker]>.pending()
        getAllMarkersWithRequestBuilder(asset: asset, user: user, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/markers
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Marker]> 
     */
    open class func getAllMarkersWithRequestBuilder(asset: String? = nil, user: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Marker]> {
        let localVariablePath = "/api/2/media/markers"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Marker]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter location: (query) Filter the returned list by &#x60;location&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFileBundle]>
     */
    open class func getAllMediaFileBundles( asset: String? = nil,  location: String? = nil,  sharedViaTokens: String? = nil,  sharedViaTokensToken: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  excludeDeleted: Bool? = nil,  excludeUnrecognized: Bool? = nil,  includeProxies: Bool? = nil,  includeParents: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFileBundle]> {
        let deferred = Promise<[MediaFileBundle]>.pending()
        getAllMediaFileBundlesWithRequestBuilder(asset: asset, location: location, sharedViaTokens: sharedViaTokens, sharedViaTokensToken: sharedViaTokensToken, name: name, ordering: ordering, limit: limit, offset: offset, excludeDeleted: excludeDeleted, excludeUnrecognized: excludeUnrecognized, includeProxies: includeProxies, includeParents: includeParents, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/bundles
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter location: (query) Filter the returned list by &#x60;location&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<[MediaFileBundle]> 
     */
    open class func getAllMediaFileBundlesWithRequestBuilder(asset: String? = nil, location: String? = nil, sharedViaTokens: String? = nil, sharedViaTokensToken: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, excludeDeleted: Bool? = nil, excludeUnrecognized: Bool? = nil, includeProxies: Bool? = nil, includeParents: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<[MediaFileBundle]> {
        let localVariablePath = "/api/2/media/bundles"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "location": location?.encodeToJSON(),
            "shared_via_tokens": sharedViaTokens?.encodeToJSON(),
            "shared_via_tokens__token": sharedViaTokensToken?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "exclude_deleted": excludeDeleted?.encodeToJSON(),
            "exclude_unrecognized": excludeUnrecognized?.encodeToJSON(),
            "include_proxies": includeProxies?.encodeToJSON(),
            "include_parents": includeParents?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFileBundle]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFileTemplate]>
     */
    open class func getAllMediaFileTemplates( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFileTemplate]> {
        let deferred = Promise<[MediaFileTemplate]>.pending()
        getAllMediaFileTemplatesWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/templates
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaFileTemplate]> 
     */
    open class func getAllMediaFileTemplatesWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaFileTemplate]> {
        let localVariablePath = "/api/2/media/files/templates"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFileTemplate]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter resolveFilePermission: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter includeEffectiveCustomFields: (query)  (optional)
     - parameter includeRoot: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFile]>
     */
    open class func getAllMediaFiles( bundle: String? = nil,  bundleIn: String? = nil,  parent: String? = nil,  name: String? = nil,  isDir: String? = nil,  isShowroom: String? = nil,  present: String? = nil,  volume: String? = nil,  sharedViaTokens: String? = nil,  sharedViaTokensToken: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  resolveFilePermission: Bool? = nil,  includeModifiedBy: Bool? = nil,  includeEffectiveCustomFields: Bool? = nil,  includeRoot: Bool? = nil,  includeParents: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFile]> {
        let deferred = Promise<[MediaFile]>.pending()
        getAllMediaFilesWithRequestBuilder(bundle: bundle, bundleIn: bundleIn, parent: parent, name: name, isDir: isDir, isShowroom: isShowroom, present: present, volume: volume, sharedViaTokens: sharedViaTokens, sharedViaTokensToken: sharedViaTokensToken, ordering: ordering, limit: limit, offset: offset, resolveFilePermission: resolveFilePermission, includeModifiedBy: includeModifiedBy, includeEffectiveCustomFields: includeEffectiveCustomFields, includeRoot: includeRoot, includeParents: includeParents, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter resolveFilePermission: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter includeEffectiveCustomFields: (query)  (optional)
     - parameter includeRoot: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<[MediaFile]> 
     */
    open class func getAllMediaFilesWithRequestBuilder(bundle: String? = nil, bundleIn: String? = nil, parent: String? = nil, name: String? = nil, isDir: String? = nil, isShowroom: String? = nil, present: String? = nil, volume: String? = nil, sharedViaTokens: String? = nil, sharedViaTokensToken: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, resolveFilePermission: Bool? = nil, includeModifiedBy: Bool? = nil, includeEffectiveCustomFields: Bool? = nil, includeRoot: Bool? = nil, includeParents: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<[MediaFile]> {
        let localVariablePath = "/api/2/media/files"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bundle": bundle?.encodeToJSON(),
            "bundle__in": bundleIn?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_dir": isDir?.encodeToJSON(),
            "is_showroom": isShowroom?.encodeToJSON(),
            "present": present?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "shared_via_tokens": sharedViaTokens?.encodeToJSON(),
            "shared_via_tokens__token": sharedViaTokensToken?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "resolve_file_permission": resolveFilePermission?.encodeToJSON(),
            "include_modified_by": includeModifiedBy?.encodeToJSON(),
            "include_effective_custom_fields": includeEffectiveCustomFields?.encodeToJSON(),
            "include_root": includeRoot?.encodeToJSON(),
            "include_parents": includeParents?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter allMediaFilesForBundlesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFile]>
     */
    open class func getAllMediaFilesForBundles( allMediaFilesForBundlesRequest: AllMediaFilesForBundlesRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFile]> {
        let deferred = Promise<[MediaFile]>.pending()
        getAllMediaFilesForBundlesWithRequestBuilder(allMediaFilesForBundlesRequest: allMediaFilesForBundlesRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/for-bundles
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter allMediaFilesForBundlesRequest: (body)  
     - returns: RequestBuilder<[MediaFile]> 
     */
    open class func getAllMediaFilesForBundlesWithRequestBuilder(allMediaFilesForBundlesRequest: AllMediaFilesForBundlesRequest) -> RequestBuilder<[MediaFile]> {
        let localVariablePath = "/api/2/media/files/for-bundles"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: allMediaFilesForBundlesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter root: (path)  
     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFile]>
     */
    open class func getAllMediaFilesForMediaRoot( root: String,  bundle: String? = nil,  bundleIn: String? = nil,  parent: String? = nil,  name: String? = nil,  isDir: String? = nil,  isShowroom: String? = nil,  present: String? = nil,  volume: String? = nil,  sharedViaTokens: String? = nil,  sharedViaTokensToken: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFile]> {
        let deferred = Promise<[MediaFile]>.pending()
        getAllMediaFilesForMediaRootWithRequestBuilder(root: root, bundle: bundle, bundleIn: bundleIn, parent: parent, name: name, isDir: isDir, isShowroom: isShowroom, present: present, volume: volume, sharedViaTokens: sharedViaTokens, sharedViaTokensToken: sharedViaTokensToken, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/flat/{root}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter root: (path)  
     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaFile]> 
     */
    open class func getAllMediaFilesForMediaRootWithRequestBuilder(root: String, bundle: String? = nil, bundleIn: String? = nil, parent: String? = nil, name: String? = nil, isDir: String? = nil, isShowroom: String? = nil, present: String? = nil, volume: String? = nil, sharedViaTokens: String? = nil, sharedViaTokensToken: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaFile]> {
        var localVariablePath = "/api/2/media/files/flat/{root}"
        let rootPreEscape = "\(APIHelper.mapValueToPathItem(root))"
        let rootPostEscape = rootPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{root}", with: rootPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bundle": bundle?.encodeToJSON(),
            "bundle__in": bundleIn?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_dir": isDir?.encodeToJSON(),
            "is_showroom": isShowroom?.encodeToJSON(),
            "present": present?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "shared_via_tokens": sharedViaTokens?.encodeToJSON(),
            "shared_via_tokens__token": sharedViaTokensToken?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaRootPermission]>
     */
    open class func getAllMediaRootPermissions( root: String? = nil,  id: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaRootPermission]> {
        let deferred = Promise<[MediaRootPermission]>.pending()
        getAllMediaRootPermissionsWithRequestBuilder(root: root, id: id, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/root-permissions
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaRootPermission]> 
     */
    open class func getAllMediaRootPermissionsWithRequestBuilder(root: String? = nil, id: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaRootPermission]> {
        let localVariablePath = "/api/2/media/root-permissions"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "root": root?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaRootPermission]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaRoot]>
     */
    open class func getAllMediaRoots( volume: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaRoot]> {
        let deferred = Promise<[MediaRoot]>.pending()
        getAllMediaRootsWithRequestBuilder(volume: volume, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/roots
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaRoot]> 
     */
    open class func getAllMediaRootsWithRequestBuilder(volume: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaRoot]> {
        let localVariablePath = "/api/2/media/roots"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "volume": volume?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaRoot]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter nameIcontains: (query) Filter the returned list by &#x60;name__icontains&#x60;. (optional)
     - parameter roots: (query) Filter the returned list by &#x60;roots&#x60;. (optional)
     - parameter rootsIsnull: (query) Filter the returned list by &#x60;roots__isnull&#x60;. (optional)
     - parameter shared: (query) Filter the returned list by &#x60;shared&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[UnfilteredTag]>
     */
    open class func getAllMediaTags( name: String? = nil,  nameIcontains: String? = nil,  roots: String? = nil,  rootsIsnull: String? = nil,  shared: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[UnfilteredTag]> {
        let deferred = Promise<[UnfilteredTag]>.pending()
        getAllMediaTagsWithRequestBuilder(name: name, nameIcontains: nameIcontains, roots: roots, rootsIsnull: rootsIsnull, shared: shared, ordering: ordering, limit: limit, offset: offset, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/tags
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter nameIcontains: (query) Filter the returned list by &#x60;name__icontains&#x60;. (optional)
     - parameter roots: (query) Filter the returned list by &#x60;roots&#x60;. (optional)
     - parameter rootsIsnull: (query) Filter the returned list by &#x60;roots__isnull&#x60;. (optional)
     - parameter shared: (query) Filter the returned list by &#x60;shared&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<[UnfilteredTag]> 
     */
    open class func getAllMediaTagsWithRequestBuilder(name: String? = nil, nameIcontains: String? = nil, roots: String? = nil, rootsIsnull: String? = nil, shared: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, forRoot: Int? = nil) -> RequestBuilder<[UnfilteredTag]> {
        let localVariablePath = "/api/2/media/tags"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "name__icontains": nameIcontains?.encodeToJSON(),
            "roots": roots?.encodeToJSON(),
            "roots__isnull": rootsIsnull?.encodeToJSON(),
            "shared": shared?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UnfilteredTag]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaUpdate]>
     */
    open class func getAllMediaUpdates( asset: String? = nil,  user: String? = nil,  root: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaUpdate]> {
        let deferred = Promise<[MediaUpdate]>.pending()
        getAllMediaUpdatesWithRequestBuilder(asset: asset, user: user, root: root, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/updates
     - ### Required permissions    * User account permission: `media:access` (read) / `media:updates:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaUpdate]> 
     */
    open class func getAllMediaUpdatesWithRequestBuilder(asset: String? = nil, user: String? = nil, root: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaUpdate]> {
        let localVariablePath = "/api/2/media/updates"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "root": root?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaUpdate]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ProxyGenerator]>
     */
    open class func getAllProxyGenerators( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[ProxyGenerator]> {
        let deferred = Promise<[ProxyGenerator]>.pending()
        getAllProxyGeneratorsWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxy-generators
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[ProxyGenerator]> 
     */
    open class func getAllProxyGeneratorsWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[ProxyGenerator]> {
        let localVariablePath = "/api/2/media/proxy-generators"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProxyGenerator]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[ProxyProfile]>
     */
    open class func getAllProxyProfiles( name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[ProxyProfile]> {
        let deferred = Promise<[ProxyProfile]>.pending()
        getAllProxyProfilesWithRequestBuilder(name: name, ordering: ordering, limit: limit, offset: offset, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxy-profiles
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<[ProxyProfile]> 
     */
    open class func getAllProxyProfilesWithRequestBuilder(name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil, forRoot: Int? = nil) -> RequestBuilder<[ProxyProfile]> {
        let localVariablePath = "/api/2/media/proxy-profiles"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProxyProfile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter cut: (query) Filter the returned list by &#x60;cut&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[SubclipClipboardEntry]>
     */
    open class func getAllSubclipClipboardEntries( cut: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[SubclipClipboardEntry]> {
        let deferred = Promise<[SubclipClipboardEntry]>.pending()
        getAllSubclipClipboardEntriesWithRequestBuilder(cut: cut, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/subclips/clipboard
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter cut: (query) Filter the returned list by &#x60;cut&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[SubclipClipboardEntry]> 
     */
    open class func getAllSubclipClipboardEntriesWithRequestBuilder(cut: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[SubclipClipboardEntry]> {
        let localVariablePath = "/api/2/media/subclips/clipboard"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "cut": cut?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SubclipClipboardEntry]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter assetIn: (query) Multiple values may be separated by commas. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Subclip]>
     */
    open class func getAllSubclips( asset: String? = nil,  assetIn: String? = nil,  root: String? = nil,  name: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[Subclip]> {
        let deferred = Promise<[Subclip]>.pending()
        getAllSubclipsWithRequestBuilder(asset: asset, assetIn: assetIn, root: root, name: name, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/subclips
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter assetIn: (query) Multiple values may be separated by commas. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[Subclip]> 
     */
    open class func getAllSubclipsWithRequestBuilder(asset: String? = nil, assetIn: String? = nil, root: String? = nil, name: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[Subclip]> {
        let localVariablePath = "/api/2/media/subclips"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "asset__in": assetIn?.encodeToJSON(),
            "root": root?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Subclip]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[TranscoderProfile]>
     */
    open class func getAllTranscoderProfiles( ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[TranscoderProfile]> {
        let deferred = Promise<[TranscoderProfile]>.pending()
        getAllTranscoderProfilesWithRequestBuilder(ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/transcoder-profiles
     - ### Required permissions    * User account permission: `tasks:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[TranscoderProfile]> 
     */
    open class func getAllTranscoderProfilesWithRequestBuilder(ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[TranscoderProfile]> {
        let localVariablePath = "/api/2/transcoder-profiles"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TranscoderProfile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter includeProxies: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter resolveAssetPermission: (query)  (optional)
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Asset>
     */
    open class func getAsset( id: Int,  includeProxies: Bool? = nil,  includeModifiedBy: Bool? = nil,  resolveAssetPermission: Bool? = nil,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Asset> {
        let deferred = Promise<Asset>.pending()
        getAssetWithRequestBuilder(id: id, includeProxies: includeProxies, includeModifiedBy: includeModifiedBy, resolveAssetPermission: resolveAssetPermission, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter includeProxies: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter resolveAssetPermission: (query)  (optional)
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<Asset> 
     */
    open class func getAssetWithRequestBuilder(id: Int, includeProxies: Bool? = nil, includeModifiedBy: Bool? = nil, resolveAssetPermission: Bool? = nil, forRoot: Int? = nil) -> RequestBuilder<Asset> {
        var localVariablePath = "/api/2/media/assets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_proxies": includeProxies?.encodeToJSON(),
            "include_modified_by": includeModifiedBy?.encodeToJSON(),
            "resolve_asset_permission": resolveAssetPermission?.encodeToJSON(),
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Asset>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AssetRating>
     */
    open class func getAssetRating( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<AssetRating> {
        let deferred = Promise<AssetRating>.pending()
        getAssetRatingWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/ratings/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Rating. 
     - returns: RequestBuilder<AssetRating> 
     */
    open class func getAssetRatingWithRequestBuilder(id: Int) -> RequestBuilder<AssetRating> {
        var localVariablePath = "/api/2/media/ratings/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetRating>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFile]>
     */
    open class func getBookmarkedMediaFilesDirectories( bundle: String? = nil,  bundleIn: String? = nil,  parent: String? = nil,  name: String? = nil,  isDir: String? = nil,  isShowroom: String? = nil,  present: String? = nil,  volume: String? = nil,  sharedViaTokens: String? = nil,  sharedViaTokensToken: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFile]> {
        let deferred = Promise<[MediaFile]>.pending()
        getBookmarkedMediaFilesDirectoriesWithRequestBuilder(bundle: bundle, bundleIn: bundleIn, parent: parent, name: name, isDir: isDir, isShowroom: isShowroom, present: present, volume: volume, sharedViaTokens: sharedViaTokens, sharedViaTokensToken: sharedViaTokensToken, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/bookmarks
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter bundle: (query) Filter the returned list by &#x60;bundle&#x60;. (optional)
     - parameter bundleIn: (query) Multiple values may be separated by commas. (optional)
     - parameter parent: (query) Filter the returned list by &#x60;parent&#x60;. (optional)
     - parameter name: (query) Filter the returned list by &#x60;name&#x60;. (optional)
     - parameter isDir: (query) Filter the returned list by &#x60;is_dir&#x60;. (optional)
     - parameter isShowroom: (query) Filter the returned list by &#x60;is_showroom&#x60;. (optional)
     - parameter present: (query) Filter the returned list by &#x60;present&#x60;. (optional)
     - parameter volume: (query) Filter the returned list by &#x60;volume&#x60;. (optional)
     - parameter sharedViaTokens: (query) Filter the returned list by &#x60;shared_via_tokens&#x60;. (optional)
     - parameter sharedViaTokensToken: (query) Filter the returned list by &#x60;shared_via_tokens__token&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaFile]> 
     */
    open class func getBookmarkedMediaFilesDirectoriesWithRequestBuilder(bundle: String? = nil, bundleIn: String? = nil, parent: String? = nil, name: String? = nil, isDir: String? = nil, isShowroom: String? = nil, present: String? = nil, volume: String? = nil, sharedViaTokens: String? = nil, sharedViaTokensToken: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaFile]> {
        let localVariablePath = "/api/2/media/files/bookmarks"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bundle": bundle?.encodeToJSON(),
            "bundle__in": bundleIn?.encodeToJSON(),
            "parent": parent?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "is_dir": isDir?.encodeToJSON(),
            "is_showroom": isShowroom?.encodeToJSON(),
            "present": present?.encodeToJSON(),
            "volume": volume?.encodeToJSON(),
            "shared_via_tokens": sharedViaTokens?.encodeToJSON(),
            "shared_via_tokens__token": sharedViaTokensToken?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter forRoot: (query)  (optional)
     - parameter tasksForUser: (query)  (optional)
     - parameter includeFullAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func getComment( id: Int,  forRoot: Int? = nil,  tasksForUser: Int? = nil,  includeFullAsset: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        getCommentWithRequestBuilder(id: id, forRoot: forRoot, tasksForUser: tasksForUser, includeFullAsset: includeFullAsset, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/comments/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter forRoot: (query)  (optional)
     - parameter tasksForUser: (query)  (optional)
     - parameter includeFullAsset: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<Comment> 
     */
    open class func getCommentWithRequestBuilder(id: Int, forRoot: Int? = nil, tasksForUser: Int? = nil, includeFullAsset: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<Comment> {
        var localVariablePath = "/api/2/media/comments/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_root": forRoot?.encodeToJSON(),
            "tasks_for_user": tasksForUser?.encodeToJSON(),
            "include_full_asset": includeFullAsset?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<CustomField>
     */
    open class func getCustomField( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<CustomField> {
        let deferred = Promise<CustomField>.pending()
        getCustomFieldWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/custom-fields/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Custom field. 
     - returns: RequestBuilder<CustomField> 
     */
    open class func getCustomFieldWithRequestBuilder(id: Int) -> RequestBuilder<CustomField> {
        var localVariablePath = "/api/2/media/custom-fields/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomField>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Bundle. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<OneTimeAccessToken>
     */
    open class func getEasySharingTokenForBundle( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<OneTimeAccessToken> {
        let deferred = Promise<OneTimeAccessToken>.pending()
        getEasySharingTokenForBundleWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/bundles/{id}/easy-sharing-token
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Bundle. 
     - returns: RequestBuilder<OneTimeAccessToken> 
     */
    open class func getEasySharingTokenForBundleWithRequestBuilder(id: Int) -> RequestBuilder<OneTimeAccessToken> {
        var localVariablePath = "/api/2/media/bundles/{id}/easy-sharing-token"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimeAccessToken>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<OneTimeAccessToken>
     */
    open class func getEasySharingTokenForDirectory( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<OneTimeAccessToken> {
        let deferred = Promise<OneTimeAccessToken>.pending()
        getEasySharingTokenForDirectoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/{id}/easy-sharing-token
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<OneTimeAccessToken> 
     */
    open class func getEasySharingTokenForDirectoryWithRequestBuilder(id: Int) -> RequestBuilder<OneTimeAccessToken> {
        var localVariablePath = "/api/2/media/files/{id}/easy-sharing-token"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimeAccessToken>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<EditorProject>
     */
    open class func getEditorProject( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<EditorProject> {
        let deferred = Promise<EditorProject>.pending()
        getEditorProjectWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<EditorProject> 
     */
    open class func getEditorProjectWithRequestBuilder(id: Int) -> RequestBuilder<EditorProject> {
        var localVariablePath = "/api/2/media/editor/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EditorProject>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ExternalTranscoder>
     */
    open class func getExternalTranscoder( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ExternalTranscoder> {
        let deferred = Promise<ExternalTranscoder>.pending()
        getExternalTranscoderWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/external-transcoders/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - returns: RequestBuilder<ExternalTranscoder> 
     */
    open class func getExternalTranscoderWithRequestBuilder(id: Int) -> RequestBuilder<ExternalTranscoder> {
        var localVariablePath = "/api/2/media/external-transcoders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalTranscoder>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter frame: (path)  
     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func getFrame( frame: String,  id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        getFrameWithRequestBuilder(frame: frame, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/assets/{id}/frames/{frame}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter frame: (path)  
     - parameter id: (path) A unique integer value identifying this Asset. 
     - returns: RequestBuilder<Void> 
     */
    open class func getFrameWithRequestBuilder(frame: String, id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/assets/{id}/frames/{frame}"
        let framePreEscape = "\(APIHelper.mapValueToPathItem(frame))"
        let framePostEscape = framePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{frame}", with: framePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaUpdate>
     */
    open class func getLatestMediaUpdate( asset: String? = nil,  user: String? = nil,  root: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaUpdate> {
        let deferred = Promise<MediaUpdate>.pending()
        getLatestMediaUpdateWithRequestBuilder(asset: asset, user: user, root: root, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/updates/latest
     - ### Required permissions    * User account permission: `media:access` (read) / `media:updates:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter asset: (query) Filter the returned list by &#x60;asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<MediaUpdate> 
     */
    open class func getLatestMediaUpdateWithRequestBuilder(asset: String? = nil, user: String? = nil, root: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<MediaUpdate> {
        let localVariablePath = "/api/2/media/updates/latest"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset": asset?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "root": root?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaUpdate>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Marker>
     */
    open class func getMarker( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Marker> {
        let deferred = Promise<Marker>.pending()
        getMarkerWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/markers/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this marker. 
     - returns: RequestBuilder<Marker> 
     */
    open class func getMarkerWithRequestBuilder(id: Int) -> RequestBuilder<Marker> {
        var localVariablePath = "/api/2/media/markers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Marker>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter resolveFilePermission: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter includeEffectiveCustomFields: (query)  (optional)
     - parameter includeRoot: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFile>
     */
    open class func getMediaFile( id: Int,  resolveFilePermission: Bool? = nil,  includeModifiedBy: Bool? = nil,  includeEffectiveCustomFields: Bool? = nil,  includeRoot: Bool? = nil,  includeParents: Bool? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFile> {
        let deferred = Promise<MediaFile>.pending()
        getMediaFileWithRequestBuilder(id: id, resolveFilePermission: resolveFilePermission, includeModifiedBy: includeModifiedBy, includeEffectiveCustomFields: includeEffectiveCustomFields, includeRoot: includeRoot, includeParents: includeParents, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter resolveFilePermission: (query)  (optional)
     - parameter includeModifiedBy: (query)  (optional)
     - parameter includeEffectiveCustomFields: (query)  (optional)
     - parameter includeRoot: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<MediaFile> 
     */
    open class func getMediaFileWithRequestBuilder(id: Int, resolveFilePermission: Bool? = nil, includeModifiedBy: Bool? = nil, includeEffectiveCustomFields: Bool? = nil, includeRoot: Bool? = nil, includeParents: Bool? = nil, advancedSearch: String? = nil) -> RequestBuilder<MediaFile> {
        var localVariablePath = "/api/2/media/files/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "resolve_file_permission": resolveFilePermission?.encodeToJSON(),
            "include_modified_by": includeModifiedBy?.encodeToJSON(),
            "include_effective_custom_fields": includeEffectiveCustomFields?.encodeToJSON(),
            "include_root": includeRoot?.encodeToJSON(),
            "include_parents": includeParents?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Bundle. 
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileBundle>
     */
    open class func getMediaFileBundle( id: Int,  excludeDeleted: Bool? = nil,  excludeUnrecognized: Bool? = nil,  includeProxies: Bool? = nil,  includeParents: Bool? = nil,  offset: Int? = nil,  limit: Int? = nil,  advancedSearch: String? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileBundle> {
        let deferred = Promise<MediaFileBundle>.pending()
        getMediaFileBundleWithRequestBuilder(id: id, excludeDeleted: excludeDeleted, excludeUnrecognized: excludeUnrecognized, includeProxies: includeProxies, includeParents: includeParents, offset: offset, limit: limit, advancedSearch: advancedSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/bundles/{id}
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Bundle. 
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter includeProxies: (query)  (optional)
     - parameter includeParents: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter advancedSearch: (query)  (optional)
     - returns: RequestBuilder<MediaFileBundle> 
     */
    open class func getMediaFileBundleWithRequestBuilder(id: Int, excludeDeleted: Bool? = nil, excludeUnrecognized: Bool? = nil, includeProxies: Bool? = nil, includeParents: Bool? = nil, offset: Int? = nil, limit: Int? = nil, advancedSearch: String? = nil) -> RequestBuilder<MediaFileBundle> {
        var localVariablePath = "/api/2/media/bundles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_deleted": excludeDeleted?.encodeToJSON(),
            "exclude_unrecognized": excludeUnrecognized?.encodeToJSON(),
            "include_proxies": includeProxies?.encodeToJSON(),
            "include_parents": includeParents?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "advanced_search": advancedSearch?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileBundle>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileContents>
     */
    open class func getMediaFileContents( id: Int,  excludeDeleted: Bool? = nil,  excludeUnrecognized: Bool? = nil,  offset: Int? = nil,  limit: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileContents> {
        let deferred = Promise<MediaFileContents>.pending()
        getMediaFileContentsWithRequestBuilder(id: id, excludeDeleted: excludeDeleted, excludeUnrecognized: excludeUnrecognized, offset: offset, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/{id}/contents
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter excludeDeleted: (query)  (optional)
     - parameter excludeUnrecognized: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<MediaFileContents> 
     */
    open class func getMediaFileContentsWithRequestBuilder(id: Int, excludeDeleted: Bool? = nil, excludeUnrecognized: Bool? = nil, offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<MediaFileContents> {
        var localVariablePath = "/api/2/media/files/{id}/contents"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exclude_deleted": excludeDeleted?.encodeToJSON(),
            "exclude_unrecognized": excludeUnrecognized?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileContents>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileTemplate>
     */
    open class func getMediaFileTemplate( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileTemplate> {
        let deferred = Promise<MediaFileTemplate>.pending()
        getMediaFileTemplateWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/files/templates/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Template. 
     - returns: RequestBuilder<MediaFileTemplate> 
     */
    open class func getMediaFileTemplateWithRequestBuilder(id: Int) -> RequestBuilder<MediaFileTemplate> {
        var localVariablePath = "/api/2/media/files/templates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileTemplate>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRoot>
     */
    open class func getMediaRoot( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRoot> {
        let deferred = Promise<MediaRoot>.pending()
        getMediaRootWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/roots/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this media root. 
     - returns: RequestBuilder<MediaRoot> 
     */
    open class func getMediaRootWithRequestBuilder(id: Int) -> RequestBuilder<MediaRoot> {
        var localVariablePath = "/api/2/media/roots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRoot>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRootPermission>
     */
    open class func getMediaRootPermission( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRootPermission> {
        let deferred = Promise<MediaRootPermission>.pending()
        getMediaRootPermissionWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/root-permissions/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - returns: RequestBuilder<MediaRootPermission> 
     */
    open class func getMediaRootPermissionWithRequestBuilder(id: Int) -> RequestBuilder<MediaRootPermission> {
        var localVariablePath = "/api/2/media/root-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRootPermission>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<UnfilteredTag>
     */
    open class func getMediaTag( id: Int,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<UnfilteredTag> {
        let deferred = Promise<UnfilteredTag>.pending()
        getMediaTagWithRequestBuilder(id: id, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/tags/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<UnfilteredTag> 
     */
    open class func getMediaTagWithRequestBuilder(id: Int, forRoot: Int? = nil) -> RequestBuilder<UnfilteredTag> {
        var localVariablePath = "/api/2/media/tags/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnfilteredTag>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter multipleAssetsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[Asset]>
     */
    open class func getMultipleAssets( multipleAssetsRequest: MultipleAssetsRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[Asset]> {
        let deferred = Promise<[Asset]>.pending()
        getMultipleAssetsWithRequestBuilder(multipleAssetsRequest: multipleAssetsRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/assets/multiple
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter multipleAssetsRequest: (body)  
     - returns: RequestBuilder<[Asset]> 
     */
    open class func getMultipleAssetsWithRequestBuilder(multipleAssetsRequest: MultipleAssetsRequest) -> RequestBuilder<[Asset]> {
        let localVariablePath = "/api/2/media/assets/multiple"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: multipleAssetsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Asset]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter getMultipleBundlesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFileBundle]>
     */
    open class func getMultipleBundles( getMultipleBundlesRequest: GetMultipleBundlesRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFileBundle]> {
        let deferred = Promise<[MediaFileBundle]>.pending()
        getMultipleBundlesWithRequestBuilder(getMultipleBundlesRequest: getMultipleBundlesRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/bundles/multiple
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter getMultipleBundlesRequest: (body)  
     - returns: RequestBuilder<[MediaFileBundle]> 
     */
    open class func getMultipleBundlesWithRequestBuilder(getMultipleBundlesRequest: GetMultipleBundlesRequest) -> RequestBuilder<[MediaFileBundle]> {
        let localVariablePath = "/api/2/media/bundles/multiple"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMultipleBundlesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFileBundle]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter getMultipleFilesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaFile]>
     */
    open class func getMultipleFiles( getMultipleFilesRequest: GetMultipleFilesRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaFile]> {
        let deferred = Promise<[MediaFile]>.pending()
        getMultipleFilesWithRequestBuilder(getMultipleFilesRequest: getMultipleFilesRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/multiple
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter getMultipleFilesRequest: (body)  
     - returns: RequestBuilder<[MediaFile]> 
     */
    open class func getMultipleFilesWithRequestBuilder(getMultipleFilesRequest: GetMultipleFilesRequest) -> RequestBuilder<[MediaFile]> {
        let localVariablePath = "/api/2/media/files/multiple"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMultipleFilesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaFile]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaRootPermission]>
     */
    open class func getMyMediaRootPermissions( root: String? = nil,  id: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaRootPermission]> {
        let deferred = Promise<[MediaRootPermission]>.pending()
        getMyMediaRootPermissionsWithRequestBuilder(root: root, id: id, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/root-permissions/mine
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaRootPermission]> 
     */
    open class func getMyMediaRootPermissionsWithRequestBuilder(root: String? = nil, id: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaRootPermission]> {
        let localVariablePath = "/api/2/media/root-permissions/mine"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "root": root?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaRootPermission]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[MediaRootPermission]>
     */
    open class func getMyResolvedMediaRootPermissions( root: String? = nil,  id: Double? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[MediaRootPermission]> {
        let deferred = Promise<[MediaRootPermission]>.pending()
        getMyResolvedMediaRootPermissionsWithRequestBuilder(root: root, id: id, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/root-permissions/mine/resolved
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter root: (query) Filter the returned list by &#x60;root&#x60;. (optional)
     - parameter id: (query) Filter the returned list by &#x60;id&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[MediaRootPermission]> 
     */
    open class func getMyResolvedMediaRootPermissionsWithRequestBuilder(root: String? = nil, id: Double? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[MediaRootPermission]> {
        let localVariablePath = "/api/2/media/root-permissions/mine/resolved"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "root": root?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MediaRootPermission]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Proxy>
     */
    open class func getProxy( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Proxy> {
        let deferred = Promise<Proxy>.pending()
        getProxyWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxies/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy. 
     - returns: RequestBuilder<Proxy> 
     */
    open class func getProxyWithRequestBuilder(id: Int) -> RequestBuilder<Proxy> {
        var localVariablePath = "/api/2/media/proxies/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Proxy>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyGenerator>
     */
    open class func getProxyGenerator( id: String, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyGenerator> {
        let deferred = Promise<ProxyGenerator>.pending()
        getProxyGeneratorWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxy-generators/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<ProxyGenerator> 
     */
    open class func getProxyGeneratorWithRequestBuilder(id: String) -> RequestBuilder<ProxyGenerator> {
        var localVariablePath = "/api/2/media/proxy-generators/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyGenerator>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter forRoot: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyProfile>
     */
    open class func getProxyProfile( id: Int,  forRoot: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyProfile> {
        let deferred = Promise<ProxyProfile>.pending()
        getProxyProfileWithRequestBuilder(id: id, forRoot: forRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxy-profiles/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter forRoot: (query)  (optional)
     - returns: RequestBuilder<ProxyProfile> 
     */
    open class func getProxyProfileWithRequestBuilder(id: Int, forRoot: Int? = nil) -> RequestBuilder<ProxyProfile> {
        var localVariablePath = "/api/2/media/proxy-profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "for_root": forRoot?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProfile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyCount>
     */
    open class func getProxyProfileProxyCount( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyCount> {
        let deferred = Promise<ProxyCount>.pending()
        getProxyProfileProxyCountWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/proxy-profiles/{id}/proxy-count
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - returns: RequestBuilder<ProxyCount> 
     */
    open class func getProxyProfileProxyCountWithRequestBuilder(id: Int) -> RequestBuilder<ProxyCount> {
        var localVariablePath = "/api/2/media/proxy-profiles/{id}/proxy-count"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyCount>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subclip>
     */
    open class func getSubclip( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Subclip> {
        let deferred = Promise<Subclip>.pending()
        getSubclipWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/subclips/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip. 
     - returns: RequestBuilder<Subclip> 
     */
    open class func getSubclipWithRequestBuilder(id: Int) -> RequestBuilder<Subclip> {
        var localVariablePath = "/api/2/media/subclips/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subclip>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this transcoder profile. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TranscoderProfile>
     */
    open class func getTranscoderProfile( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<TranscoderProfile> {
        let deferred = Promise<TranscoderProfile>.pending()
        getTranscoderProfileWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/transcoder-profiles/{id}
     - ### Required permissions    * User account permission: `tasks:view` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this transcoder profile. 
     - returns: RequestBuilder<TranscoderProfile> 
     */
    open class func getTranscoderProfileWithRequestBuilder(id: Int) -> RequestBuilder<TranscoderProfile> {
        var localVariablePath = "/api/2/transcoder-profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TranscoderProfile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<VantageWorkflows>
     */
    open class func getVantageWorkflows( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<VantageWorkflows> {
        let deferred = Promise<VantageWorkflows>.pending()
        getVantageWorkflowsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/external-transcoders/{id}/workflows
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - returns: RequestBuilder<VantageWorkflows> 
     */
    open class func getVantageWorkflowsWithRequestBuilder(id: Int) -> RequestBuilder<VantageWorkflows> {
        var localVariablePath = "/api/2/media/external-transcoders/{id}/workflows"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VantageWorkflows>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter instantiateFileTemplateRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func instantiateMediaFileTemplate( id: Int,  instantiateFileTemplateRequest: InstantiateFileTemplateRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        instantiateMediaFileTemplateWithRequestBuilder(id: id, instantiateFileTemplateRequest: instantiateFileTemplateRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/templates/{id}/instantiate
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter instantiateFileTemplateRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func instantiateMediaFileTemplateWithRequestBuilder(id: Int, instantiateFileTemplateRequest: InstantiateFileTemplateRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/templates/{id}/instantiate"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: instantiateFileTemplateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[LocateResult]>
     */
    open class func locateEditorProjectPaths( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[LocateResult]> {
        let deferred = Promise<[LocateResult]>.pending()
        locateEditorProjectPathsWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/media/editor/{id}/locate-paths
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<[LocateResult]> 
     */
    open class func locateEditorProjectPathsWithRequestBuilder(id: Int) -> RequestBuilder<[LocateResult]> {
        var localVariablePath = "/api/2/media/editor/{id}/locate-paths"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LocateResult]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func markMediaDirectoryAsShowroom( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        markMediaDirectoryAsShowroomWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/{id}/showroom
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func markMediaDirectoryAsShowroomWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/showroom"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter assetPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Asset>
     */
    open class func patchAsset( id: Int,  assetPartialUpdate: AssetPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Asset> {
        let deferred = Promise<Asset>.pending()
        patchAssetWithRequestBuilder(id: id, assetPartialUpdate: assetPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/assets/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter assetPartialUpdate: (body)  
     - returns: RequestBuilder<Asset> 
     */
    open class func patchAssetWithRequestBuilder(id: Int, assetPartialUpdate: AssetPartialUpdate) -> RequestBuilder<Asset> {
        var localVariablePath = "/api/2/media/assets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Asset>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter assetRatingPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AssetRating>
     */
    open class func patchAssetRating( id: Int,  assetRatingPartialUpdate: AssetRatingPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<AssetRating> {
        let deferred = Promise<AssetRating>.pending()
        patchAssetRatingWithRequestBuilder(id: id, assetRatingPartialUpdate: assetRatingPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/ratings/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter assetRatingPartialUpdate: (body)  
     - returns: RequestBuilder<AssetRating> 
     */
    open class func patchAssetRatingWithRequestBuilder(id: Int, assetRatingPartialUpdate: AssetRatingPartialUpdate) -> RequestBuilder<AssetRating> {
        var localVariablePath = "/api/2/media/ratings/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetRatingPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetRating>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter commentPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func patchComment( id: Int,  commentPartialUpdate: CommentPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        patchCommentWithRequestBuilder(id: id, commentPartialUpdate: commentPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/comments/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter commentPartialUpdate: (body)  
     - returns: RequestBuilder<Comment> 
     */
    open class func patchCommentWithRequestBuilder(id: Int, commentPartialUpdate: CommentPartialUpdate) -> RequestBuilder<Comment> {
        var localVariablePath = "/api/2/media/comments/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: commentPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter customFieldPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<CustomField>
     */
    open class func patchCustomField( id: Int,  customFieldPartialUpdate: CustomFieldPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<CustomField> {
        let deferred = Promise<CustomField>.pending()
        patchCustomFieldWithRequestBuilder(id: id, customFieldPartialUpdate: customFieldPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/custom-fields/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter customFieldPartialUpdate: (body)  
     - returns: RequestBuilder<CustomField> 
     */
    open class func patchCustomFieldWithRequestBuilder(id: Int, customFieldPartialUpdate: CustomFieldPartialUpdate) -> RequestBuilder<CustomField> {
        var localVariablePath = "/api/2/media/custom-fields/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customFieldPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomField>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter editorProjectPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<EditorProject>
     */
    open class func patchEditorProject( id: Int,  editorProjectPartialUpdate: EditorProjectPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<EditorProject> {
        let deferred = Promise<EditorProject>.pending()
        patchEditorProjectWithRequestBuilder(id: id, editorProjectPartialUpdate: editorProjectPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/editor/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter editorProjectPartialUpdate: (body)  
     - returns: RequestBuilder<EditorProject> 
     */
    open class func patchEditorProjectWithRequestBuilder(id: Int, editorProjectPartialUpdate: EditorProjectPartialUpdate) -> RequestBuilder<EditorProject> {
        var localVariablePath = "/api/2/media/editor/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editorProjectPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EditorProject>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter externalTranscoderPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ExternalTranscoder>
     */
    open class func patchExternalTranscoder( id: Int,  externalTranscoderPartialUpdate: ExternalTranscoderPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ExternalTranscoder> {
        let deferred = Promise<ExternalTranscoder>.pending()
        patchExternalTranscoderWithRequestBuilder(id: id, externalTranscoderPartialUpdate: externalTranscoderPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/external-transcoders/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter externalTranscoderPartialUpdate: (body)  
     - returns: RequestBuilder<ExternalTranscoder> 
     */
    open class func patchExternalTranscoderWithRequestBuilder(id: Int, externalTranscoderPartialUpdate: ExternalTranscoderPartialUpdate) -> RequestBuilder<ExternalTranscoder> {
        var localVariablePath = "/api/2/media/external-transcoders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: externalTranscoderPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalTranscoder>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter markerPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Marker>
     */
    open class func patchMarker( id: Int,  markerPartialUpdate: MarkerPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Marker> {
        let deferred = Promise<Marker>.pending()
        patchMarkerWithRequestBuilder(id: id, markerPartialUpdate: markerPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/markers/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter markerPartialUpdate: (body)  
     - returns: RequestBuilder<Marker> 
     */
    open class func patchMarkerWithRequestBuilder(id: Int, markerPartialUpdate: MarkerPartialUpdate) -> RequestBuilder<Marker> {
        var localVariablePath = "/api/2/media/markers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: markerPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Marker>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter mediaFilePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFile>
     */
    open class func patchMediaFile( id: Int,  mediaFilePartialUpdate: MediaFilePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFile> {
        let deferred = Promise<MediaFile>.pending()
        patchMediaFileWithRequestBuilder(id: id, mediaFilePartialUpdate: mediaFilePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/files/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter mediaFilePartialUpdate: (body)  
     - returns: RequestBuilder<MediaFile> 
     */
    open class func patchMediaFileWithRequestBuilder(id: Int, mediaFilePartialUpdate: MediaFilePartialUpdate) -> RequestBuilder<MediaFile> {
        var localVariablePath = "/api/2/media/files/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaFilePartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter mediaFileTemplatePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileTemplate>
     */
    open class func patchMediaFileTemplate( id: Int,  mediaFileTemplatePartialUpdate: MediaFileTemplatePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileTemplate> {
        let deferred = Promise<MediaFileTemplate>.pending()
        patchMediaFileTemplateWithRequestBuilder(id: id, mediaFileTemplatePartialUpdate: mediaFileTemplatePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/files/templates/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter mediaFileTemplatePartialUpdate: (body)  
     - returns: RequestBuilder<MediaFileTemplate> 
     */
    open class func patchMediaFileTemplateWithRequestBuilder(id: Int, mediaFileTemplatePartialUpdate: MediaFileTemplatePartialUpdate) -> RequestBuilder<MediaFileTemplate> {
        var localVariablePath = "/api/2/media/files/templates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaFileTemplatePartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileTemplate>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter mediaRootPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRoot>
     */
    open class func patchMediaRoot( id: Int,  mediaRootPartialUpdate: MediaRootPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRoot> {
        let deferred = Promise<MediaRoot>.pending()
        patchMediaRootWithRequestBuilder(id: id, mediaRootPartialUpdate: mediaRootPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/roots/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter mediaRootPartialUpdate: (body)  
     - returns: RequestBuilder<MediaRoot> 
     */
    open class func patchMediaRootWithRequestBuilder(id: Int, mediaRootPartialUpdate: MediaRootPartialUpdate) -> RequestBuilder<MediaRoot> {
        var localVariablePath = "/api/2/media/roots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRootPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRoot>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter mediaRootPermissionPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRootPermission>
     */
    open class func patchMediaRootPermission( id: Int,  mediaRootPermissionPartialUpdate: MediaRootPermissionPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRootPermission> {
        let deferred = Promise<MediaRootPermission>.pending()
        patchMediaRootPermissionWithRequestBuilder(id: id, mediaRootPermissionPartialUpdate: mediaRootPermissionPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/root-permissions/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter mediaRootPermissionPartialUpdate: (body)  
     - returns: RequestBuilder<MediaRootPermission> 
     */
    open class func patchMediaRootPermissionWithRequestBuilder(id: Int, mediaRootPermissionPartialUpdate: MediaRootPermissionPartialUpdate) -> RequestBuilder<MediaRootPermission> {
        var localVariablePath = "/api/2/media/root-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRootPermissionPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRootPermission>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter unfilteredTagPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<UnfilteredTag>
     */
    open class func patchMediaTag( id: Int,  unfilteredTagPartialUpdate: UnfilteredTagPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<UnfilteredTag> {
        let deferred = Promise<UnfilteredTag>.pending()
        patchMediaTagWithRequestBuilder(id: id, unfilteredTagPartialUpdate: unfilteredTagPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/tags/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter unfilteredTagPartialUpdate: (body)  
     - returns: RequestBuilder<UnfilteredTag> 
     */
    open class func patchMediaTagWithRequestBuilder(id: Int, unfilteredTagPartialUpdate: UnfilteredTagPartialUpdate) -> RequestBuilder<UnfilteredTag> {
        var localVariablePath = "/api/2/media/tags/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unfilteredTagPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnfilteredTag>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter proxyProfilePartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyProfile>
     */
    open class func patchProxyProfile( id: Int,  proxyProfilePartialUpdate: ProxyProfilePartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyProfile> {
        let deferred = Promise<ProxyProfile>.pending()
        patchProxyProfileWithRequestBuilder(id: id, proxyProfilePartialUpdate: proxyProfilePartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/proxy-profiles/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter proxyProfilePartialUpdate: (body)  
     - returns: RequestBuilder<ProxyProfile> 
     */
    open class func patchProxyProfileWithRequestBuilder(id: Int, proxyProfilePartialUpdate: ProxyProfilePartialUpdate) -> RequestBuilder<ProxyProfile> {
        var localVariablePath = "/api/2/media/proxy-profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProfilePartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProfile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter subclipPartialUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subclip>
     */
    open class func patchSubclip( id: Int,  subclipPartialUpdate: SubclipPartialUpdate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Subclip> {
        let deferred = Promise<Subclip>.pending()
        patchSubclipWithRequestBuilder(id: id, subclipPartialUpdate: subclipPartialUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PATCH /api/2/media/subclips/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter subclipPartialUpdate: (body)  
     - returns: RequestBuilder<Subclip> 
     */
    open class func patchSubclipWithRequestBuilder(id: Int, subclipPartialUpdate: SubclipPartialUpdate) -> RequestBuilder<Subclip> {
        var localVariablePath = "/api/2/media/subclips/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subclipPartialUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subclip>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter tagMediaDirectoryRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func recursivelyTagMediaDirectory( id: Int,  tagMediaDirectoryRequest: TagMediaDirectoryRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        recursivelyTagMediaDirectoryWithRequestBuilder(id: id, tagMediaDirectoryRequest: tagMediaDirectoryRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/{id}/tag
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter tagMediaDirectoryRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func recursivelyTagMediaDirectoryWithRequestBuilder(id: Int, tagMediaDirectoryRequest: TagMediaDirectoryRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/tag"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tagMediaDirectoryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func reindexMediaDirectory( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        reindexMediaDirectoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/files/{id}/search-reindex
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func reindexMediaDirectoryWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/search-reindex"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter renameCustomFieldRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func renameCustomField( id: Int,  renameCustomFieldRequest: RenameCustomFieldRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        renameCustomFieldWithRequestBuilder(id: id, renameCustomFieldRequest: renameCustomFieldRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/custom-fields/{id}/rename
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter renameCustomFieldRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func renameCustomFieldWithRequestBuilder(id: Int, renameCustomFieldRequest: RenameCustomFieldRequest) -> RequestBuilder<TaskInfo> {
        var localVariablePath = "/api/2/media/custom-fields/{id}/rename"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: renameCustomFieldRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter renderEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func renderSequence( renderEndpointRequest: RenderEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        renderSequenceWithRequestBuilder(renderEndpointRequest: renderEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/editor/render
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter renderEndpointRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func renderSequenceWithRequestBuilder(renderEndpointRequest: RenderEndpointRequest) -> RequestBuilder<TaskInfo> {
        let localVariablePath = "/api/2/media/editor/render"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: renderEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter renderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TaskInfo>
     */
    open class func renderSubclip( id: Int,  renderRequest: RenderRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<TaskInfo> {
        let deferred = Promise<TaskInfo>.pending()
        renderSubclipWithRequestBuilder(id: id, renderRequest: renderRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/subclips/{id}/render
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter renderRequest: (body)  
     - returns: RequestBuilder<TaskInfo> 
     */
    open class func renderSubclipWithRequestBuilder(id: Int, renderRequest: RenderRequest) -> RequestBuilder<TaskInfo> {
        var localVariablePath = "/api/2/media/subclips/{id}/render"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: renderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaskInfo>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter scannerScanEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func requestMediaScan( scannerScanEndpointRequest: ScannerScanEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        requestMediaScanWithRequestBuilder(scannerScanEndpointRequest: scannerScanEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/scanner/scan
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter scannerScanEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func requestMediaScanWithRequestBuilder(scannerScanEndpointRequest: ScannerScanEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/scanner/scan"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scannerScanEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func resolveComment( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        resolveCommentWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/comments/{id}/resolve
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - returns: RequestBuilder<Comment> 
     */
    open class func resolveCommentWithRequestBuilder(id: Int) -> RequestBuilder<Comment> {
        var localVariablePath = "/api/2/media/comments/{id}/resolve"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter mediaLibraryShareRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<OneTimeAccessToken>
     */
    open class func shareMediaLibraryObjects( mediaLibraryShareRequest: MediaLibraryShareRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<OneTimeAccessToken> {
        let deferred = Promise<OneTimeAccessToken>.pending()
        shareMediaLibraryObjectsWithRequestBuilder(mediaLibraryShareRequest: mediaLibraryShareRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/share
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter mediaLibraryShareRequest: (body)  
     - returns: RequestBuilder<OneTimeAccessToken> 
     */
    open class func shareMediaLibraryObjectsWithRequestBuilder(mediaLibraryShareRequest: MediaLibraryShareRequest) -> RequestBuilder<OneTimeAccessToken> {
        let localVariablePath = "/api/2/media/share"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaLibraryShareRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimeAccessToken>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter testExternalTranscoderConnectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<TestExternalTranscoderConnectionResponse>
     */
    open class func testExternalTranscoderConnection( testExternalTranscoderConnectionRequest: TestExternalTranscoderConnectionRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<TestExternalTranscoderConnectionResponse> {
        let deferred = Promise<TestExternalTranscoderConnectionResponse>.pending()
        testExternalTranscoderConnectionWithRequestBuilder(testExternalTranscoderConnectionRequest: testExternalTranscoderConnectionRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/external-transcoders/test-connection
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter testExternalTranscoderConnectionRequest: (body)  
     - returns: RequestBuilder<TestExternalTranscoderConnectionResponse> 
     */
    open class func testExternalTranscoderConnectionWithRequestBuilder(testExternalTranscoderConnectionRequest: TestExternalTranscoderConnectionRequest) -> RequestBuilder<TestExternalTranscoderConnectionResponse> {
        let localVariablePath = "/api/2/media/external-transcoders/test-connection"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: testExternalTranscoderConnectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TestExternalTranscoderConnectionResponse>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter workflowTransitionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<WorkflowTransitionResponse>
     */
    open class func transitionWorkflow( workflowTransitionRequest: WorkflowTransitionRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<WorkflowTransitionResponse> {
        let deferred = Promise<WorkflowTransitionResponse>.pending()
        transitionWorkflowWithRequestBuilder(workflowTransitionRequest: workflowTransitionRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/workflow/transition
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter workflowTransitionRequest: (body)  
     - returns: RequestBuilder<WorkflowTransitionResponse> 
     */
    open class func transitionWorkflowWithRequestBuilder(workflowTransitionRequest: WorkflowTransitionRequest) -> RequestBuilder<WorkflowTransitionResponse> {
        let localVariablePath = "/api/2/media/workflow/transition"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workflowTransitionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WorkflowTransitionResponse>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func unbookmarkMediaDirectory( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        unbookmarkMediaDirectoryWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/files/{id}/bookmark
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func unbookmarkMediaDirectoryWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/bookmark"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func unmarkMediaDirectoryAsShowroom( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        unmarkMediaDirectoryAsShowroomWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/media/files/{id}/showroom
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - returns: RequestBuilder<Void> 
     */
    open class func unmarkMediaDirectoryAsShowroomWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/media/files/{id}/showroom"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func unresolveComment( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        unresolveCommentWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/media/comments/{id}/unresolve
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - returns: RequestBuilder<Comment> 
     */
    open class func unresolveCommentWithRequestBuilder(id: Int) -> RequestBuilder<Comment> {
        var localVariablePath = "/api/2/media/comments/{id}/unresolve"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter asset: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Asset>
     */
    open class func updateAsset( id: Int,  asset: Asset, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Asset> {
        let deferred = Promise<Asset>.pending()
        updateAssetWithRequestBuilder(id: id, asset: asset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/assets/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Asset. 
     - parameter asset: (body)  
     - returns: RequestBuilder<Asset> 
     */
    open class func updateAssetWithRequestBuilder(id: Int, asset: Asset) -> RequestBuilder<Asset> {
        var localVariablePath = "/api/2/media/assets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: asset)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Asset>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter assetRating: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AssetRating>
     */
    open class func updateAssetRating( id: Int,  assetRating: AssetRating, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<AssetRating> {
        let deferred = Promise<AssetRating>.pending()
        updateAssetRatingWithRequestBuilder(id: id, assetRating: assetRating).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/ratings/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Rating. 
     - parameter assetRating: (body)  
     - returns: RequestBuilder<AssetRating> 
     */
    open class func updateAssetRatingWithRequestBuilder(id: Int, assetRating: AssetRating) -> RequestBuilder<AssetRating> {
        var localVariablePath = "/api/2/media/ratings/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assetRating)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetRating>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter comment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Comment>
     */
    open class func updateComment( id: Int,  comment: Comment, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Comment> {
        let deferred = Promise<Comment>.pending()
        updateCommentWithRequestBuilder(id: id, comment: comment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/comments/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Comment. 
     - parameter comment: (body)  
     - returns: RequestBuilder<Comment> 
     */
    open class func updateCommentWithRequestBuilder(id: Int, comment: Comment) -> RequestBuilder<Comment> {
        var localVariablePath = "/api/2/media/comments/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: comment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Comment>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter customField: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<CustomField>
     */
    open class func updateCustomField( id: Int,  customField: CustomField, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<CustomField> {
        let deferred = Promise<CustomField>.pending()
        updateCustomFieldWithRequestBuilder(id: id, customField: customField).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/custom-fields/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Custom field. 
     - parameter customField: (body)  
     - returns: RequestBuilder<CustomField> 
     */
    open class func updateCustomFieldWithRequestBuilder(id: Int, customField: CustomField) -> RequestBuilder<CustomField> {
        var localVariablePath = "/api/2/media/custom-fields/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customField)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomField>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter editorProject: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<EditorProject>
     */
    open class func updateEditorProject( id: Int,  editorProject: EditorProject, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<EditorProject> {
        let deferred = Promise<EditorProject>.pending()
        updateEditorProjectWithRequestBuilder(id: id, editorProject: editorProject).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/editor/{id}
     - ### Required permissions    * User account permission: `media:access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter editorProject: (body)  
     - returns: RequestBuilder<EditorProject> 
     */
    open class func updateEditorProjectWithRequestBuilder(id: Int, editorProject: EditorProject) -> RequestBuilder<EditorProject> {
        var localVariablePath = "/api/2/media/editor/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: editorProject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EditorProject>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter externalTranscoder: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ExternalTranscoder>
     */
    open class func updateExternalTranscoder( id: Int,  externalTranscoder: ExternalTranscoder, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ExternalTranscoder> {
        let deferred = Promise<ExternalTranscoder>.pending()
        updateExternalTranscoderWithRequestBuilder(id: id, externalTranscoder: externalTranscoder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/external-transcoders/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `system:admin-access` (write) 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this external transcoder. 
     - parameter externalTranscoder: (body)  
     - returns: RequestBuilder<ExternalTranscoder> 
     */
    open class func updateExternalTranscoderWithRequestBuilder(id: Int, externalTranscoder: ExternalTranscoder) -> RequestBuilder<ExternalTranscoder> {
        var localVariablePath = "/api/2/media/external-transcoders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: externalTranscoder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalTranscoder>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter marker: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Marker>
     */
    open class func updateMarker( id: Int,  marker: Marker, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Marker> {
        let deferred = Promise<Marker>.pending()
        updateMarkerWithRequestBuilder(id: id, marker: marker).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/markers/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this marker. 
     - parameter marker: (body)  
     - returns: RequestBuilder<Marker> 
     */
    open class func updateMarkerWithRequestBuilder(id: Int, marker: Marker) -> RequestBuilder<Marker> {
        var localVariablePath = "/api/2/media/markers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: marker)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Marker>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this File. 
     - parameter mediaFile: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFile>
     */
    open class func updateMediaFile( id: Int,  mediaFile: MediaFile, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFile> {
        let deferred = Promise<MediaFile>.pending()
        updateMediaFileWithRequestBuilder(id: id, mediaFile: mediaFile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/files/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this File. 
     - parameter mediaFile: (body)  
     - returns: RequestBuilder<MediaFile> 
     */
    open class func updateMediaFileWithRequestBuilder(id: Int, mediaFile: MediaFile) -> RequestBuilder<MediaFile> {
        var localVariablePath = "/api/2/media/files/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaFile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter mediaFileTemplate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaFileTemplate>
     */
    open class func updateMediaFileTemplate( id: Int,  mediaFileTemplate: MediaFileTemplate, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaFileTemplate> {
        let deferred = Promise<MediaFileTemplate>.pending()
        updateMediaFileTemplateWithRequestBuilder(id: id, mediaFileTemplate: mediaFileTemplate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/files/templates/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Template. 
     - parameter mediaFileTemplate: (body)  
     - returns: RequestBuilder<MediaFileTemplate> 
     */
    open class func updateMediaFileTemplateWithRequestBuilder(id: Int, mediaFileTemplate: MediaFileTemplate) -> RequestBuilder<MediaFileTemplate> {
        var localVariablePath = "/api/2/media/files/templates/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaFileTemplate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaFileTemplate>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter mediaRoot: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRoot>
     */
    open class func updateMediaRoot( id: Int,  mediaRoot: MediaRoot, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRoot> {
        let deferred = Promise<MediaRoot>.pending()
        updateMediaRootWithRequestBuilder(id: id, mediaRoot: mediaRoot).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/roots/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this media root. 
     - parameter mediaRoot: (body)  
     - returns: RequestBuilder<MediaRoot> 
     */
    open class func updateMediaRootWithRequestBuilder(id: Int, mediaRoot: MediaRoot) -> RequestBuilder<MediaRoot> {
        var localVariablePath = "/api/2/media/roots/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRoot)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRoot>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter mediaRootPermission: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<MediaRootPermission>
     */
    open class func updateMediaRootPermission( id: Int,  mediaRootPermission: MediaRootPermission, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<MediaRootPermission> {
        let deferred = Promise<MediaRootPermission>.pending()
        updateMediaRootPermissionWithRequestBuilder(id: id, mediaRootPermission: mediaRootPermission).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/root-permissions/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Media Root Permission. 
     - parameter mediaRootPermission: (body)  
     - returns: RequestBuilder<MediaRootPermission> 
     */
    open class func updateMediaRootPermissionWithRequestBuilder(id: Int, mediaRootPermission: MediaRootPermission) -> RequestBuilder<MediaRootPermission> {
        var localVariablePath = "/api/2/media/root-permissions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mediaRootPermission)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaRootPermission>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter unfilteredTag: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<UnfilteredTag>
     */
    open class func updateMediaTag( id: Int,  unfilteredTag: UnfilteredTag, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<UnfilteredTag> {
        let deferred = Promise<UnfilteredTag>.pending()
        updateMediaTagWithRequestBuilder(id: id, unfilteredTag: unfilteredTag).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/tags/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this Tag. 
     - parameter unfilteredTag: (body)  
     - returns: RequestBuilder<UnfilteredTag> 
     */
    open class func updateMediaTagWithRequestBuilder(id: Int, unfilteredTag: UnfilteredTag) -> RequestBuilder<UnfilteredTag> {
        var localVariablePath = "/api/2/media/tags/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unfilteredTag)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnfilteredTag>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter proxyProfile: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ProxyProfile>
     */
    open class func updateProxyProfile( id: Int,  proxyProfile: ProxyProfile, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ProxyProfile> {
        let deferred = Promise<ProxyProfile>.pending()
        updateProxyProfileWithRequestBuilder(id: id, proxyProfile: proxyProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/proxy-profiles/{id}
     - ### Required permissions    * User account permission: `media:access` (read) / `media:roots:manage` (write)   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this proxy profile. 
     - parameter proxyProfile: (body)  
     - returns: RequestBuilder<ProxyProfile> 
     */
    open class func updateProxyProfileWithRequestBuilder(id: Int, proxyProfile: ProxyProfile) -> RequestBuilder<ProxyProfile> {
        var localVariablePath = "/api/2/media/proxy-profiles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: proxyProfile)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProxyProfile>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter subclip: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Subclip>
     */
    open class func updateSubclip( id: Int,  subclip: Subclip, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Subclip> {
        let deferred = Promise<Subclip>.pending()
        updateSubclipWithRequestBuilder(id: id, subclip: subclip).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /api/2/media/subclips/{id}
     - ### Required permissions    * User account permission: `media:access`   * License component: media 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this subclip. 
     - parameter subclip: (body)  
     - returns: RequestBuilder<Subclip> 
     */
    open class func updateSubclipWithRequestBuilder(id: Int, subclip: Subclip) -> RequestBuilder<Subclip> {
        var localVariablePath = "/api/2/media/subclips/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subclip)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subclip>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
