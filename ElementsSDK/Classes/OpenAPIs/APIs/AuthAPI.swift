//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import PromiseKit
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**

     - parameter ticket: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<ElementsUserDetail>
     */
    open class func checkAuthTicket( ticket: Ticket, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<ElementsUserDetail> {
        let deferred = Promise<ElementsUserDetail>.pending()
        checkAuthTicketWithRequestBuilder(ticket: ticket).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/ticket/check
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter ticket: (body)  
     - returns: RequestBuilder<ElementsUserDetail> 
     */
    open class func checkAuthTicketWithRequestBuilder(ticket: Ticket) -> RequestBuilder<ElementsUserDetail> {
        let localVariablePath = "/api/2/auth/ticket/check"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ticket)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ElementsUserDetail>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Ticket>
     */
    open class func createAuthTicket(apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Ticket> {
        let deferred = Promise<Ticket>.pending()
        createAuthTicketWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/ticket
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Ticket> 
     */
    open class func createAuthTicketWithRequestBuilder() -> RequestBuilder<Ticket> {
        let localVariablePath = "/api/2/auth/ticket"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Ticket>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this one time access token. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func deleteAccessToken( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        deleteAccessTokenWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /api/2/auth/access-tokens/{id}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this one time access token. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAccessTokenWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/auth/access-tokens/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<GeneratePasswordEndpointResponse>
     */
    open class func generatePassword(apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<GeneratePasswordEndpointResponse> {
        let deferred = Promise<GeneratePasswordEndpointResponse>.pending()
        generatePasswordWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/generate-password
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<GeneratePasswordEndpointResponse> 
     */
    open class func generatePasswordWithRequestBuilder() -> RequestBuilder<GeneratePasswordEndpointResponse> {
        let localVariablePath = "/api/2/auth/generate-password"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeneratePasswordEndpointResponse>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this one time access token. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<OneTimeAccessToken>
     */
    open class func getAccessToken( id: Int, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<OneTimeAccessToken> {
        let deferred = Promise<OneTimeAccessToken>.pending()
        getAccessTokenWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/auth/access-tokens/{id}
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this one time access token. 
     - returns: RequestBuilder<OneTimeAccessToken> 
     */
    open class func getAccessTokenWithRequestBuilder(id: Int) -> RequestBuilder<OneTimeAccessToken> {
        var localVariablePath = "/api/2/auth/access-tokens/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimeAccessToken>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter sharedBundles: (query) Filter the returned list by &#x60;shared_bundles&#x60;. (optional)
     - parameter sharedDirectories: (query) Filter the returned list by &#x60;shared_directories&#x60;. (optional)
     - parameter sharedBundlesAsset: (query) Filter the returned list by &#x60;shared_bundles__asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter createdBy: (query) Filter the returned list by &#x60;created_by&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<[OneTimeAccessToken]>
     */
    open class func getAllAccessTokens( sharedBundles: String? = nil,  sharedDirectories: String? = nil,  sharedBundlesAsset: String? = nil,  user: String? = nil,  createdBy: String? = nil,  ordering: String? = nil,  limit: Int? = nil,  offset: Int? = nil, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<[OneTimeAccessToken]> {
        let deferred = Promise<[OneTimeAccessToken]>.pending()
        getAllAccessTokensWithRequestBuilder(sharedBundles: sharedBundles, sharedDirectories: sharedDirectories, sharedBundlesAsset: sharedBundlesAsset, user: user, createdBy: createdBy, ordering: ordering, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - GET /api/2/auth/access-tokens
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter sharedBundles: (query) Filter the returned list by &#x60;shared_bundles&#x60;. (optional)
     - parameter sharedDirectories: (query) Filter the returned list by &#x60;shared_directories&#x60;. (optional)
     - parameter sharedBundlesAsset: (query) Filter the returned list by &#x60;shared_bundles__asset&#x60;. (optional)
     - parameter user: (query) Filter the returned list by &#x60;user&#x60;. (optional)
     - parameter createdBy: (query) Filter the returned list by &#x60;created_by&#x60;. (optional)
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<[OneTimeAccessToken]> 
     */
    open class func getAllAccessTokensWithRequestBuilder(sharedBundles: String? = nil, sharedDirectories: String? = nil, sharedBundlesAsset: String? = nil, user: String? = nil, createdBy: String? = nil, ordering: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[OneTimeAccessToken]> {
        let localVariablePath = "/api/2/auth/access-tokens"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "shared_bundles": sharedBundles?.encodeToJSON(),
            "shared_directories": sharedDirectories?.encodeToJSON(),
            "shared_bundles__asset": sharedBundlesAsset?.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "created_by": createdBy?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[OneTimeAccessToken]>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter authLoginEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<AuthLoginEndpointResponse>
     */
    open class func login( authLoginEndpointRequest: AuthLoginEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<AuthLoginEndpointResponse> {
        let deferred = Promise<AuthLoginEndpointResponse>.pending()
        loginWithRequestBuilder(authLoginEndpointRequest: authLoginEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                deferred.resolver.fulfill(response.body!)
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/login
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter authLoginEndpointRequest: (body)  
     - returns: RequestBuilder<AuthLoginEndpointResponse> 
     */
    open class func loginWithRequestBuilder(authLoginEndpointRequest: AuthLoginEndpointRequest) -> RequestBuilder<AuthLoginEndpointResponse> {
        let localVariablePath = "/api/2/auth/login"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authLoginEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthLoginEndpointResponse>.Type = ElementsSDK.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func logout(apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        logoutWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/logout
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/auth/logout"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter passwordResetEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func resetPassword( passwordResetEndpointRequest: PasswordResetEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        resetPasswordWithRequestBuilder(passwordResetEndpointRequest: passwordResetEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/reset-password
     - ### Required permissions    * <class 'rest_framework.permissions.AllowAny'> 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter passwordResetEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func resetPasswordWithRequestBuilder(passwordResetEndpointRequest: PasswordResetEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/auth/reset-password"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordResetEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this one time access token. 
     - parameter sendLinkEmailRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func sendAccessTokenEmailNotification( id: Int,  sendLinkEmailRequest: SendLinkEmailRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        sendAccessTokenEmailNotificationWithRequestBuilder(id: id, sendLinkEmailRequest: sendLinkEmailRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/access-tokens/{id}/email
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter id: (path) A unique integer value identifying this one time access token. 
     - parameter sendLinkEmailRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func sendAccessTokenEmailNotificationWithRequestBuilder(id: Int, sendLinkEmailRequest: SendLinkEmailRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/2/auth/access-tokens/{id}/email"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendLinkEmailRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter impersonationEndpointRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func startImpersonation( impersonationEndpointRequest: ImpersonationEndpointRequest, apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        startImpersonationWithRequestBuilder(impersonationEndpointRequest: impersonationEndpointRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/impersonation
     - ### Required permissions    * User account permission: `system:admin-access` 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - parameter impersonationEndpointRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func startImpersonationWithRequestBuilder(impersonationEndpointRequest: ImpersonationEndpointRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/auth/impersonation"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: impersonationEndpointRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: Promise<Void>
     */
    open class func stopImpersonation(apiResponseQueue: DispatchQueue = ElementsSDK.apiResponseQueue) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        stopImpersonationWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                deferred.resolver.fulfill(())
            case let .failure(error):
                deferred.resolver.reject(error)
            }
        }
        return deferred.promise
    }

    /**
     - POST /api/2/auth/impersonation/stop
     - ### Required permissions    * Authenticated user 
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - returns: RequestBuilder<Void> 
     */
    open class func stopImpersonationWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/api/2/auth/impersonation/stop"
        let localVariableURLString = ElementsSDK.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ElementsSDK.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
