//
// AIModelPartialUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AIModelPartialUpdate: Codable, JSONEncodable, Hashable {

    public var dataset: AIDatasetReference?
    public var parameters: [String: String]?
    public var name: String?
    public var trainingTaskId: String?
    public var threshold: Double?
    public var epoch: Int?
    public var preprocessingTask: String?

    public init(dataset: AIDatasetReference? = nil, parameters: [String: String]? = nil, name: String? = nil, trainingTaskId: String? = nil, threshold: Double? = nil, epoch: Int? = nil, preprocessingTask: String? = nil) {
        self.dataset = dataset
        self.parameters = parameters
        self.name = name
        self.trainingTaskId = trainingTaskId
        self.threshold = threshold
        self.epoch = epoch
        self.preprocessingTask = preprocessingTask
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dataset
        case parameters
        case name
        case trainingTaskId = "training_task_id"
        case threshold
        case epoch
        case preprocessingTask = "preprocessing_task"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dataset, forKey: .dataset)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(trainingTaskId, forKey: .trainingTaskId)
        try container.encodeIfPresent(threshold, forKey: .threshold)
        try container.encodeIfPresent(epoch, forKey: .epoch)
        try container.encodeIfPresent(preprocessingTask, forKey: .preprocessingTask)
    }
}

