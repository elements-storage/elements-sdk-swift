//
// AIMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AIMetadata: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case null = "null"
        case transcript = "transcript"
        case visual = "visual"
    }
    public var id: Int
    public var asset: Int
    public var dataset: AIDataset
    public var model: AIModel
    public var type: ModelType?
    public var metadata: AnyCodable

    public init(id: Int, asset: Int, dataset: AIDataset, model: AIModel, type: ModelType? = nil, metadata: AnyCodable) {
        self.id = id
        self.asset = asset
        self.dataset = dataset
        self.model = model
        self.type = type
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case asset
        case dataset
        case model
        case type
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(asset, forKey: .asset)
        try container.encode(dataset, forKey: .dataset)
        try container.encode(model, forKey: .model)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(metadata, forKey: .metadata)
    }
}

