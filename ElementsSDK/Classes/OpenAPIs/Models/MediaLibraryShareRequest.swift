//
// MediaLibraryShareRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaLibraryShareRequest: Codable, Hashable {

    public var bundles: Set<Int>?
    public var directories: Set<Int>?
    public var expires: Date
    public var viewLimit: Int?
    public var permissions: MediaRootPermissionAccessOptions
    public var user: Int?
    public var email: String?
    public var linkType: String?
    public var password: String?

    public init(bundles: Set<Int>? = nil, directories: Set<Int>? = nil, expires: Date, viewLimit: Int? = nil, permissions: MediaRootPermissionAccessOptions, user: Int? = nil, email: String? = nil, linkType: String? = nil, password: String? = nil) {
        self.bundles = bundles
        self.directories = directories
        self.expires = expires
        self.viewLimit = viewLimit
        self.permissions = permissions
        self.user = user
        self.email = email
        self.linkType = linkType
        self.password = password
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bundles
        case directories
        case expires
        case viewLimit = "view_limit"
        case permissions
        case user
        case email
        case linkType = "link_type"
        case password
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bundles, forKey: .bundles)
        try container.encodeIfPresent(directories, forKey: .directories)
        try container.encode(expires, forKey: .expires)
        try container.encodeIfPresent(viewLimit, forKey: .viewLimit)
        try container.encode(permissions, forKey: .permissions)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(linkType, forKey: .linkType)
        try container.encodeIfPresent(password, forKey: .password)
    }
}

