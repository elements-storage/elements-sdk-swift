//
// AWSAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct AWSAccount: Codable, Hashable {

    public enum DefaultRegion: String, Codable, CaseIterable {
        case usEast2 = "us-east-2"
        case usEast1 = "us-east-1"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case apEast1 = "ap-east-1"
        case apSouth1 = "ap-south-1"
        case apNortheast2 = "ap-northeast-2"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case caCentral1 = "ca-central-1"
        case cnNorth1 = "cn-north-1"
        case cnNorthwest1 = "cn-northwest-1"
        case euCentral1 = "eu-central-1"
        case euWest1 = "eu-west-1"
        case euWest2 = "eu-west-2"
        case euWest3 = "eu-west-3"
        case euNorth1 = "eu-north-1"
        case meSouth1 = "me-south-1"
        case saEast1 = "sa-east-1"
    }
    public var id: Int?
    public var name: String
    public var accessKeyId: String
    public var secretAccessKey: String
    public var endpointUrl: String?
    public var defaultRegion: DefaultRegion?

    public init(id: Int? = nil, name: String, accessKeyId: String, secretAccessKey: String, endpointUrl: String? = nil, defaultRegion: DefaultRegion? = nil) {
        self.id = id
        self.name = name
        self.accessKeyId = accessKeyId
        self.secretAccessKey = secretAccessKey
        self.endpointUrl = endpointUrl
        self.defaultRegion = defaultRegion
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case accessKeyId = "access_key_id"
        case secretAccessKey = "secret_access_key"
        case endpointUrl = "endpoint_url"
        case defaultRegion = "default_region"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(accessKeyId, forKey: .accessKeyId)
        try container.encode(secretAccessKey, forKey: .secretAccessKey)
        try container.encodeIfPresent(endpointUrl, forKey: .endpointUrl)
        try container.encodeIfPresent(defaultRegion, forKey: .defaultRegion)
    }



}
