//
// TaskType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct TaskType: Codable, Hashable {

    public var type: String
    public var displayName: String
    public var displayGroup: String
    public var inputType: String?
    public var abortable: Bool
    public var argTemplate: [String: String]?
    public var argTypes: [String: ArgumentType]?
    public var requiredArgs: [String]
    public var outputNames: [String: String]
    public var outputTypes: [String: ArgumentType]?
    public var parametersEditorComponent: String?
    public var superuserOnly: Bool
    public var iconClass: String?
    public var isAvailable: Bool?
    public var allowInJobs: Bool
    public var newSinceVersion: String?

    public init(type: String, displayName: String, displayGroup: String, inputType: String?, abortable: Bool, argTemplate: [String: String]?, argTypes: [String: ArgumentType]? = nil, requiredArgs: [String], outputNames: [String: String], outputTypes: [String: ArgumentType]? = nil, parametersEditorComponent: String?, superuserOnly: Bool, iconClass: String?, isAvailable: Bool? = nil, allowInJobs: Bool, newSinceVersion: String?) {
        self.type = type
        self.displayName = displayName
        self.displayGroup = displayGroup
        self.inputType = inputType
        self.abortable = abortable
        self.argTemplate = argTemplate
        self.argTypes = argTypes
        self.requiredArgs = requiredArgs
        self.outputNames = outputNames
        self.outputTypes = outputTypes
        self.parametersEditorComponent = parametersEditorComponent
        self.superuserOnly = superuserOnly
        self.iconClass = iconClass
        self.isAvailable = isAvailable
        self.allowInJobs = allowInJobs
        self.newSinceVersion = newSinceVersion
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case displayName = "display_name"
        case displayGroup = "display_group"
        case inputType = "input_type"
        case abortable
        case argTemplate = "arg_template"
        case argTypes = "arg_types"
        case requiredArgs = "required_args"
        case outputNames = "output_names"
        case outputTypes = "output_types"
        case parametersEditorComponent = "parameters_editor_component"
        case superuserOnly = "superuser_only"
        case iconClass = "icon_class"
        case isAvailable = "is_available"
        case allowInJobs = "allow_in_jobs"
        case newSinceVersion = "new_since_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(displayGroup, forKey: .displayGroup)
        try container.encode(inputType, forKey: .inputType)
        try container.encode(abortable, forKey: .abortable)
        try container.encode(argTemplate, forKey: .argTemplate)
        try container.encodeIfPresent(argTypes, forKey: .argTypes)
        try container.encode(requiredArgs, forKey: .requiredArgs)
        try container.encode(outputNames, forKey: .outputNames)
        try container.encodeIfPresent(outputTypes, forKey: .outputTypes)
        try container.encode(parametersEditorComponent, forKey: .parametersEditorComponent)
        try container.encode(superuserOnly, forKey: .superuserOnly)
        try container.encode(iconClass, forKey: .iconClass)
        try container.encodeIfPresent(isAvailable, forKey: .isAvailable)
        try container.encode(allowInJobs, forKey: .allowInJobs)
        try container.encode(newSinceVersion, forKey: .newSinceVersion)
    }



}
