//
// DownloadArchive.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DownloadArchive: Codable, JSONEncodable, Hashable {

    public enum ProgressUnit: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
    }
    public var id: UUID
    public var taskInfo: TaskInfo
    public var uncompressedSize: Int
    public var size: Int
    public var expires: String
    public var files: [String]
    public var name: String
    public var path: String
    public var createdAt: Date
    public var progressUnit: ProgressUnit?
    public var user: Int?

    public init(id: UUID, taskInfo: TaskInfo, uncompressedSize: Int, size: Int, expires: String, files: [String], name: String, path: String, createdAt: Date, progressUnit: ProgressUnit? = nil, user: Int? = nil) {
        self.id = id
        self.taskInfo = taskInfo
        self.uncompressedSize = uncompressedSize
        self.size = size
        self.expires = expires
        self.files = files
        self.name = name
        self.path = path
        self.createdAt = createdAt
        self.progressUnit = progressUnit
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case taskInfo = "task_info"
        case uncompressedSize = "uncompressed_size"
        case size
        case expires
        case files
        case name
        case path
        case createdAt = "created_at"
        case progressUnit = "progress_unit"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(taskInfo, forKey: .taskInfo)
        try container.encode(uncompressedSize, forKey: .uncompressedSize)
        try container.encode(size, forKey: .size)
        try container.encode(expires, forKey: .expires)
        try container.encode(files, forKey: .files)
        try container.encode(name, forKey: .name)
        try container.encode(path, forKey: .path)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(progressUnit, forKey: .progressUnit)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

