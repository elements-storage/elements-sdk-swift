//
// CloudAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CloudAccount: Codable, JSONEncodable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case azure = "azure"
        case aws = "aws"
        case gcloud = "gcloud"
    }
    public enum MountCredentialsManagement: String, Codable, CaseIterable {
        case null = "null"
        case share = "share"
    }
    public var id: Int
    public var name: String
    public var provider: Provider?
    public var accessId: String?
    public var secret: String?
    public var tenant: String?
    public var subscription: String?
    public var endpoint: String?
    public var mountCredentialsManagement: MountCredentialsManagement?

    public init(id: Int, name: String, provider: Provider? = nil, accessId: String? = nil, secret: String? = nil, tenant: String? = nil, subscription: String? = nil, endpoint: String? = nil, mountCredentialsManagement: MountCredentialsManagement? = nil) {
        self.id = id
        self.name = name
        self.provider = provider
        self.accessId = accessId
        self.secret = secret
        self.tenant = tenant
        self.subscription = subscription
        self.endpoint = endpoint
        self.mountCredentialsManagement = mountCredentialsManagement
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case provider
        case accessId = "access_id"
        case secret
        case tenant
        case subscription
        case endpoint
        case mountCredentialsManagement = "mount_credentials_management"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(accessId, forKey: .accessId)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(tenant, forKey: .tenant)
        try container.encodeIfPresent(subscription, forKey: .subscription)
        try container.encodeIfPresent(endpoint, forKey: .endpoint)
        try container.encodeIfPresent(mountCredentialsManagement, forKey: .mountCredentialsManagement)
    }
}

