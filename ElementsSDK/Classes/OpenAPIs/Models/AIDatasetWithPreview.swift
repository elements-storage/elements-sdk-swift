//
// AIDatasetWithPreview.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AIDatasetWithPreview: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case normal = "normal"
        case faceLibrary = "face-library"
    }
    public var id: UUID
    public var trainingModel: AIModel?
    public var lastFinishedModel: AIModel?
    public var lastChange: Date
    public var imageCount: Int
    /**  categories = AICategory.objects.filter(dataset=obj).prefetch_related('annotations').annotate(first_annotation_id=Min('annotations__id'))[:10] sample_annotations = AIAnnotation.objects.filter(id__in=[x.first_annotation_id for x in categories]) return AIAnnotationSerializer(sample_annotations, many=True).data  */
    public var sampleAnnotations: [AIAnnotation]
    public var name: String
    public var type: ModelType?
    public var connection: Int

    public init(id: UUID, trainingModel: AIModel? = nil, lastFinishedModel: AIModel? = nil, lastChange: Date, imageCount: Int, sampleAnnotations: [AIAnnotation], name: String, type: ModelType? = nil, connection: Int) {
        self.id = id
        self.trainingModel = trainingModel
        self.lastFinishedModel = lastFinishedModel
        self.lastChange = lastChange
        self.imageCount = imageCount
        self.sampleAnnotations = sampleAnnotations
        self.name = name
        self.type = type
        self.connection = connection
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case trainingModel = "training_model"
        case lastFinishedModel = "last_finished_model"
        case lastChange = "last_change"
        case imageCount = "image_count"
        case sampleAnnotations = "sample_annotations"
        case name
        case type
        case connection
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(trainingModel, forKey: .trainingModel)
        try container.encodeIfPresent(lastFinishedModel, forKey: .lastFinishedModel)
        try container.encode(lastChange, forKey: .lastChange)
        try container.encode(imageCount, forKey: .imageCount)
        try container.encode(sampleAnnotations, forKey: .sampleAnnotations)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(connection, forKey: .connection)
    }
}

