//
// OneTimeAccessToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OneTimeAccessToken: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var activity: [OneTimeAccessTokenActivity]
    public var user: ElementsUserMiniReference
    public var createdBy: ElementsUserMini
    public var mediaRootPermissions: String?
    public var sharedBundles: [OneTimeAccessTokenSharedObject]
    public var sharedDirectories: [OneTimeAccessTokenSharedObject]
    public var fullUrl: String
    public var url: String
    public var token: String
    public var createdAt: Date
    public var viewLimitEnabled: Bool?
    public var viewLimitLeft: Int?
    public var expires: Date?
    public var requireLogin: Bool?
    public var isEasySharingForBundle: Int
    public var isEasySharingForDirectory: Int

    public init(id: Int, activity: [OneTimeAccessTokenActivity], user: ElementsUserMiniReference, createdBy: ElementsUserMini, mediaRootPermissions: String? = nil, sharedBundles: [OneTimeAccessTokenSharedObject], sharedDirectories: [OneTimeAccessTokenSharedObject], fullUrl: String, url: String, token: String, createdAt: Date, viewLimitEnabled: Bool? = nil, viewLimitLeft: Int? = nil, expires: Date? = nil, requireLogin: Bool? = nil, isEasySharingForBundle: Int, isEasySharingForDirectory: Int) {
        self.id = id
        self.activity = activity
        self.user = user
        self.createdBy = createdBy
        self.mediaRootPermissions = mediaRootPermissions
        self.sharedBundles = sharedBundles
        self.sharedDirectories = sharedDirectories
        self.fullUrl = fullUrl
        self.url = url
        self.token = token
        self.createdAt = createdAt
        self.viewLimitEnabled = viewLimitEnabled
        self.viewLimitLeft = viewLimitLeft
        self.expires = expires
        self.requireLogin = requireLogin
        self.isEasySharingForBundle = isEasySharingForBundle
        self.isEasySharingForDirectory = isEasySharingForDirectory
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case activity
        case user
        case createdBy = "created_by"
        case mediaRootPermissions = "media_root_permissions"
        case sharedBundles = "shared_bundles"
        case sharedDirectories = "shared_directories"
        case fullUrl = "full_url"
        case url
        case token
        case createdAt = "created_at"
        case viewLimitEnabled = "view_limit_enabled"
        case viewLimitLeft = "view_limit_left"
        case expires
        case requireLogin = "require_login"
        case isEasySharingForBundle = "is_easy_sharing_for_bundle"
        case isEasySharingForDirectory = "is_easy_sharing_for_directory"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(activity, forKey: .activity)
        try container.encode(user, forKey: .user)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(mediaRootPermissions, forKey: .mediaRootPermissions)
        try container.encode(sharedBundles, forKey: .sharedBundles)
        try container.encode(sharedDirectories, forKey: .sharedDirectories)
        try container.encode(fullUrl, forKey: .fullUrl)
        try container.encode(url, forKey: .url)
        try container.encode(token, forKey: .token)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(viewLimitEnabled, forKey: .viewLimitEnabled)
        try container.encodeIfPresent(viewLimitLeft, forKey: .viewLimitLeft)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(requireLogin, forKey: .requireLogin)
        try container.encode(isEasySharingForBundle, forKey: .isEasySharingForBundle)
        try container.encode(isEasySharingForDirectory, forKey: .isEasySharingForDirectory)
    }
}

