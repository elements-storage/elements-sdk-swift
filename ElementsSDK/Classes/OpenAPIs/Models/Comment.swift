//
// Comment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Comment: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var assignee: AnyOfElementsUserMiniReferenceAnyType?
    public var user: AnyOfElementsUserMiniReferenceAnyType?
    public var drawing: [String: String]?
    public var tags: [TagReference]?
    public var fullAsset: Asset?
    public var syncId: UUID
    public var date: Date
    public var text: String?
    public var time: Double?
    public var isCloud: Bool?
    public var resolved: Bool?
    public var resolvedDate: Date?
    public var asset: Int
    public var root: Int?
    public var parent: Int?

    public init(id: Int, assignee: AnyOfElementsUserMiniReferenceAnyType? = nil, user: AnyOfElementsUserMiniReferenceAnyType? = nil, drawing: [String: String]? = nil, tags: [TagReference]? = nil, fullAsset: Asset? = nil, syncId: UUID, date: Date, text: String? = nil, time: Double? = nil, isCloud: Bool? = nil, resolved: Bool? = nil, resolvedDate: Date? = nil, asset: Int, root: Int? = nil, parent: Int? = nil) {
        self.id = id
        self.assignee = assignee
        self.user = user
        self.drawing = drawing
        self.tags = tags
        self.fullAsset = fullAsset
        self.syncId = syncId
        self.date = date
        self.text = text
        self.time = time
        self.isCloud = isCloud
        self.resolved = resolved
        self.resolvedDate = resolvedDate
        self.asset = asset
        self.root = root
        self.parent = parent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case assignee
        case user
        case drawing
        case tags
        case fullAsset = "full_asset"
        case syncId = "sync_id"
        case date
        case text
        case time
        case isCloud = "is_cloud"
        case resolved
        case resolvedDate = "resolved_date"
        case asset
        case root
        case parent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(assignee, forKey: .assignee)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(drawing, forKey: .drawing)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(fullAsset, forKey: .fullAsset)
        try container.encode(syncId, forKey: .syncId)
        try container.encode(date, forKey: .date)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(isCloud, forKey: .isCloud)
        try container.encodeIfPresent(resolved, forKey: .resolved)
        try container.encodeIfPresent(resolvedDate, forKey: .resolvedDate)
        try container.encode(asset, forKey: .asset)
        try container.encodeIfPresent(root, forKey: .root)
        try container.encodeIfPresent(parent, forKey: .parent)
    }
}

