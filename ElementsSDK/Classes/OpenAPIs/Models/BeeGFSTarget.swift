//
// BeeGFSTarget.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BeeGFSTarget: Codable, JSONEncodable, Hashable {

    public var node: StorageNodeMini?
    public var id: Int
    public var host: String
    public var storagePool: Int
    public var sizeTotal: Int
    public var sizeUsed: Int
    public var sizeFree: Int
    public var online: Bool
    public var consistent: Bool
    public var errors: [String]

    public init(node: StorageNodeMini? = nil, id: Int, host: String, storagePool: Int, sizeTotal: Int, sizeUsed: Int, sizeFree: Int, online: Bool, consistent: Bool, errors: [String]) {
        self.node = node
        self.id = id
        self.host = host
        self.storagePool = storagePool
        self.sizeTotal = sizeTotal
        self.sizeUsed = sizeUsed
        self.sizeFree = sizeFree
        self.online = online
        self.consistent = consistent
        self.errors = errors
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case node
        case id
        case host
        case storagePool = "storage_pool"
        case sizeTotal = "size_total"
        case sizeUsed = "size_used"
        case sizeFree = "size_free"
        case online
        case consistent
        case errors
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(node, forKey: .node)
        try container.encode(id, forKey: .id)
        try container.encode(host, forKey: .host)
        try container.encode(storagePool, forKey: .storagePool)
        try container.encode(sizeTotal, forKey: .sizeTotal)
        try container.encode(sizeUsed, forKey: .sizeUsed)
        try container.encode(sizeFree, forKey: .sizeFree)
        try container.encode(online, forKey: .online)
        try container.encode(consistent, forKey: .consistent)
        try container.encode(errors, forKey: .errors)
    }
}

