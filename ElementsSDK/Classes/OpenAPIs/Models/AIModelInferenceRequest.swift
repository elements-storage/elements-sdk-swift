//
// AIModelInferenceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AIModelInferenceRequest: Codable, JSONEncodable, Hashable {

    public var proxy: Int
    public var frameStart: Int?
    public var frameEnd: Int?
    public var frameStep: Int?
    public var skipStep: Int?
    public var combineThreshold: Int?

    public init(proxy: Int, frameStart: Int? = nil, frameEnd: Int? = nil, frameStep: Int? = nil, skipStep: Int? = nil, combineThreshold: Int? = nil) {
        self.proxy = proxy
        self.frameStart = frameStart
        self.frameEnd = frameEnd
        self.frameStep = frameStep
        self.skipStep = skipStep
        self.combineThreshold = combineThreshold
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case proxy
        case frameStart = "frame_start"
        case frameEnd = "frame_end"
        case frameStep = "frame_step"
        case skipStep = "skip_step"
        case combineThreshold = "combine_threshold"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(proxy, forKey: .proxy)
        try container.encodeIfPresent(frameStart, forKey: .frameStart)
        try container.encodeIfPresent(frameEnd, forKey: .frameEnd)
        try container.encodeIfPresent(frameStep, forKey: .frameStep)
        try container.encodeIfPresent(skipStep, forKey: .skipStep)
        try container.encodeIfPresent(combineThreshold, forKey: .combineThreshold)
    }
}

