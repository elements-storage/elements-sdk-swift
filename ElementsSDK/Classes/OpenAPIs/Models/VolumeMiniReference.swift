//
// VolumeMiniReference.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VolumeMiniReference: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case generic = "generic"
        case genericMount = "generic-mount"
        case snfs = "snfs"
        case btrfs = "btrfs"
        case lizardfs = "lizardfs"
        case bcachefs = "bcachefs"
        case onefs = "onefs"
        case beegfs = "beegfs"
        case cloud = "cloud"
    }
    public var id: Int
    public var path: String?
    public var displayName: String?
    public var visualTag: String?
    public var type: ModelType?
    public var name: String?

    public init(id: Int, path: String? = nil, displayName: String? = nil, visualTag: String? = nil, type: ModelType? = nil, name: String? = nil) {
        self.id = id
        self.path = path
        self.displayName = displayName
        self.visualTag = visualTag
        self.type = type
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case path
        case displayName = "display_name"
        case visualTag = "visual_tag"
        case type
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(visualTag, forKey: .visualTag)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(name, forKey: .name)
    }
}

