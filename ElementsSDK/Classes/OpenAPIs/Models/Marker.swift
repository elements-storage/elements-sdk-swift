//
// Marker.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct Marker: Codable, Hashable {

    public var id: Int?
    public var veritoneMetadataParser: String?
    public var title: String?
    public var text: String?
    public var tIn: Double
    public var tOut: Double
    public var createdAt: Date?
    public var modifiedAt: Date?
    public var user: Int?
    public var asset: Int
    public var comment: Int?
    public var veritoneMetadata: Int?

    public init(id: Int? = nil, veritoneMetadataParser: String? = nil, title: String? = nil, text: String? = nil, tIn: Double, tOut: Double, createdAt: Date? = nil, modifiedAt: Date? = nil, user: Int? = nil, asset: Int, comment: Int? = nil, veritoneMetadata: Int? = nil) {
        self.id = id
        self.veritoneMetadataParser = veritoneMetadataParser
        self.title = title
        self.text = text
        self.tIn = tIn
        self.tOut = tOut
        self.createdAt = createdAt
        self.modifiedAt = modifiedAt
        self.user = user
        self.asset = asset
        self.comment = comment
        self.veritoneMetadata = veritoneMetadata
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case veritoneMetadataParser = "veritone_metadata_parser"
        case title
        case text
        case tIn = "t_in"
        case tOut = "t_out"
        case createdAt = "created_at"
        case modifiedAt = "modified_at"
        case user
        case asset
        case comment
        case veritoneMetadata = "veritone_metadata"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(veritoneMetadataParser, forKey: .veritoneMetadataParser)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encode(tIn, forKey: .tIn)
        try container.encode(tOut, forKey: .tOut)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encode(asset, forKey: .asset)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(veritoneMetadata, forKey: .veritoneMetadata)
    }



}
