//
// AIModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AIModel: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var state: Int
    public var progress: AIModelProgress
    public var dataset: AIDatasetReference
    public var parameters: [String: String]
    public var logPath: String
    public var name: String
    public var createdAt: Date
    public var active: Bool
    public var trainingTaskId: String?
    public var threshold: Double?
    public var epoch: Int?
    public var preprocessingTask: String?

    public init(id: UUID, state: Int, progress: AIModelProgress, dataset: AIDatasetReference, parameters: [String: String], logPath: String, name: String, createdAt: Date, active: Bool, trainingTaskId: String? = nil, threshold: Double? = nil, epoch: Int? = nil, preprocessingTask: String? = nil) {
        self.id = id
        self.state = state
        self.progress = progress
        self.dataset = dataset
        self.parameters = parameters
        self.logPath = logPath
        self.name = name
        self.createdAt = createdAt
        self.active = active
        self.trainingTaskId = trainingTaskId
        self.threshold = threshold
        self.epoch = epoch
        self.preprocessingTask = preprocessingTask
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case state
        case progress
        case dataset
        case parameters
        case logPath = "log_path"
        case name
        case createdAt = "created_at"
        case active
        case trainingTaskId = "training_task_id"
        case threshold
        case epoch
        case preprocessingTask = "preprocessing_task"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(state, forKey: .state)
        try container.encode(progress, forKey: .progress)
        try container.encode(dataset, forKey: .dataset)
        try container.encode(parameters, forKey: .parameters)
        try container.encode(logPath, forKey: .logPath)
        try container.encode(name, forKey: .name)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(active, forKey: .active)
        try container.encodeIfPresent(trainingTaskId, forKey: .trainingTaskId)
        try container.encodeIfPresent(threshold, forKey: .threshold)
        try container.encodeIfPresent(epoch, forKey: .epoch)
        try container.encodeIfPresent(preprocessingTask, forKey: .preprocessingTask)
    }
}

