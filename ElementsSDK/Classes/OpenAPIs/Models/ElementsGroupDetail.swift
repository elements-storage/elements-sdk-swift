//
// ElementsGroupDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ElementsGroupDetail: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var permissions: [String]?
    public var membersPreview: [MemberPreview]
    public var effectivePermissions: [String]
    public var ancillaryPath: String?
    public var ancillaryPathReadOnly: String?
    public var members: [ElementsUserReference]?
    public var ldap: AnyOfLDAPServerReferenceAnyType?
    public var name: String
    public var ldapDn: String?
    public var unixGroupname: String?
    public var gid: Int?

    public init(id: Int, permissions: [String]? = nil, membersPreview: [MemberPreview], effectivePermissions: [String], ancillaryPath: String? = nil, ancillaryPathReadOnly: String? = nil, members: [ElementsUserReference]? = nil, ldap: AnyOfLDAPServerReferenceAnyType? = nil, name: String, ldapDn: String? = nil, unixGroupname: String? = nil, gid: Int? = nil) {
        self.id = id
        self.permissions = permissions
        self.membersPreview = membersPreview
        self.effectivePermissions = effectivePermissions
        self.ancillaryPath = ancillaryPath
        self.ancillaryPathReadOnly = ancillaryPathReadOnly
        self.members = members
        self.ldap = ldap
        self.name = name
        self.ldapDn = ldapDn
        self.unixGroupname = unixGroupname
        self.gid = gid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case permissions
        case membersPreview = "members_preview"
        case effectivePermissions = "effective_permissions"
        case ancillaryPath = "ancillary_path"
        case ancillaryPathReadOnly = "ancillary_path_read_only"
        case members
        case ldap
        case name
        case ldapDn = "ldap_dn"
        case unixGroupname = "unix_groupname"
        case gid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encode(membersPreview, forKey: .membersPreview)
        try container.encode(effectivePermissions, forKey: .effectivePermissions)
        try container.encodeIfPresent(ancillaryPath, forKey: .ancillaryPath)
        try container.encodeIfPresent(ancillaryPathReadOnly, forKey: .ancillaryPathReadOnly)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(ldap, forKey: .ldap)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(ldapDn, forKey: .ldapDn)
        try container.encodeIfPresent(unixGroupname, forKey: .unixGroupname)
        try container.encodeIfPresent(gid, forKey: .gid)
    }
}

