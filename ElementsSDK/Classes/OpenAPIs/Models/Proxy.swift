//
// Proxy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Proxy: Codable, Hashable {

    public var id: Int?
    public var urls: [String: String]?
    public var profile: ProxyProfileMini?
    public var failedReason: String?
    public var transforms: String?
    public var generated: Bool?
    public var failed: Bool?
    public var name: String?
    public var variantId: String? = "default"
    public var variantConfig: String?
    public var asset: Int

    public init(id: Int? = nil, urls: [String: String]? = nil, profile: ProxyProfileMini? = nil, failedReason: String? = nil, transforms: String? = nil, generated: Bool? = nil, failed: Bool? = nil, name: String? = nil, variantId: String? = "default", variantConfig: String? = nil, asset: Int) {
        self.id = id
        self.urls = urls
        self.profile = profile
        self.failedReason = failedReason
        self.transforms = transforms
        self.generated = generated
        self.failed = failed
        self.name = name
        self.variantId = variantId
        self.variantConfig = variantConfig
        self.asset = asset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case urls
        case profile
        case failedReason = "failed_reason"
        case transforms
        case generated
        case failed
        case name
        case variantId = "variant_id"
        case variantConfig = "variant_config"
        case asset
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(urls, forKey: .urls)
        try container.encodeIfPresent(profile, forKey: .profile)
        try container.encodeIfPresent(failedReason, forKey: .failedReason)
        try container.encodeIfPresent(transforms, forKey: .transforms)
        try container.encodeIfPresent(generated, forKey: .generated)
        try container.encodeIfPresent(failed, forKey: .failed)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(variantId, forKey: .variantId)
        try container.encodeIfPresent(variantConfig, forKey: .variantConfig)
        try container.encode(asset, forKey: .asset)
    }
}

