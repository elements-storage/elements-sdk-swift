//
// SAMLProviderUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SAMLProviderUpdate: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var entityId: String
    public var ssoUrl: String
    public var sloUrl: String?
    public var certificate: String
    public var spCertificate: String?
    public var spCertificateKey: String?

    public init(name: String? = nil, entityId: String, ssoUrl: String, sloUrl: String? = nil, certificate: String, spCertificate: String? = nil, spCertificateKey: String? = nil) {
        self.name = name
        self.entityId = entityId
        self.ssoUrl = ssoUrl
        self.sloUrl = sloUrl
        self.certificate = certificate
        self.spCertificate = spCertificate
        self.spCertificateKey = spCertificateKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case entityId = "entity_id"
        case ssoUrl = "sso_url"
        case sloUrl = "slo_url"
        case certificate
        case spCertificate = "sp_certificate"
        case spCertificateKey = "sp_certificate_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(entityId, forKey: .entityId)
        try container.encode(ssoUrl, forKey: .ssoUrl)
        try container.encodeIfPresent(sloUrl, forKey: .sloUrl)
        try container.encode(certificate, forKey: .certificate)
        try container.encodeIfPresent(spCertificate, forKey: .spCertificate)
        try container.encodeIfPresent(spCertificateKey, forKey: .spCertificateKey)
    }
}

