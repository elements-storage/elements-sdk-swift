//
// MediaUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MediaUpdate: Codable, Hashable {

    public var id: Int?
    public var asset: AssetMini?
    public var comment: Comment?
    public var directory: MediaFile?
    public var root: MediaRootMini?
    public var user: ElementsUserMini?
    public var customFieldsDiff: [String: String]
    public var addedTags: [Tag]?
    public var removedTags: [Tag]?
    public var type: String
    public var date: Date?
    public var rating: Int?

    public init(id: Int? = nil, asset: AssetMini? = nil, comment: Comment? = nil, directory: MediaFile? = nil, root: MediaRootMini? = nil, user: ElementsUserMini? = nil, customFieldsDiff: [String: String], addedTags: [Tag]? = nil, removedTags: [Tag]? = nil, type: String, date: Date? = nil, rating: Int? = nil) {
        self.id = id
        self.asset = asset
        self.comment = comment
        self.directory = directory
        self.root = root
        self.user = user
        self.customFieldsDiff = customFieldsDiff
        self.addedTags = addedTags
        self.removedTags = removedTags
        self.type = type
        self.date = date
        self.rating = rating
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case asset
        case comment
        case directory
        case root
        case user
        case customFieldsDiff = "custom_fields_diff"
        case addedTags = "added_tags"
        case removedTags = "removed_tags"
        case type
        case date
        case rating
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(directory, forKey: .directory)
        try container.encodeIfPresent(root, forKey: .root)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encode(customFieldsDiff, forKey: .customFieldsDiff)
        try container.encodeIfPresent(addedTags, forKey: .addedTags)
        try container.encodeIfPresent(removedTags, forKey: .removedTags)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(rating, forKey: .rating)
    }



}
