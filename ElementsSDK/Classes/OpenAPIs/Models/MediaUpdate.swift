//
// MediaUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaUpdate: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var asset: AssetMini
    public var comment: Comment
    public var directory: MediaFile
    public var root: MediaRootMini
    public var user: ElementsUserMini
    public var customFieldsDiff: [String: String]
    public var addedTags: [UnfilteredTag]
    public var removedTags: [UnfilteredTag]
    public var type: String
    public var date: Date
    public var rating: Int?

    public init(id: Int, asset: AssetMini, comment: Comment, directory: MediaFile, root: MediaRootMini, user: ElementsUserMini, customFieldsDiff: [String: String], addedTags: [UnfilteredTag], removedTags: [UnfilteredTag], type: String, date: Date, rating: Int? = nil) {
        self.id = id
        self.asset = asset
        self.comment = comment
        self.directory = directory
        self.root = root
        self.user = user
        self.customFieldsDiff = customFieldsDiff
        self.addedTags = addedTags
        self.removedTags = removedTags
        self.type = type
        self.date = date
        self.rating = rating
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case asset
        case comment
        case directory
        case root
        case user
        case customFieldsDiff = "custom_fields_diff"
        case addedTags = "added_tags"
        case removedTags = "removed_tags"
        case type
        case date
        case rating
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(asset, forKey: .asset)
        try container.encode(comment, forKey: .comment)
        try container.encode(directory, forKey: .directory)
        try container.encode(root, forKey: .root)
        try container.encode(user, forKey: .user)
        try container.encode(customFieldsDiff, forKey: .customFieldsDiff)
        try container.encode(addedTags, forKey: .addedTags)
        try container.encode(removedTags, forKey: .removedTags)
        try container.encode(type, forKey: .type)
        try container.encode(date, forKey: .date)
        try container.encodeIfPresent(rating, forKey: .rating)
    }
}

