//
// SystemInfoEndpointResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SystemInfoEndpointResponse: Codable, JSONEncodable, Hashable {

    public var license: License
    public var clientApiVersion: Int
    public var ntHostname: String
    public var offersNtpSync: Bool
    public var offersFileSearch: Bool
    public var language: String
    public var samlProviders: [SAMLProviderMini]
    public var version: ElementsVersion
    public var globalAlerts: [GlobalAlert]

    public init(license: License, clientApiVersion: Int, ntHostname: String, offersNtpSync: Bool, offersFileSearch: Bool, language: String, samlProviders: [SAMLProviderMini], version: ElementsVersion, globalAlerts: [GlobalAlert]) {
        self.license = license
        self.clientApiVersion = clientApiVersion
        self.ntHostname = ntHostname
        self.offersNtpSync = offersNtpSync
        self.offersFileSearch = offersFileSearch
        self.language = language
        self.samlProviders = samlProviders
        self.version = version
        self.globalAlerts = globalAlerts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case license
        case clientApiVersion = "client_api_version"
        case ntHostname = "nt_hostname"
        case offersNtpSync = "offers_ntp_sync"
        case offersFileSearch = "offers_file_search"
        case language
        case samlProviders = "saml_providers"
        case version
        case globalAlerts = "global_alerts"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(license, forKey: .license)
        try container.encode(clientApiVersion, forKey: .clientApiVersion)
        try container.encode(ntHostname, forKey: .ntHostname)
        try container.encode(offersNtpSync, forKey: .offersNtpSync)
        try container.encode(offersFileSearch, forKey: .offersFileSearch)
        try container.encode(language, forKey: .language)
        try container.encode(samlProviders, forKey: .samlProviders)
        try container.encode(version, forKey: .version)
        try container.encode(globalAlerts, forKey: .globalAlerts)
    }
}

