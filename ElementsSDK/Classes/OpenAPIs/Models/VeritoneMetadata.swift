//
// VeritoneMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VeritoneMetadata: Codable, JSONEncodable, Hashable {

    public enum Parser: String, Codable, CaseIterable {
        case null = "null"
        case transcript = "transcript"
        case facial = "facial"
        case visual = "visual"
        case text = "text"
        case translate = "translate"
    }
    public var id: Int
    public var parsedData: [String]?
    public var veritoneId: String?
    public var type: String
    public var contentType: String
    public var engineId: String?
    public var engineName: String?
    public var data: String?
    public var isParsed: Bool?
    public var parser: Parser?
    public var createdAt: Date
    public var asset: Int

    public init(id: Int, parsedData: [String]?, veritoneId: String? = nil, type: String, contentType: String, engineId: String? = nil, engineName: String? = nil, data: String? = nil, isParsed: Bool? = nil, parser: Parser? = nil, createdAt: Date, asset: Int) {
        self.id = id
        self.parsedData = parsedData
        self.veritoneId = veritoneId
        self.type = type
        self.contentType = contentType
        self.engineId = engineId
        self.engineName = engineName
        self.data = data
        self.isParsed = isParsed
        self.parser = parser
        self.createdAt = createdAt
        self.asset = asset
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case parsedData = "parsed_data"
        case veritoneId = "veritone_id"
        case type
        case contentType = "content_type"
        case engineId = "engine_id"
        case engineName = "engine_name"
        case data
        case isParsed = "is_parsed"
        case parser
        case createdAt = "created_at"
        case asset
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(parsedData, forKey: .parsedData)
        try container.encodeIfPresent(veritoneId, forKey: .veritoneId)
        try container.encode(type, forKey: .type)
        try container.encode(contentType, forKey: .contentType)
        try container.encodeIfPresent(engineId, forKey: .engineId)
        try container.encodeIfPresent(engineName, forKey: .engineName)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(isParsed, forKey: .isParsed)
        try container.encodeIfPresent(parser, forKey: .parser)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(asset, forKey: .asset)
    }
}

