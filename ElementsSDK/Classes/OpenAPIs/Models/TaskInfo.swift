//
// TaskInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TaskInfo: Codable, JSONEncodable, Hashable {

    public enum State: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
    }
    public var id: String
    public var displayName: String
    public var kwargs: [String: String]
    public var subtask: Subtask?
    public var worker: StorageNodeMini?
    public var user: ElementsUserMini?
    public var workstation: Workstation?
    public var progress: TaskProgress
    public var logPath: String
    public var finished: Date?
    public var name: String?
    public var taskName: String?
    public var workerName: String?
    public var queue: String?
    public var state: State?
    public var stateText: String?
    public var jobInstance: UUID?
    public var started: Date
    public var exception: String?
    public var traceback: String?
    public var schedule: Int?

    public init(id: String, displayName: String, kwargs: [String: String], subtask: Subtask? = nil, worker: StorageNodeMini? = nil, user: ElementsUserMini? = nil, workstation: Workstation? = nil, progress: TaskProgress, logPath: String, finished: Date? = nil, name: String? = nil, taskName: String? = nil, workerName: String? = nil, queue: String? = nil, state: State? = nil, stateText: String? = nil, jobInstance: UUID? = nil, started: Date, exception: String? = nil, traceback: String? = nil, schedule: Int? = nil) {
        self.id = id
        self.displayName = displayName
        self.kwargs = kwargs
        self.subtask = subtask
        self.worker = worker
        self.user = user
        self.workstation = workstation
        self.progress = progress
        self.logPath = logPath
        self.finished = finished
        self.name = name
        self.taskName = taskName
        self.workerName = workerName
        self.queue = queue
        self.state = state
        self.stateText = stateText
        self.jobInstance = jobInstance
        self.started = started
        self.exception = exception
        self.traceback = traceback
        self.schedule = schedule
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case displayName = "display_name"
        case kwargs
        case subtask
        case worker
        case user
        case workstation
        case progress
        case logPath = "log_path"
        case finished
        case name
        case taskName = "task_name"
        case workerName = "worker_name"
        case queue
        case state
        case stateText = "state_text"
        case jobInstance = "job_instance"
        case started
        case exception
        case traceback
        case schedule
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(kwargs, forKey: .kwargs)
        try container.encodeIfPresent(subtask, forKey: .subtask)
        try container.encodeIfPresent(worker, forKey: .worker)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(workstation, forKey: .workstation)
        try container.encode(progress, forKey: .progress)
        try container.encode(logPath, forKey: .logPath)
        try container.encodeIfPresent(finished, forKey: .finished)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(taskName, forKey: .taskName)
        try container.encodeIfPresent(workerName, forKey: .workerName)
        try container.encodeIfPresent(queue, forKey: .queue)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(stateText, forKey: .stateText)
        try container.encodeIfPresent(jobInstance, forKey: .jobInstance)
        try container.encode(started, forKey: .started)
        try container.encodeIfPresent(exception, forKey: .exception)
        try container.encodeIfPresent(traceback, forKey: .traceback)
        try container.encodeIfPresent(schedule, forKey: .schedule)
    }
}

