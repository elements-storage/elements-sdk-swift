//
// Asset.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Asset: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var proxies: [Proxy]?
    public var defaultProxy: Proxy?
    public var info: [String: String]
    public var proxyInfo: [String: String]
    public var customFields: [String: String]
    public var tags: [Int]
    public var resolvedPermission: MediaRootPermission?
    public var backups: String
    public var proxiesGenerated: Bool
    public var proxiesFailed: Bool
    public var modifiedBy: ElementsUserMini?
    public var bundles: [MediaFileBundleMini]
    public var rating: Int?
    public var format: FormatMetadata
    public var syncId: UUID
    public var displayName: String
    public var hasFiles: Bool
    public var hasBackups: Bool
    public var hasCloudLinks: Bool
    public var checksum: String
    public var type: String
    public var thumbnailGenerated: Bool
    public var matchedScanner: String
    public var workflowState: Int
    public var isTemporary: Bool
    public var created: Date
    public var modified: Date
    public var _set: Int?

    public init(id: Int, proxies: [Proxy]? = nil, defaultProxy: Proxy? = nil, info: [String: String], proxyInfo: [String: String], customFields: [String: String], tags: [Int], resolvedPermission: MediaRootPermission? = nil, backups: String, proxiesGenerated: Bool, proxiesFailed: Bool, modifiedBy: ElementsUserMini? = nil, bundles: [MediaFileBundleMini], rating: Int? = nil, format: FormatMetadata, syncId: UUID, displayName: String, hasFiles: Bool, hasBackups: Bool, hasCloudLinks: Bool, checksum: String, type: String, thumbnailGenerated: Bool, matchedScanner: String, workflowState: Int, isTemporary: Bool, created: Date, modified: Date, _set: Int? = nil) {
        self.id = id
        self.proxies = proxies
        self.defaultProxy = defaultProxy
        self.info = info
        self.proxyInfo = proxyInfo
        self.customFields = customFields
        self.tags = tags
        self.resolvedPermission = resolvedPermission
        self.backups = backups
        self.proxiesGenerated = proxiesGenerated
        self.proxiesFailed = proxiesFailed
        self.modifiedBy = modifiedBy
        self.bundles = bundles
        self.rating = rating
        self.format = format
        self.syncId = syncId
        self.displayName = displayName
        self.hasFiles = hasFiles
        self.hasBackups = hasBackups
        self.hasCloudLinks = hasCloudLinks
        self.checksum = checksum
        self.type = type
        self.thumbnailGenerated = thumbnailGenerated
        self.matchedScanner = matchedScanner
        self.workflowState = workflowState
        self.isTemporary = isTemporary
        self.created = created
        self.modified = modified
        self._set = _set
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case proxies
        case defaultProxy = "default_proxy"
        case info
        case proxyInfo = "proxy_info"
        case customFields = "custom_fields"
        case tags
        case resolvedPermission = "resolved_permission"
        case backups
        case proxiesGenerated = "proxies_generated"
        case proxiesFailed = "proxies_failed"
        case modifiedBy = "modified_by"
        case bundles
        case rating
        case format
        case syncId = "sync_id"
        case displayName = "display_name"
        case hasFiles = "has_files"
        case hasBackups = "has_backups"
        case hasCloudLinks = "has_cloud_links"
        case checksum
        case type
        case thumbnailGenerated = "thumbnail_generated"
        case matchedScanner = "matched_scanner"
        case workflowState = "workflow_state"
        case isTemporary = "is_temporary"
        case created
        case modified
        case _set = "set"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(proxies, forKey: .proxies)
        try container.encodeIfPresent(defaultProxy, forKey: .defaultProxy)
        try container.encode(info, forKey: .info)
        try container.encode(proxyInfo, forKey: .proxyInfo)
        try container.encode(customFields, forKey: .customFields)
        try container.encode(tags, forKey: .tags)
        try container.encodeIfPresent(resolvedPermission, forKey: .resolvedPermission)
        try container.encode(backups, forKey: .backups)
        try container.encode(proxiesGenerated, forKey: .proxiesGenerated)
        try container.encode(proxiesFailed, forKey: .proxiesFailed)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encode(bundles, forKey: .bundles)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encode(format, forKey: .format)
        try container.encode(syncId, forKey: .syncId)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(hasFiles, forKey: .hasFiles)
        try container.encode(hasBackups, forKey: .hasBackups)
        try container.encode(hasCloudLinks, forKey: .hasCloudLinks)
        try container.encode(checksum, forKey: .checksum)
        try container.encode(type, forKey: .type)
        try container.encode(thumbnailGenerated, forKey: .thumbnailGenerated)
        try container.encode(matchedScanner, forKey: .matchedScanner)
        try container.encode(workflowState, forKey: .workflowState)
        try container.encode(isTemporary, forKey: .isTemporary)
        try container.encode(created, forKey: .created)
        try container.encode(modified, forKey: .modified)
        try container.encodeIfPresent(_set, forKey: ._set)
    }
}

