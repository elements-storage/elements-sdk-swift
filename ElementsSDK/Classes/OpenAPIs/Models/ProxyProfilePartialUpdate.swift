//
// ProxyProfilePartialUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProxyProfilePartialUpdate: Codable, Hashable {

    public enum ProxyGenerator: String, Codable, CaseIterable {
        case ffmpeg = "ffmpeg"
        case hotfolder = "hotfolder"
        case transkoder = "transkoder"
        case vantage = "vantage"
        case noop = "noop"
    }
    public enum RateControl: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public enum WatermarkPosition: Int, Codable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }
    public enum TimecodePosition: Int, Codable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }
    public var name: String?
    public var proxyGenerator: ProxyGenerator?
    public var resolution: String?
    public var rateControl: RateControl?
    public var crf: Int?
    public var bitrate: Int?
    public var audioBitrate: Int?
    public var variantsLimit: Int?
    public var enableDenseFilmstrip: Bool?
    public var enableWatermark: Bool?
    public var watermarkImage: String?
    public var watermarkPosition: WatermarkPosition?
    public var watermarkOpacity: Double?
    public var watermarkSize: Double?
    public var enableTimecode: Bool?
    public var timecodePosition: TimecodePosition?
    public var timecodeOpacity: Double?
    public var timecodeSize: Double?
    public var lut: String?
    public var hotfolderCopyTo: String?
    public var hotfolderReadFrom: String?
    public var hotfolderQueueTimeout: Int?
    public var hotfolderEncodeTimeout: Int?
    public var vantageWorkflowId: String?
    public var externalTranscoderStagingPath: String?
    public var externalTranscoder: Int?

    public init(name: String? = nil, proxyGenerator: ProxyGenerator? = nil, resolution: String? = nil, rateControl: RateControl? = nil, crf: Int? = nil, bitrate: Int? = nil, audioBitrate: Int? = nil, variantsLimit: Int? = nil, enableDenseFilmstrip: Bool? = nil, enableWatermark: Bool? = nil, watermarkImage: String? = nil, watermarkPosition: WatermarkPosition? = nil, watermarkOpacity: Double? = nil, watermarkSize: Double? = nil, enableTimecode: Bool? = nil, timecodePosition: TimecodePosition? = nil, timecodeOpacity: Double? = nil, timecodeSize: Double? = nil, lut: String? = nil, hotfolderCopyTo: String? = nil, hotfolderReadFrom: String? = nil, hotfolderQueueTimeout: Int? = nil, hotfolderEncodeTimeout: Int? = nil, vantageWorkflowId: String? = nil, externalTranscoderStagingPath: String? = nil, externalTranscoder: Int? = nil) {
        self.name = name
        self.proxyGenerator = proxyGenerator
        self.resolution = resolution
        self.rateControl = rateControl
        self.crf = crf
        self.bitrate = bitrate
        self.audioBitrate = audioBitrate
        self.variantsLimit = variantsLimit
        self.enableDenseFilmstrip = enableDenseFilmstrip
        self.enableWatermark = enableWatermark
        self.watermarkImage = watermarkImage
        self.watermarkPosition = watermarkPosition
        self.watermarkOpacity = watermarkOpacity
        self.watermarkSize = watermarkSize
        self.enableTimecode = enableTimecode
        self.timecodePosition = timecodePosition
        self.timecodeOpacity = timecodeOpacity
        self.timecodeSize = timecodeSize
        self.lut = lut
        self.hotfolderCopyTo = hotfolderCopyTo
        self.hotfolderReadFrom = hotfolderReadFrom
        self.hotfolderQueueTimeout = hotfolderQueueTimeout
        self.hotfolderEncodeTimeout = hotfolderEncodeTimeout
        self.vantageWorkflowId = vantageWorkflowId
        self.externalTranscoderStagingPath = externalTranscoderStagingPath
        self.externalTranscoder = externalTranscoder
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case proxyGenerator = "proxy_generator"
        case resolution
        case rateControl = "rate_control"
        case crf
        case bitrate
        case audioBitrate = "audio_bitrate"
        case variantsLimit = "variants_limit"
        case enableDenseFilmstrip = "enable_dense_filmstrip"
        case enableWatermark = "enable_watermark"
        case watermarkImage = "watermark_image"
        case watermarkPosition = "watermark_position"
        case watermarkOpacity = "watermark_opacity"
        case watermarkSize = "watermark_size"
        case enableTimecode = "enable_timecode"
        case timecodePosition = "timecode_position"
        case timecodeOpacity = "timecode_opacity"
        case timecodeSize = "timecode_size"
        case lut
        case hotfolderCopyTo = "hotfolder_copy_to"
        case hotfolderReadFrom = "hotfolder_read_from"
        case hotfolderQueueTimeout = "hotfolder_queue_timeout"
        case hotfolderEncodeTimeout = "hotfolder_encode_timeout"
        case vantageWorkflowId = "vantage_workflow_id"
        case externalTranscoderStagingPath = "external_transcoder_staging_path"
        case externalTranscoder = "external_transcoder"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(proxyGenerator, forKey: .proxyGenerator)
        try container.encodeIfPresent(resolution, forKey: .resolution)
        try container.encodeIfPresent(rateControl, forKey: .rateControl)
        try container.encodeIfPresent(crf, forKey: .crf)
        try container.encodeIfPresent(bitrate, forKey: .bitrate)
        try container.encodeIfPresent(audioBitrate, forKey: .audioBitrate)
        try container.encodeIfPresent(variantsLimit, forKey: .variantsLimit)
        try container.encodeIfPresent(enableDenseFilmstrip, forKey: .enableDenseFilmstrip)
        try container.encodeIfPresent(enableWatermark, forKey: .enableWatermark)
        try container.encodeIfPresent(watermarkImage, forKey: .watermarkImage)
        try container.encodeIfPresent(watermarkPosition, forKey: .watermarkPosition)
        try container.encodeIfPresent(watermarkOpacity, forKey: .watermarkOpacity)
        try container.encodeIfPresent(watermarkSize, forKey: .watermarkSize)
        try container.encodeIfPresent(enableTimecode, forKey: .enableTimecode)
        try container.encodeIfPresent(timecodePosition, forKey: .timecodePosition)
        try container.encodeIfPresent(timecodeOpacity, forKey: .timecodeOpacity)
        try container.encodeIfPresent(timecodeSize, forKey: .timecodeSize)
        try container.encodeIfPresent(lut, forKey: .lut)
        try container.encodeIfPresent(hotfolderCopyTo, forKey: .hotfolderCopyTo)
        try container.encodeIfPresent(hotfolderReadFrom, forKey: .hotfolderReadFrom)
        try container.encodeIfPresent(hotfolderQueueTimeout, forKey: .hotfolderQueueTimeout)
        try container.encodeIfPresent(hotfolderEncodeTimeout, forKey: .hotfolderEncodeTimeout)
        try container.encodeIfPresent(vantageWorkflowId, forKey: .vantageWorkflowId)
        try container.encodeIfPresent(externalTranscoderStagingPath, forKey: .externalTranscoderStagingPath)
        try container.encodeIfPresent(externalTranscoder, forKey: .externalTranscoder)
    }
}

