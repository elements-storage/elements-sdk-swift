//
// MediaFileBundle.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaFileBundle: Codable, JSONEncodable, Hashable {

    public var id: Int
    public var asset: Asset?
    public var mainfile: MediaFileMini
    public var snmAttributes: StornextManagerAttributes
    public var isShared: Bool?
    public var name: String
    public var location: Int
    public var sharedViaTokens: [Int]?

    public init(id: Int, asset: Asset? = nil, mainfile: MediaFileMini, snmAttributes: StornextManagerAttributes, isShared: Bool?, name: String, location: Int, sharedViaTokens: [Int]? = nil) {
        self.id = id
        self.asset = asset
        self.mainfile = mainfile
        self.snmAttributes = snmAttributes
        self.isShared = isShared
        self.name = name
        self.location = location
        self.sharedViaTokens = sharedViaTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case asset
        case mainfile
        case snmAttributes = "snm_attributes"
        case isShared = "is_shared"
        case name
        case location
        case sharedViaTokens = "shared_via_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(asset, forKey: .asset)
        try container.encode(mainfile, forKey: .mainfile)
        try container.encode(snmAttributes, forKey: .snmAttributes)
        try container.encode(isShared, forKey: .isShared)
        try container.encode(name, forKey: .name)
        try container.encode(location, forKey: .location)
        try container.encodeIfPresent(sharedViaTokens, forKey: .sharedViaTokens)
    }
}

