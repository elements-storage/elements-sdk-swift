//
// BootstrapData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BootstrapData: Codable, JSONEncodable, Hashable {

    public var currentNode: StorageNode
    public var license: License
    public var parameterValues: Parameters
    public var knownUsernames: [String]
    public var knownEmails: [String]
    public var identityValue: ElementsUserDetail?
    public var impersonationActive: Bool
    public var debug: Bool
    public var version: ElementsVersion
    public var clientOS: String
    public var sessionID: String
    public var cloudConnections: [CloudConnection]
    public var veritoneConnections: [VeritoneConnection]
    public var aiConnections: [AIConnection]
    public var events: [Event]
    public var sentryConfig: [String: String]
    public var hasWANNetworks: Bool
    public var taskMeta: [String: TaskType]
    public var scannerMetadataSchema: [[String: String]]
    public var mediaRootPermissions: [MediaRootPermission]
    public var sharedStorageValues: [String: String]
    public var userStorageValues: [String: String]
    public var samlProviders: [SAMLProviderMini]
    public var activeSAMLProvider: SAMLProviderMini?
    public var settings: [String: String]
    public var tasksSummary: TasksSummary?

    public init(currentNode: StorageNode, license: License, parameterValues: Parameters, knownUsernames: [String], knownEmails: [String], identityValue: ElementsUserDetail? = nil, impersonationActive: Bool, debug: Bool, version: ElementsVersion, clientOS: String, sessionID: String, cloudConnections: [CloudConnection], veritoneConnections: [VeritoneConnection], aiConnections: [AIConnection], events: [Event], sentryConfig: [String: String], hasWANNetworks: Bool, taskMeta: [String: TaskType], scannerMetadataSchema: [[String: String]], mediaRootPermissions: [MediaRootPermission], sharedStorageValues: [String: String], userStorageValues: [String: String], samlProviders: [SAMLProviderMini], activeSAMLProvider: SAMLProviderMini? = nil, settings: [String: String], tasksSummary: TasksSummary? = nil) {
        self.currentNode = currentNode
        self.license = license
        self.parameterValues = parameterValues
        self.knownUsernames = knownUsernames
        self.knownEmails = knownEmails
        self.identityValue = identityValue
        self.impersonationActive = impersonationActive
        self.debug = debug
        self.version = version
        self.clientOS = clientOS
        self.sessionID = sessionID
        self.cloudConnections = cloudConnections
        self.veritoneConnections = veritoneConnections
        self.aiConnections = aiConnections
        self.events = events
        self.sentryConfig = sentryConfig
        self.hasWANNetworks = hasWANNetworks
        self.taskMeta = taskMeta
        self.scannerMetadataSchema = scannerMetadataSchema
        self.mediaRootPermissions = mediaRootPermissions
        self.sharedStorageValues = sharedStorageValues
        self.userStorageValues = userStorageValues
        self.samlProviders = samlProviders
        self.activeSAMLProvider = activeSAMLProvider
        self.settings = settings
        self.tasksSummary = tasksSummary
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentNode
        case license
        case parameterValues
        case knownUsernames
        case knownEmails
        case identityValue
        case impersonationActive
        case debug
        case version
        case clientOS
        case sessionID
        case cloudConnections
        case veritoneConnections
        case aiConnections
        case events
        case sentryConfig
        case hasWANNetworks
        case taskMeta
        case scannerMetadataSchema
        case mediaRootPermissions
        case sharedStorageValues
        case userStorageValues
        case samlProviders
        case activeSAMLProvider
        case settings
        case tasksSummary
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(currentNode, forKey: .currentNode)
        try container.encode(license, forKey: .license)
        try container.encode(parameterValues, forKey: .parameterValues)
        try container.encode(knownUsernames, forKey: .knownUsernames)
        try container.encode(knownEmails, forKey: .knownEmails)
        try container.encodeIfPresent(identityValue, forKey: .identityValue)
        try container.encode(impersonationActive, forKey: .impersonationActive)
        try container.encode(debug, forKey: .debug)
        try container.encode(version, forKey: .version)
        try container.encode(clientOS, forKey: .clientOS)
        try container.encode(sessionID, forKey: .sessionID)
        try container.encode(cloudConnections, forKey: .cloudConnections)
        try container.encode(veritoneConnections, forKey: .veritoneConnections)
        try container.encode(aiConnections, forKey: .aiConnections)
        try container.encode(events, forKey: .events)
        try container.encode(sentryConfig, forKey: .sentryConfig)
        try container.encode(hasWANNetworks, forKey: .hasWANNetworks)
        try container.encode(taskMeta, forKey: .taskMeta)
        try container.encode(scannerMetadataSchema, forKey: .scannerMetadataSchema)
        try container.encode(mediaRootPermissions, forKey: .mediaRootPermissions)
        try container.encode(sharedStorageValues, forKey: .sharedStorageValues)
        try container.encode(userStorageValues, forKey: .userStorageValues)
        try container.encode(samlProviders, forKey: .samlProviders)
        try container.encodeIfPresent(activeSAMLProvider, forKey: .activeSAMLProvider)
        try container.encode(settings, forKey: .settings)
        try container.encodeIfPresent(tasksSummary, forKey: .tasksSummary)
    }
}

