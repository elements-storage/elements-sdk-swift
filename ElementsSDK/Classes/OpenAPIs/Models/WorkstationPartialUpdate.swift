//
// WorkstationPartialUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct WorkstationPartialUpdate: Codable, Hashable {

    public var id: String?
    public var rdcAllowUsers: Set<ElementsUserReference>?
    public var rdcAllowGroups: Set<ElementsGroupReference>?
    public var report: [String: String]?
    public var name: String?
    public var hostname: String?
    public var rdcLastUsed: Date?
    public var rdcDisableUpnp: Bool?
    public var rdcClientPort: Int?
    public var rdcHostPort: Int?

    public init(id: String? = nil, rdcAllowUsers: Set<ElementsUserReference>? = nil, rdcAllowGroups: Set<ElementsGroupReference>? = nil, report: [String: String]? = nil, name: String? = nil, hostname: String? = nil, rdcLastUsed: Date? = nil, rdcDisableUpnp: Bool? = nil, rdcClientPort: Int? = nil, rdcHostPort: Int? = nil) {
        self.id = id
        self.rdcAllowUsers = rdcAllowUsers
        self.rdcAllowGroups = rdcAllowGroups
        self.report = report
        self.name = name
        self.hostname = hostname
        self.rdcLastUsed = rdcLastUsed
        self.rdcDisableUpnp = rdcDisableUpnp
        self.rdcClientPort = rdcClientPort
        self.rdcHostPort = rdcHostPort
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case rdcAllowUsers = "rdc_allow_users"
        case rdcAllowGroups = "rdc_allow_groups"
        case report
        case name
        case hostname
        case rdcLastUsed = "rdc_last_used"
        case rdcDisableUpnp = "rdc_disable_upnp"
        case rdcClientPort = "rdc_client_port"
        case rdcHostPort = "rdc_host_port"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(rdcAllowUsers, forKey: .rdcAllowUsers)
        try container.encodeIfPresent(rdcAllowGroups, forKey: .rdcAllowGroups)
        try container.encodeIfPresent(report, forKey: .report)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(hostname, forKey: .hostname)
        try container.encodeIfPresent(rdcLastUsed, forKey: .rdcLastUsed)
        try container.encodeIfPresent(rdcDisableUpnp, forKey: .rdcDisableUpnp)
        try container.encodeIfPresent(rdcClientPort, forKey: .rdcClientPort)
        try container.encodeIfPresent(rdcHostPort, forKey: .rdcHostPort)
    }



}
