//
// TapeFile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TapeFile: Codable, Hashable {

    public var id: Int?
    public var tape: Tape?
    public var path: String
    public var searchHighlight: String?
    public var uid: Int
    public var name: String
    public var isDir: Bool?
    public var readOnly: Bool?
    public var length: Int?
    public var checksum: String?
    public var fullpath: String?
    public var parent: Int?

    public init(id: Int? = nil, tape: Tape? = nil, path: String, searchHighlight: String? = nil, uid: Int, name: String, isDir: Bool? = nil, readOnly: Bool? = nil, length: Int? = nil, checksum: String? = nil, fullpath: String? = nil, parent: Int? = nil) {
        self.id = id
        self.tape = tape
        self.path = path
        self.searchHighlight = searchHighlight
        self.uid = uid
        self.name = name
        self.isDir = isDir
        self.readOnly = readOnly
        self.length = length
        self.checksum = checksum
        self.fullpath = fullpath
        self.parent = parent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case tape
        case path
        case searchHighlight = "search_highlight"
        case uid
        case name
        case isDir = "is_dir"
        case readOnly = "read_only"
        case length
        case checksum
        case fullpath
        case parent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(tape, forKey: .tape)
        try container.encode(path, forKey: .path)
        try container.encodeIfPresent(searchHighlight, forKey: .searchHighlight)
        try container.encode(uid, forKey: .uid)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(isDir, forKey: .isDir)
        try container.encodeIfPresent(readOnly, forKey: .readOnly)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(checksum, forKey: .checksum)
        try container.encodeIfPresent(fullpath, forKey: .fullpath)
        try container.encodeIfPresent(parent, forKey: .parent)
    }
}

